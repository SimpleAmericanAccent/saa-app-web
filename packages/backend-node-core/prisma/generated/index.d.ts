
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Audio
 * 
 */
export type Audio = $Result.DefaultSelection<Prisma.$AudioPayload>
/**
 * Model Word
 * 
 */
export type Word = $Result.DefaultSelection<Prisma.$WordPayload>
/**
 * Model Issue
 * 
 */
export type Issue = $Result.DefaultSelection<Prisma.$IssuePayload>
/**
 * Model Feature
 * 
 */
export type Feature = $Result.DefaultSelection<Prisma.$FeaturePayload>
/**
 * Model DictionaryEntry
 * 
 */
export type DictionaryEntry = $Result.DefaultSelection<Prisma.$DictionaryEntryPayload>
/**
 * Model WordUsage
 * 
 */
export type WordUsage = $Result.DefaultSelection<Prisma.$WordUsagePayload>
/**
 * Model Pronunciation
 * 
 */
export type Pronunciation = $Result.DefaultSelection<Prisma.$PronunciationPayload>
/**
 * Model WordVariation
 * 
 */
export type WordVariation = $Result.DefaultSelection<Prisma.$WordVariationPayload>
/**
 * Model SpellingPattern
 * 
 */
export type SpellingPattern = $Result.DefaultSelection<Prisma.$SpellingPatternPayload>
/**
 * Model LexicalSet
 * 
 */
export type LexicalSet = $Result.DefaultSelection<Prisma.$LexicalSetPayload>
/**
 * Model LexicalSetUsage
 * 
 */
export type LexicalSetUsage = $Result.DefaultSelection<Prisma.$LexicalSetUsagePayload>
/**
 * Model Example
 * 
 */
export type Example = $Result.DefaultSelection<Prisma.$ExamplePayload>
/**
 * Model ConsonantPhoneme
 * 
 */
export type ConsonantPhoneme = $Result.DefaultSelection<Prisma.$ConsonantPhonemePayload>
/**
 * Model ConsonantPhonemeUsage
 * 
 */
export type ConsonantPhonemeUsage = $Result.DefaultSelection<Prisma.$ConsonantPhonemeUsagePayload>
/**
 * Model OrthoWord
 * 
 */
export type OrthoWord = $Result.DefaultSelection<Prisma.$OrthoWordPayload>
/**
 * Model PronCmuDict
 * 
 */
export type PronCmuDict = $Result.DefaultSelection<Prisma.$PronCmuDictPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.audio`: Exposes CRUD operations for the **Audio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Audio
    * const audio = await prisma.audio.findMany()
    * ```
    */
  get audio(): Prisma.AudioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.word`: Exposes CRUD operations for the **Word** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Words
    * const words = await prisma.word.findMany()
    * ```
    */
  get word(): Prisma.WordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.issue`: Exposes CRUD operations for the **Issue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Issues
    * const issues = await prisma.issue.findMany()
    * ```
    */
  get issue(): Prisma.IssueDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feature`: Exposes CRUD operations for the **Feature** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Features
    * const features = await prisma.feature.findMany()
    * ```
    */
  get feature(): Prisma.FeatureDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dictionaryEntry`: Exposes CRUD operations for the **DictionaryEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DictionaryEntries
    * const dictionaryEntries = await prisma.dictionaryEntry.findMany()
    * ```
    */
  get dictionaryEntry(): Prisma.DictionaryEntryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wordUsage`: Exposes CRUD operations for the **WordUsage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WordUsages
    * const wordUsages = await prisma.wordUsage.findMany()
    * ```
    */
  get wordUsage(): Prisma.WordUsageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pronunciation`: Exposes CRUD operations for the **Pronunciation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pronunciations
    * const pronunciations = await prisma.pronunciation.findMany()
    * ```
    */
  get pronunciation(): Prisma.PronunciationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wordVariation`: Exposes CRUD operations for the **WordVariation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WordVariations
    * const wordVariations = await prisma.wordVariation.findMany()
    * ```
    */
  get wordVariation(): Prisma.WordVariationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.spellingPattern`: Exposes CRUD operations for the **SpellingPattern** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SpellingPatterns
    * const spellingPatterns = await prisma.spellingPattern.findMany()
    * ```
    */
  get spellingPattern(): Prisma.SpellingPatternDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lexicalSet`: Exposes CRUD operations for the **LexicalSet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LexicalSets
    * const lexicalSets = await prisma.lexicalSet.findMany()
    * ```
    */
  get lexicalSet(): Prisma.LexicalSetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lexicalSetUsage`: Exposes CRUD operations for the **LexicalSetUsage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LexicalSetUsages
    * const lexicalSetUsages = await prisma.lexicalSetUsage.findMany()
    * ```
    */
  get lexicalSetUsage(): Prisma.LexicalSetUsageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.example`: Exposes CRUD operations for the **Example** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Examples
    * const examples = await prisma.example.findMany()
    * ```
    */
  get example(): Prisma.ExampleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.consonantPhoneme`: Exposes CRUD operations for the **ConsonantPhoneme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConsonantPhonemes
    * const consonantPhonemes = await prisma.consonantPhoneme.findMany()
    * ```
    */
  get consonantPhoneme(): Prisma.ConsonantPhonemeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.consonantPhonemeUsage`: Exposes CRUD operations for the **ConsonantPhonemeUsage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConsonantPhonemeUsages
    * const consonantPhonemeUsages = await prisma.consonantPhonemeUsage.findMany()
    * ```
    */
  get consonantPhonemeUsage(): Prisma.ConsonantPhonemeUsageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orthoWord`: Exposes CRUD operations for the **OrthoWord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrthoWords
    * const orthoWords = await prisma.orthoWord.findMany()
    * ```
    */
  get orthoWord(): Prisma.OrthoWordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pronCmuDict`: Exposes CRUD operations for the **PronCmuDict** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PronCmuDicts
    * const pronCmuDicts = await prisma.pronCmuDict.findMany()
    * ```
    */
  get pronCmuDict(): Prisma.PronCmuDictDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Audio: 'Audio',
    Word: 'Word',
    Issue: 'Issue',
    Feature: 'Feature',
    DictionaryEntry: 'DictionaryEntry',
    WordUsage: 'WordUsage',
    Pronunciation: 'Pronunciation',
    WordVariation: 'WordVariation',
    SpellingPattern: 'SpellingPattern',
    LexicalSet: 'LexicalSet',
    LexicalSetUsage: 'LexicalSetUsage',
    Example: 'Example',
    ConsonantPhoneme: 'ConsonantPhoneme',
    ConsonantPhonemeUsage: 'ConsonantPhonemeUsage',
    OrthoWord: 'OrthoWord',
    PronCmuDict: 'PronCmuDict'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "audio" | "word" | "issue" | "feature" | "dictionaryEntry" | "wordUsage" | "pronunciation" | "wordVariation" | "spellingPattern" | "lexicalSet" | "lexicalSetUsage" | "example" | "consonantPhoneme" | "consonantPhonemeUsage" | "orthoWord" | "pronCmuDict"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Audio: {
        payload: Prisma.$AudioPayload<ExtArgs>
        fields: Prisma.AudioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AudioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AudioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPayload>
          }
          findFirst: {
            args: Prisma.AudioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AudioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPayload>
          }
          findMany: {
            args: Prisma.AudioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPayload>[]
          }
          create: {
            args: Prisma.AudioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPayload>
          }
          createMany: {
            args: Prisma.AudioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AudioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPayload>[]
          }
          delete: {
            args: Prisma.AudioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPayload>
          }
          update: {
            args: Prisma.AudioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPayload>
          }
          deleteMany: {
            args: Prisma.AudioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AudioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AudioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPayload>[]
          }
          upsert: {
            args: Prisma.AudioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudioPayload>
          }
          aggregate: {
            args: Prisma.AudioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAudio>
          }
          groupBy: {
            args: Prisma.AudioGroupByArgs<ExtArgs>
            result: $Utils.Optional<AudioGroupByOutputType>[]
          }
          count: {
            args: Prisma.AudioCountArgs<ExtArgs>
            result: $Utils.Optional<AudioCountAggregateOutputType> | number
          }
        }
      }
      Word: {
        payload: Prisma.$WordPayload<ExtArgs>
        fields: Prisma.WordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordPayload>
          }
          findFirst: {
            args: Prisma.WordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordPayload>
          }
          findMany: {
            args: Prisma.WordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordPayload>[]
          }
          create: {
            args: Prisma.WordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordPayload>
          }
          createMany: {
            args: Prisma.WordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordPayload>[]
          }
          delete: {
            args: Prisma.WordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordPayload>
          }
          update: {
            args: Prisma.WordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordPayload>
          }
          deleteMany: {
            args: Prisma.WordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordPayload>[]
          }
          upsert: {
            args: Prisma.WordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordPayload>
          }
          aggregate: {
            args: Prisma.WordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWord>
          }
          groupBy: {
            args: Prisma.WordGroupByArgs<ExtArgs>
            result: $Utils.Optional<WordGroupByOutputType>[]
          }
          count: {
            args: Prisma.WordCountArgs<ExtArgs>
            result: $Utils.Optional<WordCountAggregateOutputType> | number
          }
        }
      }
      Issue: {
        payload: Prisma.$IssuePayload<ExtArgs>
        fields: Prisma.IssueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IssueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IssuePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IssueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IssuePayload>
          }
          findFirst: {
            args: Prisma.IssueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IssuePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IssueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IssuePayload>
          }
          findMany: {
            args: Prisma.IssueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IssuePayload>[]
          }
          create: {
            args: Prisma.IssueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IssuePayload>
          }
          createMany: {
            args: Prisma.IssueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IssueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IssuePayload>[]
          }
          delete: {
            args: Prisma.IssueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IssuePayload>
          }
          update: {
            args: Prisma.IssueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IssuePayload>
          }
          deleteMany: {
            args: Prisma.IssueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IssueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.IssueUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IssuePayload>[]
          }
          upsert: {
            args: Prisma.IssueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IssuePayload>
          }
          aggregate: {
            args: Prisma.IssueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIssue>
          }
          groupBy: {
            args: Prisma.IssueGroupByArgs<ExtArgs>
            result: $Utils.Optional<IssueGroupByOutputType>[]
          }
          count: {
            args: Prisma.IssueCountArgs<ExtArgs>
            result: $Utils.Optional<IssueCountAggregateOutputType> | number
          }
        }
      }
      Feature: {
        payload: Prisma.$FeaturePayload<ExtArgs>
        fields: Prisma.FeatureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeatureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeatureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload>
          }
          findFirst: {
            args: Prisma.FeatureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeatureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload>
          }
          findMany: {
            args: Prisma.FeatureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload>[]
          }
          create: {
            args: Prisma.FeatureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload>
          }
          createMany: {
            args: Prisma.FeatureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeatureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload>[]
          }
          delete: {
            args: Prisma.FeatureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload>
          }
          update: {
            args: Prisma.FeatureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload>
          }
          deleteMany: {
            args: Prisma.FeatureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeatureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeatureUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload>[]
          }
          upsert: {
            args: Prisma.FeatureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload>
          }
          aggregate: {
            args: Prisma.FeatureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeature>
          }
          groupBy: {
            args: Prisma.FeatureGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeatureGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeatureCountArgs<ExtArgs>
            result: $Utils.Optional<FeatureCountAggregateOutputType> | number
          }
        }
      }
      DictionaryEntry: {
        payload: Prisma.$DictionaryEntryPayload<ExtArgs>
        fields: Prisma.DictionaryEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DictionaryEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DictionaryEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DictionaryEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DictionaryEntryPayload>
          }
          findFirst: {
            args: Prisma.DictionaryEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DictionaryEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DictionaryEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DictionaryEntryPayload>
          }
          findMany: {
            args: Prisma.DictionaryEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DictionaryEntryPayload>[]
          }
          create: {
            args: Prisma.DictionaryEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DictionaryEntryPayload>
          }
          createMany: {
            args: Prisma.DictionaryEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DictionaryEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DictionaryEntryPayload>[]
          }
          delete: {
            args: Prisma.DictionaryEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DictionaryEntryPayload>
          }
          update: {
            args: Prisma.DictionaryEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DictionaryEntryPayload>
          }
          deleteMany: {
            args: Prisma.DictionaryEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DictionaryEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DictionaryEntryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DictionaryEntryPayload>[]
          }
          upsert: {
            args: Prisma.DictionaryEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DictionaryEntryPayload>
          }
          aggregate: {
            args: Prisma.DictionaryEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDictionaryEntry>
          }
          groupBy: {
            args: Prisma.DictionaryEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<DictionaryEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.DictionaryEntryCountArgs<ExtArgs>
            result: $Utils.Optional<DictionaryEntryCountAggregateOutputType> | number
          }
        }
      }
      WordUsage: {
        payload: Prisma.$WordUsagePayload<ExtArgs>
        fields: Prisma.WordUsageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WordUsageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordUsagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WordUsageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordUsagePayload>
          }
          findFirst: {
            args: Prisma.WordUsageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordUsagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WordUsageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordUsagePayload>
          }
          findMany: {
            args: Prisma.WordUsageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordUsagePayload>[]
          }
          create: {
            args: Prisma.WordUsageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordUsagePayload>
          }
          createMany: {
            args: Prisma.WordUsageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WordUsageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordUsagePayload>[]
          }
          delete: {
            args: Prisma.WordUsageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordUsagePayload>
          }
          update: {
            args: Prisma.WordUsageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordUsagePayload>
          }
          deleteMany: {
            args: Prisma.WordUsageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WordUsageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WordUsageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordUsagePayload>[]
          }
          upsert: {
            args: Prisma.WordUsageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordUsagePayload>
          }
          aggregate: {
            args: Prisma.WordUsageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWordUsage>
          }
          groupBy: {
            args: Prisma.WordUsageGroupByArgs<ExtArgs>
            result: $Utils.Optional<WordUsageGroupByOutputType>[]
          }
          count: {
            args: Prisma.WordUsageCountArgs<ExtArgs>
            result: $Utils.Optional<WordUsageCountAggregateOutputType> | number
          }
        }
      }
      Pronunciation: {
        payload: Prisma.$PronunciationPayload<ExtArgs>
        fields: Prisma.PronunciationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PronunciationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronunciationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PronunciationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronunciationPayload>
          }
          findFirst: {
            args: Prisma.PronunciationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronunciationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PronunciationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronunciationPayload>
          }
          findMany: {
            args: Prisma.PronunciationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronunciationPayload>[]
          }
          create: {
            args: Prisma.PronunciationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronunciationPayload>
          }
          createMany: {
            args: Prisma.PronunciationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PronunciationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronunciationPayload>[]
          }
          delete: {
            args: Prisma.PronunciationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronunciationPayload>
          }
          update: {
            args: Prisma.PronunciationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronunciationPayload>
          }
          deleteMany: {
            args: Prisma.PronunciationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PronunciationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PronunciationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronunciationPayload>[]
          }
          upsert: {
            args: Prisma.PronunciationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronunciationPayload>
          }
          aggregate: {
            args: Prisma.PronunciationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePronunciation>
          }
          groupBy: {
            args: Prisma.PronunciationGroupByArgs<ExtArgs>
            result: $Utils.Optional<PronunciationGroupByOutputType>[]
          }
          count: {
            args: Prisma.PronunciationCountArgs<ExtArgs>
            result: $Utils.Optional<PronunciationCountAggregateOutputType> | number
          }
        }
      }
      WordVariation: {
        payload: Prisma.$WordVariationPayload<ExtArgs>
        fields: Prisma.WordVariationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WordVariationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordVariationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WordVariationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordVariationPayload>
          }
          findFirst: {
            args: Prisma.WordVariationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordVariationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WordVariationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordVariationPayload>
          }
          findMany: {
            args: Prisma.WordVariationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordVariationPayload>[]
          }
          create: {
            args: Prisma.WordVariationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordVariationPayload>
          }
          createMany: {
            args: Prisma.WordVariationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WordVariationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordVariationPayload>[]
          }
          delete: {
            args: Prisma.WordVariationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordVariationPayload>
          }
          update: {
            args: Prisma.WordVariationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordVariationPayload>
          }
          deleteMany: {
            args: Prisma.WordVariationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WordVariationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WordVariationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordVariationPayload>[]
          }
          upsert: {
            args: Prisma.WordVariationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WordVariationPayload>
          }
          aggregate: {
            args: Prisma.WordVariationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWordVariation>
          }
          groupBy: {
            args: Prisma.WordVariationGroupByArgs<ExtArgs>
            result: $Utils.Optional<WordVariationGroupByOutputType>[]
          }
          count: {
            args: Prisma.WordVariationCountArgs<ExtArgs>
            result: $Utils.Optional<WordVariationCountAggregateOutputType> | number
          }
        }
      }
      SpellingPattern: {
        payload: Prisma.$SpellingPatternPayload<ExtArgs>
        fields: Prisma.SpellingPatternFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpellingPatternFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellingPatternPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpellingPatternFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellingPatternPayload>
          }
          findFirst: {
            args: Prisma.SpellingPatternFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellingPatternPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpellingPatternFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellingPatternPayload>
          }
          findMany: {
            args: Prisma.SpellingPatternFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellingPatternPayload>[]
          }
          create: {
            args: Prisma.SpellingPatternCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellingPatternPayload>
          }
          createMany: {
            args: Prisma.SpellingPatternCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SpellingPatternCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellingPatternPayload>[]
          }
          delete: {
            args: Prisma.SpellingPatternDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellingPatternPayload>
          }
          update: {
            args: Prisma.SpellingPatternUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellingPatternPayload>
          }
          deleteMany: {
            args: Prisma.SpellingPatternDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SpellingPatternUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SpellingPatternUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellingPatternPayload>[]
          }
          upsert: {
            args: Prisma.SpellingPatternUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpellingPatternPayload>
          }
          aggregate: {
            args: Prisma.SpellingPatternAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSpellingPattern>
          }
          groupBy: {
            args: Prisma.SpellingPatternGroupByArgs<ExtArgs>
            result: $Utils.Optional<SpellingPatternGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpellingPatternCountArgs<ExtArgs>
            result: $Utils.Optional<SpellingPatternCountAggregateOutputType> | number
          }
        }
      }
      LexicalSet: {
        payload: Prisma.$LexicalSetPayload<ExtArgs>
        fields: Prisma.LexicalSetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LexicalSetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LexicalSetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetPayload>
          }
          findFirst: {
            args: Prisma.LexicalSetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LexicalSetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetPayload>
          }
          findMany: {
            args: Prisma.LexicalSetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetPayload>[]
          }
          create: {
            args: Prisma.LexicalSetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetPayload>
          }
          createMany: {
            args: Prisma.LexicalSetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LexicalSetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetPayload>[]
          }
          delete: {
            args: Prisma.LexicalSetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetPayload>
          }
          update: {
            args: Prisma.LexicalSetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetPayload>
          }
          deleteMany: {
            args: Prisma.LexicalSetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LexicalSetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LexicalSetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetPayload>[]
          }
          upsert: {
            args: Prisma.LexicalSetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetPayload>
          }
          aggregate: {
            args: Prisma.LexicalSetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLexicalSet>
          }
          groupBy: {
            args: Prisma.LexicalSetGroupByArgs<ExtArgs>
            result: $Utils.Optional<LexicalSetGroupByOutputType>[]
          }
          count: {
            args: Prisma.LexicalSetCountArgs<ExtArgs>
            result: $Utils.Optional<LexicalSetCountAggregateOutputType> | number
          }
        }
      }
      LexicalSetUsage: {
        payload: Prisma.$LexicalSetUsagePayload<ExtArgs>
        fields: Prisma.LexicalSetUsageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LexicalSetUsageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetUsagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LexicalSetUsageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetUsagePayload>
          }
          findFirst: {
            args: Prisma.LexicalSetUsageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetUsagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LexicalSetUsageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetUsagePayload>
          }
          findMany: {
            args: Prisma.LexicalSetUsageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetUsagePayload>[]
          }
          create: {
            args: Prisma.LexicalSetUsageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetUsagePayload>
          }
          createMany: {
            args: Prisma.LexicalSetUsageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LexicalSetUsageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetUsagePayload>[]
          }
          delete: {
            args: Prisma.LexicalSetUsageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetUsagePayload>
          }
          update: {
            args: Prisma.LexicalSetUsageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetUsagePayload>
          }
          deleteMany: {
            args: Prisma.LexicalSetUsageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LexicalSetUsageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LexicalSetUsageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetUsagePayload>[]
          }
          upsert: {
            args: Prisma.LexicalSetUsageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LexicalSetUsagePayload>
          }
          aggregate: {
            args: Prisma.LexicalSetUsageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLexicalSetUsage>
          }
          groupBy: {
            args: Prisma.LexicalSetUsageGroupByArgs<ExtArgs>
            result: $Utils.Optional<LexicalSetUsageGroupByOutputType>[]
          }
          count: {
            args: Prisma.LexicalSetUsageCountArgs<ExtArgs>
            result: $Utils.Optional<LexicalSetUsageCountAggregateOutputType> | number
          }
        }
      }
      Example: {
        payload: Prisma.$ExamplePayload<ExtArgs>
        fields: Prisma.ExampleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExampleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExampleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload>
          }
          findFirst: {
            args: Prisma.ExampleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExampleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload>
          }
          findMany: {
            args: Prisma.ExampleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload>[]
          }
          create: {
            args: Prisma.ExampleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload>
          }
          createMany: {
            args: Prisma.ExampleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExampleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload>[]
          }
          delete: {
            args: Prisma.ExampleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload>
          }
          update: {
            args: Prisma.ExampleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload>
          }
          deleteMany: {
            args: Prisma.ExampleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExampleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExampleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload>[]
          }
          upsert: {
            args: Prisma.ExampleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload>
          }
          aggregate: {
            args: Prisma.ExampleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExample>
          }
          groupBy: {
            args: Prisma.ExampleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExampleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExampleCountArgs<ExtArgs>
            result: $Utils.Optional<ExampleCountAggregateOutputType> | number
          }
        }
      }
      ConsonantPhoneme: {
        payload: Prisma.$ConsonantPhonemePayload<ExtArgs>
        fields: Prisma.ConsonantPhonemeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsonantPhonemeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsonantPhonemeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemePayload>
          }
          findFirst: {
            args: Prisma.ConsonantPhonemeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsonantPhonemeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemePayload>
          }
          findMany: {
            args: Prisma.ConsonantPhonemeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemePayload>[]
          }
          create: {
            args: Prisma.ConsonantPhonemeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemePayload>
          }
          createMany: {
            args: Prisma.ConsonantPhonemeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsonantPhonemeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemePayload>[]
          }
          delete: {
            args: Prisma.ConsonantPhonemeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemePayload>
          }
          update: {
            args: Prisma.ConsonantPhonemeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemePayload>
          }
          deleteMany: {
            args: Prisma.ConsonantPhonemeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsonantPhonemeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConsonantPhonemeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemePayload>[]
          }
          upsert: {
            args: Prisma.ConsonantPhonemeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemePayload>
          }
          aggregate: {
            args: Prisma.ConsonantPhonemeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsonantPhoneme>
          }
          groupBy: {
            args: Prisma.ConsonantPhonemeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsonantPhonemeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsonantPhonemeCountArgs<ExtArgs>
            result: $Utils.Optional<ConsonantPhonemeCountAggregateOutputType> | number
          }
        }
      }
      ConsonantPhonemeUsage: {
        payload: Prisma.$ConsonantPhonemeUsagePayload<ExtArgs>
        fields: Prisma.ConsonantPhonemeUsageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsonantPhonemeUsageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemeUsagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsonantPhonemeUsageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemeUsagePayload>
          }
          findFirst: {
            args: Prisma.ConsonantPhonemeUsageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemeUsagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsonantPhonemeUsageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemeUsagePayload>
          }
          findMany: {
            args: Prisma.ConsonantPhonemeUsageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemeUsagePayload>[]
          }
          create: {
            args: Prisma.ConsonantPhonemeUsageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemeUsagePayload>
          }
          createMany: {
            args: Prisma.ConsonantPhonemeUsageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsonantPhonemeUsageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemeUsagePayload>[]
          }
          delete: {
            args: Prisma.ConsonantPhonemeUsageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemeUsagePayload>
          }
          update: {
            args: Prisma.ConsonantPhonemeUsageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemeUsagePayload>
          }
          deleteMany: {
            args: Prisma.ConsonantPhonemeUsageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsonantPhonemeUsageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConsonantPhonemeUsageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemeUsagePayload>[]
          }
          upsert: {
            args: Prisma.ConsonantPhonemeUsageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsonantPhonemeUsagePayload>
          }
          aggregate: {
            args: Prisma.ConsonantPhonemeUsageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsonantPhonemeUsage>
          }
          groupBy: {
            args: Prisma.ConsonantPhonemeUsageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsonantPhonemeUsageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsonantPhonemeUsageCountArgs<ExtArgs>
            result: $Utils.Optional<ConsonantPhonemeUsageCountAggregateOutputType> | number
          }
        }
      }
      OrthoWord: {
        payload: Prisma.$OrthoWordPayload<ExtArgs>
        fields: Prisma.OrthoWordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrthoWordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrthoWordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrthoWordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrthoWordPayload>
          }
          findFirst: {
            args: Prisma.OrthoWordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrthoWordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrthoWordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrthoWordPayload>
          }
          findMany: {
            args: Prisma.OrthoWordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrthoWordPayload>[]
          }
          create: {
            args: Prisma.OrthoWordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrthoWordPayload>
          }
          createMany: {
            args: Prisma.OrthoWordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrthoWordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrthoWordPayload>[]
          }
          delete: {
            args: Prisma.OrthoWordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrthoWordPayload>
          }
          update: {
            args: Prisma.OrthoWordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrthoWordPayload>
          }
          deleteMany: {
            args: Prisma.OrthoWordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrthoWordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrthoWordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrthoWordPayload>[]
          }
          upsert: {
            args: Prisma.OrthoWordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrthoWordPayload>
          }
          aggregate: {
            args: Prisma.OrthoWordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrthoWord>
          }
          groupBy: {
            args: Prisma.OrthoWordGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrthoWordGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrthoWordCountArgs<ExtArgs>
            result: $Utils.Optional<OrthoWordCountAggregateOutputType> | number
          }
        }
      }
      PronCmuDict: {
        payload: Prisma.$PronCmuDictPayload<ExtArgs>
        fields: Prisma.PronCmuDictFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PronCmuDictFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronCmuDictPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PronCmuDictFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronCmuDictPayload>
          }
          findFirst: {
            args: Prisma.PronCmuDictFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronCmuDictPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PronCmuDictFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronCmuDictPayload>
          }
          findMany: {
            args: Prisma.PronCmuDictFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronCmuDictPayload>[]
          }
          create: {
            args: Prisma.PronCmuDictCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronCmuDictPayload>
          }
          createMany: {
            args: Prisma.PronCmuDictCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PronCmuDictCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronCmuDictPayload>[]
          }
          delete: {
            args: Prisma.PronCmuDictDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronCmuDictPayload>
          }
          update: {
            args: Prisma.PronCmuDictUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronCmuDictPayload>
          }
          deleteMany: {
            args: Prisma.PronCmuDictDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PronCmuDictUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PronCmuDictUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronCmuDictPayload>[]
          }
          upsert: {
            args: Prisma.PronCmuDictUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PronCmuDictPayload>
          }
          aggregate: {
            args: Prisma.PronCmuDictAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePronCmuDict>
          }
          groupBy: {
            args: Prisma.PronCmuDictGroupByArgs<ExtArgs>
            result: $Utils.Optional<PronCmuDictGroupByOutputType>[]
          }
          count: {
            args: Prisma.PronCmuDictCountArgs<ExtArgs>
            result: $Utils.Optional<PronCmuDictCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    audio?: AudioOmit
    word?: WordOmit
    issue?: IssueOmit
    feature?: FeatureOmit
    dictionaryEntry?: DictionaryEntryOmit
    wordUsage?: WordUsageOmit
    pronunciation?: PronunciationOmit
    wordVariation?: WordVariationOmit
    spellingPattern?: SpellingPatternOmit
    lexicalSet?: LexicalSetOmit
    lexicalSetUsage?: LexicalSetUsageOmit
    example?: ExampleOmit
    consonantPhoneme?: ConsonantPhonemeOmit
    consonantPhonemeUsage?: ConsonantPhonemeUsageOmit
    orthoWord?: OrthoWordOmit
    pronCmuDict?: PronCmuDictOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    audios: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    audios?: boolean | UserCountOutputTypeCountAudiosArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAudiosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AudioWhereInput
  }


  /**
   * Count Type AudioCountOutputType
   */

  export type AudioCountOutputType = {
    words: number
    users: number
  }

  export type AudioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    words?: boolean | AudioCountOutputTypeCountWordsArgs
    users?: boolean | AudioCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * AudioCountOutputType without action
   */
  export type AudioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioCountOutputType
     */
    select?: AudioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AudioCountOutputType without action
   */
  export type AudioCountOutputTypeCountWordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WordWhereInput
  }

  /**
   * AudioCountOutputType without action
   */
  export type AudioCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type WordCountOutputType
   */

  export type WordCountOutputType = {
    issues: number
    consonants: number
    pronunciation: number
  }

  export type WordCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    issues?: boolean | WordCountOutputTypeCountIssuesArgs
    consonants?: boolean | WordCountOutputTypeCountConsonantsArgs
    pronunciation?: boolean | WordCountOutputTypeCountPronunciationArgs
  }

  // Custom InputTypes
  /**
   * WordCountOutputType without action
   */
  export type WordCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordCountOutputType
     */
    select?: WordCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WordCountOutputType without action
   */
  export type WordCountOutputTypeCountIssuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IssueWhereInput
  }

  /**
   * WordCountOutputType without action
   */
  export type WordCountOutputTypeCountConsonantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsonantPhonemeWhereInput
  }

  /**
   * WordCountOutputType without action
   */
  export type WordCountOutputTypeCountPronunciationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LexicalSetWhereInput
  }


  /**
   * Count Type IssueCountOutputType
   */

  export type IssueCountOutputType = {
    words: number
  }

  export type IssueCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    words?: boolean | IssueCountOutputTypeCountWordsArgs
  }

  // Custom InputTypes
  /**
   * IssueCountOutputType without action
   */
  export type IssueCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IssueCountOutputType
     */
    select?: IssueCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IssueCountOutputType without action
   */
  export type IssueCountOutputTypeCountWordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WordWhereInput
  }


  /**
   * Count Type FeatureCountOutputType
   */

  export type FeatureCountOutputType = {
    issues: number
  }

  export type FeatureCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    issues?: boolean | FeatureCountOutputTypeCountIssuesArgs
  }

  // Custom InputTypes
  /**
   * FeatureCountOutputType without action
   */
  export type FeatureCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureCountOutputType
     */
    select?: FeatureCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FeatureCountOutputType without action
   */
  export type FeatureCountOutputTypeCountIssuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IssueWhereInput
  }


  /**
   * Count Type DictionaryEntryCountOutputType
   */

  export type DictionaryEntryCountOutputType = {
    usages: number
    variations: number
  }

  export type DictionaryEntryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usages?: boolean | DictionaryEntryCountOutputTypeCountUsagesArgs
    variations?: boolean | DictionaryEntryCountOutputTypeCountVariationsArgs
  }

  // Custom InputTypes
  /**
   * DictionaryEntryCountOutputType without action
   */
  export type DictionaryEntryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DictionaryEntryCountOutputType
     */
    select?: DictionaryEntryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DictionaryEntryCountOutputType without action
   */
  export type DictionaryEntryCountOutputTypeCountUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WordUsageWhereInput
  }

  /**
   * DictionaryEntryCountOutputType without action
   */
  export type DictionaryEntryCountOutputTypeCountVariationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WordVariationWhereInput
  }


  /**
   * Count Type WordUsageCountOutputType
   */

  export type WordUsageCountOutputType = {
    consonantPhonemes: number
    examples: number
    lexicalSets: number
    pronunciations: number
    spellingPatterns: number
  }

  export type WordUsageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consonantPhonemes?: boolean | WordUsageCountOutputTypeCountConsonantPhonemesArgs
    examples?: boolean | WordUsageCountOutputTypeCountExamplesArgs
    lexicalSets?: boolean | WordUsageCountOutputTypeCountLexicalSetsArgs
    pronunciations?: boolean | WordUsageCountOutputTypeCountPronunciationsArgs
    spellingPatterns?: boolean | WordUsageCountOutputTypeCountSpellingPatternsArgs
  }

  // Custom InputTypes
  /**
   * WordUsageCountOutputType without action
   */
  export type WordUsageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordUsageCountOutputType
     */
    select?: WordUsageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WordUsageCountOutputType without action
   */
  export type WordUsageCountOutputTypeCountConsonantPhonemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsonantPhonemeUsageWhereInput
  }

  /**
   * WordUsageCountOutputType without action
   */
  export type WordUsageCountOutputTypeCountExamplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExampleWhereInput
  }

  /**
   * WordUsageCountOutputType without action
   */
  export type WordUsageCountOutputTypeCountLexicalSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LexicalSetUsageWhereInput
  }

  /**
   * WordUsageCountOutputType without action
   */
  export type WordUsageCountOutputTypeCountPronunciationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PronunciationWhereInput
  }

  /**
   * WordUsageCountOutputType without action
   */
  export type WordUsageCountOutputTypeCountSpellingPatternsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpellingPatternWhereInput
  }


  /**
   * Count Type LexicalSetCountOutputType
   */

  export type LexicalSetCountOutputType = {
    usages: number
    words: number
  }

  export type LexicalSetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usages?: boolean | LexicalSetCountOutputTypeCountUsagesArgs
    words?: boolean | LexicalSetCountOutputTypeCountWordsArgs
  }

  // Custom InputTypes
  /**
   * LexicalSetCountOutputType without action
   */
  export type LexicalSetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSetCountOutputType
     */
    select?: LexicalSetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LexicalSetCountOutputType without action
   */
  export type LexicalSetCountOutputTypeCountUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LexicalSetUsageWhereInput
  }

  /**
   * LexicalSetCountOutputType without action
   */
  export type LexicalSetCountOutputTypeCountWordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WordWhereInput
  }


  /**
   * Count Type ConsonantPhonemeCountOutputType
   */

  export type ConsonantPhonemeCountOutputType = {
    usages: number
    words: number
  }

  export type ConsonantPhonemeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usages?: boolean | ConsonantPhonemeCountOutputTypeCountUsagesArgs
    words?: boolean | ConsonantPhonemeCountOutputTypeCountWordsArgs
  }

  // Custom InputTypes
  /**
   * ConsonantPhonemeCountOutputType without action
   */
  export type ConsonantPhonemeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhonemeCountOutputType
     */
    select?: ConsonantPhonemeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConsonantPhonemeCountOutputType without action
   */
  export type ConsonantPhonemeCountOutputTypeCountUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsonantPhonemeUsageWhereInput
  }

  /**
   * ConsonantPhonemeCountOutputType without action
   */
  export type ConsonantPhonemeCountOutputTypeCountWordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WordWhereInput
  }


  /**
   * Count Type OrthoWordCountOutputType
   */

  export type OrthoWordCountOutputType = {
    pronsCmuDict: number
  }

  export type OrthoWordCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pronsCmuDict?: boolean | OrthoWordCountOutputTypeCountPronsCmuDictArgs
  }

  // Custom InputTypes
  /**
   * OrthoWordCountOutputType without action
   */
  export type OrthoWordCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrthoWordCountOutputType
     */
    select?: OrthoWordCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrthoWordCountOutputType without action
   */
  export type OrthoWordCountOutputTypeCountPronsCmuDictArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PronCmuDictWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    createdAt: Date | null
    auth0Id: string | null
    name: string | null
    role: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    createdAt: Date | null
    auth0Id: string | null
    name: string | null
    role: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    createdAt: number
    auth0Id: number
    name: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    createdAt?: true
    auth0Id?: true
    name?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    createdAt?: true
    auth0Id?: true
    name?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    createdAt?: true
    auth0Id?: true
    name?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    createdAt: Date
    auth0Id: string | null
    name: string | null
    role: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    createdAt?: boolean
    auth0Id?: boolean
    name?: boolean
    role?: boolean
    audios?: boolean | User$audiosArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    createdAt?: boolean
    auth0Id?: boolean
    name?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    createdAt?: boolean
    auth0Id?: boolean
    name?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    createdAt?: boolean
    auth0Id?: boolean
    name?: boolean
    role?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "createdAt" | "auth0Id" | "name" | "role", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    audios?: boolean | User$audiosArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      audios: Prisma.$AudioPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      createdAt: Date
      auth0Id: string | null
      name: string | null
      role: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    audios<T extends User$audiosArgs<ExtArgs> = {}>(args?: Subset<T, User$audiosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AudioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly auth0Id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.audios
   */
  export type User$audiosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audio
     */
    select?: AudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audio
     */
    omit?: AudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioInclude<ExtArgs> | null
    where?: AudioWhereInput
    orderBy?: AudioOrderByWithRelationInput | AudioOrderByWithRelationInput[]
    cursor?: AudioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AudioScalarFieldEnum | AudioScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Audio
   */

  export type AggregateAudio = {
    _count: AudioCountAggregateOutputType | null
    _avg: AudioAvgAggregateOutputType | null
    _sum: AudioSumAggregateOutputType | null
    _min: AudioMinAggregateOutputType | null
    _max: AudioMaxAggregateOutputType | null
  }

  export type AudioAvgAggregateOutputType = {
    id: number | null
    duration: number | null
  }

  export type AudioSumAggregateOutputType = {
    id: number | null
    duration: number | null
  }

  export type AudioMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    duration: number | null
    updatedAt: Date | null
    url: string | null
  }

  export type AudioMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    duration: number | null
    updatedAt: Date | null
    url: string | null
  }

  export type AudioCountAggregateOutputType = {
    id: number
    createdAt: number
    duration: number
    updatedAt: number
    url: number
    _all: number
  }


  export type AudioAvgAggregateInputType = {
    id?: true
    duration?: true
  }

  export type AudioSumAggregateInputType = {
    id?: true
    duration?: true
  }

  export type AudioMinAggregateInputType = {
    id?: true
    createdAt?: true
    duration?: true
    updatedAt?: true
    url?: true
  }

  export type AudioMaxAggregateInputType = {
    id?: true
    createdAt?: true
    duration?: true
    updatedAt?: true
    url?: true
  }

  export type AudioCountAggregateInputType = {
    id?: true
    createdAt?: true
    duration?: true
    updatedAt?: true
    url?: true
    _all?: true
  }

  export type AudioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Audio to aggregate.
     */
    where?: AudioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audio to fetch.
     */
    orderBy?: AudioOrderByWithRelationInput | AudioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AudioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audio from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audio.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Audio
    **/
    _count?: true | AudioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AudioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AudioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AudioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AudioMaxAggregateInputType
  }

  export type GetAudioAggregateType<T extends AudioAggregateArgs> = {
        [P in keyof T & keyof AggregateAudio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAudio[P]>
      : GetScalarType<T[P], AggregateAudio[P]>
  }




  export type AudioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AudioWhereInput
    orderBy?: AudioOrderByWithAggregationInput | AudioOrderByWithAggregationInput[]
    by: AudioScalarFieldEnum[] | AudioScalarFieldEnum
    having?: AudioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AudioCountAggregateInputType | true
    _avg?: AudioAvgAggregateInputType
    _sum?: AudioSumAggregateInputType
    _min?: AudioMinAggregateInputType
    _max?: AudioMaxAggregateInputType
  }

  export type AudioGroupByOutputType = {
    id: number
    createdAt: Date
    duration: number
    updatedAt: Date
    url: string
    _count: AudioCountAggregateOutputType | null
    _avg: AudioAvgAggregateOutputType | null
    _sum: AudioSumAggregateOutputType | null
    _min: AudioMinAggregateOutputType | null
    _max: AudioMaxAggregateOutputType | null
  }

  type GetAudioGroupByPayload<T extends AudioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AudioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AudioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AudioGroupByOutputType[P]>
            : GetScalarType<T[P], AudioGroupByOutputType[P]>
        }
      >
    >


  export type AudioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    duration?: boolean
    updatedAt?: boolean
    url?: boolean
    words?: boolean | Audio$wordsArgs<ExtArgs>
    users?: boolean | Audio$usersArgs<ExtArgs>
    _count?: boolean | AudioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["audio"]>

  export type AudioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    duration?: boolean
    updatedAt?: boolean
    url?: boolean
  }, ExtArgs["result"]["audio"]>

  export type AudioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    duration?: boolean
    updatedAt?: boolean
    url?: boolean
  }, ExtArgs["result"]["audio"]>

  export type AudioSelectScalar = {
    id?: boolean
    createdAt?: boolean
    duration?: boolean
    updatedAt?: boolean
    url?: boolean
  }

  export type AudioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "duration" | "updatedAt" | "url", ExtArgs["result"]["audio"]>
  export type AudioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    words?: boolean | Audio$wordsArgs<ExtArgs>
    users?: boolean | Audio$usersArgs<ExtArgs>
    _count?: boolean | AudioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AudioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AudioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AudioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Audio"
    objects: {
      words: Prisma.$WordPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      duration: number
      updatedAt: Date
      url: string
    }, ExtArgs["result"]["audio"]>
    composites: {}
  }

  type AudioGetPayload<S extends boolean | null | undefined | AudioDefaultArgs> = $Result.GetResult<Prisma.$AudioPayload, S>

  type AudioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AudioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AudioCountAggregateInputType | true
    }

  export interface AudioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Audio'], meta: { name: 'Audio' } }
    /**
     * Find zero or one Audio that matches the filter.
     * @param {AudioFindUniqueArgs} args - Arguments to find a Audio
     * @example
     * // Get one Audio
     * const audio = await prisma.audio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AudioFindUniqueArgs>(args: SelectSubset<T, AudioFindUniqueArgs<ExtArgs>>): Prisma__AudioClient<$Result.GetResult<Prisma.$AudioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Audio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AudioFindUniqueOrThrowArgs} args - Arguments to find a Audio
     * @example
     * // Get one Audio
     * const audio = await prisma.audio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AudioFindUniqueOrThrowArgs>(args: SelectSubset<T, AudioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AudioClient<$Result.GetResult<Prisma.$AudioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Audio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioFindFirstArgs} args - Arguments to find a Audio
     * @example
     * // Get one Audio
     * const audio = await prisma.audio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AudioFindFirstArgs>(args?: SelectSubset<T, AudioFindFirstArgs<ExtArgs>>): Prisma__AudioClient<$Result.GetResult<Prisma.$AudioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Audio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioFindFirstOrThrowArgs} args - Arguments to find a Audio
     * @example
     * // Get one Audio
     * const audio = await prisma.audio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AudioFindFirstOrThrowArgs>(args?: SelectSubset<T, AudioFindFirstOrThrowArgs<ExtArgs>>): Prisma__AudioClient<$Result.GetResult<Prisma.$AudioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Audio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Audio
     * const audio = await prisma.audio.findMany()
     * 
     * // Get first 10 Audio
     * const audio = await prisma.audio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const audioWithIdOnly = await prisma.audio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AudioFindManyArgs>(args?: SelectSubset<T, AudioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AudioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Audio.
     * @param {AudioCreateArgs} args - Arguments to create a Audio.
     * @example
     * // Create one Audio
     * const Audio = await prisma.audio.create({
     *   data: {
     *     // ... data to create a Audio
     *   }
     * })
     * 
     */
    create<T extends AudioCreateArgs>(args: SelectSubset<T, AudioCreateArgs<ExtArgs>>): Prisma__AudioClient<$Result.GetResult<Prisma.$AudioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Audio.
     * @param {AudioCreateManyArgs} args - Arguments to create many Audio.
     * @example
     * // Create many Audio
     * const audio = await prisma.audio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AudioCreateManyArgs>(args?: SelectSubset<T, AudioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Audio and returns the data saved in the database.
     * @param {AudioCreateManyAndReturnArgs} args - Arguments to create many Audio.
     * @example
     * // Create many Audio
     * const audio = await prisma.audio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Audio and only return the `id`
     * const audioWithIdOnly = await prisma.audio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AudioCreateManyAndReturnArgs>(args?: SelectSubset<T, AudioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AudioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Audio.
     * @param {AudioDeleteArgs} args - Arguments to delete one Audio.
     * @example
     * // Delete one Audio
     * const Audio = await prisma.audio.delete({
     *   where: {
     *     // ... filter to delete one Audio
     *   }
     * })
     * 
     */
    delete<T extends AudioDeleteArgs>(args: SelectSubset<T, AudioDeleteArgs<ExtArgs>>): Prisma__AudioClient<$Result.GetResult<Prisma.$AudioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Audio.
     * @param {AudioUpdateArgs} args - Arguments to update one Audio.
     * @example
     * // Update one Audio
     * const audio = await prisma.audio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AudioUpdateArgs>(args: SelectSubset<T, AudioUpdateArgs<ExtArgs>>): Prisma__AudioClient<$Result.GetResult<Prisma.$AudioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Audio.
     * @param {AudioDeleteManyArgs} args - Arguments to filter Audio to delete.
     * @example
     * // Delete a few Audio
     * const { count } = await prisma.audio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AudioDeleteManyArgs>(args?: SelectSubset<T, AudioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Audio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Audio
     * const audio = await prisma.audio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AudioUpdateManyArgs>(args: SelectSubset<T, AudioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Audio and returns the data updated in the database.
     * @param {AudioUpdateManyAndReturnArgs} args - Arguments to update many Audio.
     * @example
     * // Update many Audio
     * const audio = await prisma.audio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Audio and only return the `id`
     * const audioWithIdOnly = await prisma.audio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AudioUpdateManyAndReturnArgs>(args: SelectSubset<T, AudioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AudioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Audio.
     * @param {AudioUpsertArgs} args - Arguments to update or create a Audio.
     * @example
     * // Update or create a Audio
     * const audio = await prisma.audio.upsert({
     *   create: {
     *     // ... data to create a Audio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Audio we want to update
     *   }
     * })
     */
    upsert<T extends AudioUpsertArgs>(args: SelectSubset<T, AudioUpsertArgs<ExtArgs>>): Prisma__AudioClient<$Result.GetResult<Prisma.$AudioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Audio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioCountArgs} args - Arguments to filter Audio to count.
     * @example
     * // Count the number of Audio
     * const count = await prisma.audio.count({
     *   where: {
     *     // ... the filter for the Audio we want to count
     *   }
     * })
    **/
    count<T extends AudioCountArgs>(
      args?: Subset<T, AudioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AudioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Audio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AudioAggregateArgs>(args: Subset<T, AudioAggregateArgs>): Prisma.PrismaPromise<GetAudioAggregateType<T>>

    /**
     * Group by Audio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AudioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AudioGroupByArgs['orderBy'] }
        : { orderBy?: AudioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AudioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAudioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Audio model
   */
  readonly fields: AudioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Audio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AudioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    words<T extends Audio$wordsArgs<ExtArgs> = {}>(args?: Subset<T, Audio$wordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Audio$usersArgs<ExtArgs> = {}>(args?: Subset<T, Audio$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Audio model
   */
  interface AudioFieldRefs {
    readonly id: FieldRef<"Audio", 'Int'>
    readonly createdAt: FieldRef<"Audio", 'DateTime'>
    readonly duration: FieldRef<"Audio", 'Float'>
    readonly updatedAt: FieldRef<"Audio", 'DateTime'>
    readonly url: FieldRef<"Audio", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Audio findUnique
   */
  export type AudioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audio
     */
    select?: AudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audio
     */
    omit?: AudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioInclude<ExtArgs> | null
    /**
     * Filter, which Audio to fetch.
     */
    where: AudioWhereUniqueInput
  }

  /**
   * Audio findUniqueOrThrow
   */
  export type AudioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audio
     */
    select?: AudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audio
     */
    omit?: AudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioInclude<ExtArgs> | null
    /**
     * Filter, which Audio to fetch.
     */
    where: AudioWhereUniqueInput
  }

  /**
   * Audio findFirst
   */
  export type AudioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audio
     */
    select?: AudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audio
     */
    omit?: AudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioInclude<ExtArgs> | null
    /**
     * Filter, which Audio to fetch.
     */
    where?: AudioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audio to fetch.
     */
    orderBy?: AudioOrderByWithRelationInput | AudioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Audio.
     */
    cursor?: AudioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audio from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audio.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Audio.
     */
    distinct?: AudioScalarFieldEnum | AudioScalarFieldEnum[]
  }

  /**
   * Audio findFirstOrThrow
   */
  export type AudioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audio
     */
    select?: AudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audio
     */
    omit?: AudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioInclude<ExtArgs> | null
    /**
     * Filter, which Audio to fetch.
     */
    where?: AudioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audio to fetch.
     */
    orderBy?: AudioOrderByWithRelationInput | AudioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Audio.
     */
    cursor?: AudioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audio from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audio.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Audio.
     */
    distinct?: AudioScalarFieldEnum | AudioScalarFieldEnum[]
  }

  /**
   * Audio findMany
   */
  export type AudioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audio
     */
    select?: AudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audio
     */
    omit?: AudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioInclude<ExtArgs> | null
    /**
     * Filter, which Audio to fetch.
     */
    where?: AudioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audio to fetch.
     */
    orderBy?: AudioOrderByWithRelationInput | AudioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Audio.
     */
    cursor?: AudioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audio from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audio.
     */
    skip?: number
    distinct?: AudioScalarFieldEnum | AudioScalarFieldEnum[]
  }

  /**
   * Audio create
   */
  export type AudioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audio
     */
    select?: AudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audio
     */
    omit?: AudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioInclude<ExtArgs> | null
    /**
     * The data needed to create a Audio.
     */
    data: XOR<AudioCreateInput, AudioUncheckedCreateInput>
  }

  /**
   * Audio createMany
   */
  export type AudioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Audio.
     */
    data: AudioCreateManyInput | AudioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Audio createManyAndReturn
   */
  export type AudioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audio
     */
    select?: AudioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Audio
     */
    omit?: AudioOmit<ExtArgs> | null
    /**
     * The data used to create many Audio.
     */
    data: AudioCreateManyInput | AudioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Audio update
   */
  export type AudioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audio
     */
    select?: AudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audio
     */
    omit?: AudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioInclude<ExtArgs> | null
    /**
     * The data needed to update a Audio.
     */
    data: XOR<AudioUpdateInput, AudioUncheckedUpdateInput>
    /**
     * Choose, which Audio to update.
     */
    where: AudioWhereUniqueInput
  }

  /**
   * Audio updateMany
   */
  export type AudioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Audio.
     */
    data: XOR<AudioUpdateManyMutationInput, AudioUncheckedUpdateManyInput>
    /**
     * Filter which Audio to update
     */
    where?: AudioWhereInput
    /**
     * Limit how many Audio to update.
     */
    limit?: number
  }

  /**
   * Audio updateManyAndReturn
   */
  export type AudioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audio
     */
    select?: AudioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Audio
     */
    omit?: AudioOmit<ExtArgs> | null
    /**
     * The data used to update Audio.
     */
    data: XOR<AudioUpdateManyMutationInput, AudioUncheckedUpdateManyInput>
    /**
     * Filter which Audio to update
     */
    where?: AudioWhereInput
    /**
     * Limit how many Audio to update.
     */
    limit?: number
  }

  /**
   * Audio upsert
   */
  export type AudioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audio
     */
    select?: AudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audio
     */
    omit?: AudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioInclude<ExtArgs> | null
    /**
     * The filter to search for the Audio to update in case it exists.
     */
    where: AudioWhereUniqueInput
    /**
     * In case the Audio found by the `where` argument doesn't exist, create a new Audio with this data.
     */
    create: XOR<AudioCreateInput, AudioUncheckedCreateInput>
    /**
     * In case the Audio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AudioUpdateInput, AudioUncheckedUpdateInput>
  }

  /**
   * Audio delete
   */
  export type AudioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audio
     */
    select?: AudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audio
     */
    omit?: AudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioInclude<ExtArgs> | null
    /**
     * Filter which Audio to delete.
     */
    where: AudioWhereUniqueInput
  }

  /**
   * Audio deleteMany
   */
  export type AudioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Audio to delete
     */
    where?: AudioWhereInput
    /**
     * Limit how many Audio to delete.
     */
    limit?: number
  }

  /**
   * Audio.words
   */
  export type Audio$wordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Word
     */
    select?: WordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Word
     */
    omit?: WordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordInclude<ExtArgs> | null
    where?: WordWhereInput
    orderBy?: WordOrderByWithRelationInput | WordOrderByWithRelationInput[]
    cursor?: WordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WordScalarFieldEnum | WordScalarFieldEnum[]
  }

  /**
   * Audio.users
   */
  export type Audio$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Audio without action
   */
  export type AudioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audio
     */
    select?: AudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audio
     */
    omit?: AudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioInclude<ExtArgs> | null
  }


  /**
   * Model Word
   */

  export type AggregateWord = {
    _count: WordCountAggregateOutputType | null
    _avg: WordAvgAggregateOutputType | null
    _sum: WordSumAggregateOutputType | null
    _min: WordMinAggregateOutputType | null
    _max: WordMaxAggregateOutputType | null
  }

  export type WordAvgAggregateOutputType = {
    id: number | null
    audioId: number | null
  }

  export type WordSumAggregateOutputType = {
    id: number | null
    audioId: number | null
  }

  export type WordMinAggregateOutputType = {
    id: number | null
    audioId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    word: string | null
  }

  export type WordMaxAggregateOutputType = {
    id: number | null
    audioId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    word: string | null
  }

  export type WordCountAggregateOutputType = {
    id: number
    audioId: number
    createdAt: number
    updatedAt: number
    word: number
    _all: number
  }


  export type WordAvgAggregateInputType = {
    id?: true
    audioId?: true
  }

  export type WordSumAggregateInputType = {
    id?: true
    audioId?: true
  }

  export type WordMinAggregateInputType = {
    id?: true
    audioId?: true
    createdAt?: true
    updatedAt?: true
    word?: true
  }

  export type WordMaxAggregateInputType = {
    id?: true
    audioId?: true
    createdAt?: true
    updatedAt?: true
    word?: true
  }

  export type WordCountAggregateInputType = {
    id?: true
    audioId?: true
    createdAt?: true
    updatedAt?: true
    word?: true
    _all?: true
  }

  export type WordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Word to aggregate.
     */
    where?: WordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Words to fetch.
     */
    orderBy?: WordOrderByWithRelationInput | WordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Words from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Words.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Words
    **/
    _count?: true | WordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WordMaxAggregateInputType
  }

  export type GetWordAggregateType<T extends WordAggregateArgs> = {
        [P in keyof T & keyof AggregateWord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWord[P]>
      : GetScalarType<T[P], AggregateWord[P]>
  }




  export type WordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WordWhereInput
    orderBy?: WordOrderByWithAggregationInput | WordOrderByWithAggregationInput[]
    by: WordScalarFieldEnum[] | WordScalarFieldEnum
    having?: WordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WordCountAggregateInputType | true
    _avg?: WordAvgAggregateInputType
    _sum?: WordSumAggregateInputType
    _min?: WordMinAggregateInputType
    _max?: WordMaxAggregateInputType
  }

  export type WordGroupByOutputType = {
    id: number
    audioId: number | null
    createdAt: Date
    updatedAt: Date
    word: string
    _count: WordCountAggregateOutputType | null
    _avg: WordAvgAggregateOutputType | null
    _sum: WordSumAggregateOutputType | null
    _min: WordMinAggregateOutputType | null
    _max: WordMaxAggregateOutputType | null
  }

  type GetWordGroupByPayload<T extends WordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WordGroupByOutputType[P]>
            : GetScalarType<T[P], WordGroupByOutputType[P]>
        }
      >
    >


  export type WordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    audioId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    word?: boolean
    audio?: boolean | Word$audioArgs<ExtArgs>
    issues?: boolean | Word$issuesArgs<ExtArgs>
    consonants?: boolean | Word$consonantsArgs<ExtArgs>
    pronunciation?: boolean | Word$pronunciationArgs<ExtArgs>
    _count?: boolean | WordCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["word"]>

  export type WordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    audioId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    word?: boolean
    audio?: boolean | Word$audioArgs<ExtArgs>
  }, ExtArgs["result"]["word"]>

  export type WordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    audioId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    word?: boolean
    audio?: boolean | Word$audioArgs<ExtArgs>
  }, ExtArgs["result"]["word"]>

  export type WordSelectScalar = {
    id?: boolean
    audioId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    word?: boolean
  }

  export type WordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "audioId" | "createdAt" | "updatedAt" | "word", ExtArgs["result"]["word"]>
  export type WordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    audio?: boolean | Word$audioArgs<ExtArgs>
    issues?: boolean | Word$issuesArgs<ExtArgs>
    consonants?: boolean | Word$consonantsArgs<ExtArgs>
    pronunciation?: boolean | Word$pronunciationArgs<ExtArgs>
    _count?: boolean | WordCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    audio?: boolean | Word$audioArgs<ExtArgs>
  }
  export type WordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    audio?: boolean | Word$audioArgs<ExtArgs>
  }

  export type $WordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Word"
    objects: {
      audio: Prisma.$AudioPayload<ExtArgs> | null
      issues: Prisma.$IssuePayload<ExtArgs>[]
      consonants: Prisma.$ConsonantPhonemePayload<ExtArgs>[]
      pronunciation: Prisma.$LexicalSetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      audioId: number | null
      createdAt: Date
      updatedAt: Date
      word: string
    }, ExtArgs["result"]["word"]>
    composites: {}
  }

  type WordGetPayload<S extends boolean | null | undefined | WordDefaultArgs> = $Result.GetResult<Prisma.$WordPayload, S>

  type WordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WordCountAggregateInputType | true
    }

  export interface WordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Word'], meta: { name: 'Word' } }
    /**
     * Find zero or one Word that matches the filter.
     * @param {WordFindUniqueArgs} args - Arguments to find a Word
     * @example
     * // Get one Word
     * const word = await prisma.word.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WordFindUniqueArgs>(args: SelectSubset<T, WordFindUniqueArgs<ExtArgs>>): Prisma__WordClient<$Result.GetResult<Prisma.$WordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Word that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WordFindUniqueOrThrowArgs} args - Arguments to find a Word
     * @example
     * // Get one Word
     * const word = await prisma.word.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WordFindUniqueOrThrowArgs>(args: SelectSubset<T, WordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WordClient<$Result.GetResult<Prisma.$WordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Word that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordFindFirstArgs} args - Arguments to find a Word
     * @example
     * // Get one Word
     * const word = await prisma.word.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WordFindFirstArgs>(args?: SelectSubset<T, WordFindFirstArgs<ExtArgs>>): Prisma__WordClient<$Result.GetResult<Prisma.$WordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Word that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordFindFirstOrThrowArgs} args - Arguments to find a Word
     * @example
     * // Get one Word
     * const word = await prisma.word.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WordFindFirstOrThrowArgs>(args?: SelectSubset<T, WordFindFirstOrThrowArgs<ExtArgs>>): Prisma__WordClient<$Result.GetResult<Prisma.$WordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Words that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Words
     * const words = await prisma.word.findMany()
     * 
     * // Get first 10 Words
     * const words = await prisma.word.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wordWithIdOnly = await prisma.word.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WordFindManyArgs>(args?: SelectSubset<T, WordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Word.
     * @param {WordCreateArgs} args - Arguments to create a Word.
     * @example
     * // Create one Word
     * const Word = await prisma.word.create({
     *   data: {
     *     // ... data to create a Word
     *   }
     * })
     * 
     */
    create<T extends WordCreateArgs>(args: SelectSubset<T, WordCreateArgs<ExtArgs>>): Prisma__WordClient<$Result.GetResult<Prisma.$WordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Words.
     * @param {WordCreateManyArgs} args - Arguments to create many Words.
     * @example
     * // Create many Words
     * const word = await prisma.word.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WordCreateManyArgs>(args?: SelectSubset<T, WordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Words and returns the data saved in the database.
     * @param {WordCreateManyAndReturnArgs} args - Arguments to create many Words.
     * @example
     * // Create many Words
     * const word = await prisma.word.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Words and only return the `id`
     * const wordWithIdOnly = await prisma.word.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WordCreateManyAndReturnArgs>(args?: SelectSubset<T, WordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Word.
     * @param {WordDeleteArgs} args - Arguments to delete one Word.
     * @example
     * // Delete one Word
     * const Word = await prisma.word.delete({
     *   where: {
     *     // ... filter to delete one Word
     *   }
     * })
     * 
     */
    delete<T extends WordDeleteArgs>(args: SelectSubset<T, WordDeleteArgs<ExtArgs>>): Prisma__WordClient<$Result.GetResult<Prisma.$WordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Word.
     * @param {WordUpdateArgs} args - Arguments to update one Word.
     * @example
     * // Update one Word
     * const word = await prisma.word.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WordUpdateArgs>(args: SelectSubset<T, WordUpdateArgs<ExtArgs>>): Prisma__WordClient<$Result.GetResult<Prisma.$WordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Words.
     * @param {WordDeleteManyArgs} args - Arguments to filter Words to delete.
     * @example
     * // Delete a few Words
     * const { count } = await prisma.word.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WordDeleteManyArgs>(args?: SelectSubset<T, WordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Words.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Words
     * const word = await prisma.word.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WordUpdateManyArgs>(args: SelectSubset<T, WordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Words and returns the data updated in the database.
     * @param {WordUpdateManyAndReturnArgs} args - Arguments to update many Words.
     * @example
     * // Update many Words
     * const word = await prisma.word.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Words and only return the `id`
     * const wordWithIdOnly = await prisma.word.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WordUpdateManyAndReturnArgs>(args: SelectSubset<T, WordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Word.
     * @param {WordUpsertArgs} args - Arguments to update or create a Word.
     * @example
     * // Update or create a Word
     * const word = await prisma.word.upsert({
     *   create: {
     *     // ... data to create a Word
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Word we want to update
     *   }
     * })
     */
    upsert<T extends WordUpsertArgs>(args: SelectSubset<T, WordUpsertArgs<ExtArgs>>): Prisma__WordClient<$Result.GetResult<Prisma.$WordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Words.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordCountArgs} args - Arguments to filter Words to count.
     * @example
     * // Count the number of Words
     * const count = await prisma.word.count({
     *   where: {
     *     // ... the filter for the Words we want to count
     *   }
     * })
    **/
    count<T extends WordCountArgs>(
      args?: Subset<T, WordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Word.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WordAggregateArgs>(args: Subset<T, WordAggregateArgs>): Prisma.PrismaPromise<GetWordAggregateType<T>>

    /**
     * Group by Word.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WordGroupByArgs['orderBy'] }
        : { orderBy?: WordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Word model
   */
  readonly fields: WordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Word.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    audio<T extends Word$audioArgs<ExtArgs> = {}>(args?: Subset<T, Word$audioArgs<ExtArgs>>): Prisma__AudioClient<$Result.GetResult<Prisma.$AudioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    issues<T extends Word$issuesArgs<ExtArgs> = {}>(args?: Subset<T, Word$issuesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    consonants<T extends Word$consonantsArgs<ExtArgs> = {}>(args?: Subset<T, Word$consonantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsonantPhonemePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pronunciation<T extends Word$pronunciationArgs<ExtArgs> = {}>(args?: Subset<T, Word$pronunciationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LexicalSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Word model
   */
  interface WordFieldRefs {
    readonly id: FieldRef<"Word", 'Int'>
    readonly audioId: FieldRef<"Word", 'Int'>
    readonly createdAt: FieldRef<"Word", 'DateTime'>
    readonly updatedAt: FieldRef<"Word", 'DateTime'>
    readonly word: FieldRef<"Word", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Word findUnique
   */
  export type WordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Word
     */
    select?: WordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Word
     */
    omit?: WordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordInclude<ExtArgs> | null
    /**
     * Filter, which Word to fetch.
     */
    where: WordWhereUniqueInput
  }

  /**
   * Word findUniqueOrThrow
   */
  export type WordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Word
     */
    select?: WordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Word
     */
    omit?: WordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordInclude<ExtArgs> | null
    /**
     * Filter, which Word to fetch.
     */
    where: WordWhereUniqueInput
  }

  /**
   * Word findFirst
   */
  export type WordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Word
     */
    select?: WordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Word
     */
    omit?: WordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordInclude<ExtArgs> | null
    /**
     * Filter, which Word to fetch.
     */
    where?: WordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Words to fetch.
     */
    orderBy?: WordOrderByWithRelationInput | WordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Words.
     */
    cursor?: WordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Words from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Words.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Words.
     */
    distinct?: WordScalarFieldEnum | WordScalarFieldEnum[]
  }

  /**
   * Word findFirstOrThrow
   */
  export type WordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Word
     */
    select?: WordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Word
     */
    omit?: WordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordInclude<ExtArgs> | null
    /**
     * Filter, which Word to fetch.
     */
    where?: WordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Words to fetch.
     */
    orderBy?: WordOrderByWithRelationInput | WordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Words.
     */
    cursor?: WordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Words from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Words.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Words.
     */
    distinct?: WordScalarFieldEnum | WordScalarFieldEnum[]
  }

  /**
   * Word findMany
   */
  export type WordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Word
     */
    select?: WordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Word
     */
    omit?: WordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordInclude<ExtArgs> | null
    /**
     * Filter, which Words to fetch.
     */
    where?: WordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Words to fetch.
     */
    orderBy?: WordOrderByWithRelationInput | WordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Words.
     */
    cursor?: WordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Words from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Words.
     */
    skip?: number
    distinct?: WordScalarFieldEnum | WordScalarFieldEnum[]
  }

  /**
   * Word create
   */
  export type WordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Word
     */
    select?: WordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Word
     */
    omit?: WordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordInclude<ExtArgs> | null
    /**
     * The data needed to create a Word.
     */
    data: XOR<WordCreateInput, WordUncheckedCreateInput>
  }

  /**
   * Word createMany
   */
  export type WordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Words.
     */
    data: WordCreateManyInput | WordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Word createManyAndReturn
   */
  export type WordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Word
     */
    select?: WordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Word
     */
    omit?: WordOmit<ExtArgs> | null
    /**
     * The data used to create many Words.
     */
    data: WordCreateManyInput | WordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Word update
   */
  export type WordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Word
     */
    select?: WordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Word
     */
    omit?: WordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordInclude<ExtArgs> | null
    /**
     * The data needed to update a Word.
     */
    data: XOR<WordUpdateInput, WordUncheckedUpdateInput>
    /**
     * Choose, which Word to update.
     */
    where: WordWhereUniqueInput
  }

  /**
   * Word updateMany
   */
  export type WordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Words.
     */
    data: XOR<WordUpdateManyMutationInput, WordUncheckedUpdateManyInput>
    /**
     * Filter which Words to update
     */
    where?: WordWhereInput
    /**
     * Limit how many Words to update.
     */
    limit?: number
  }

  /**
   * Word updateManyAndReturn
   */
  export type WordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Word
     */
    select?: WordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Word
     */
    omit?: WordOmit<ExtArgs> | null
    /**
     * The data used to update Words.
     */
    data: XOR<WordUpdateManyMutationInput, WordUncheckedUpdateManyInput>
    /**
     * Filter which Words to update
     */
    where?: WordWhereInput
    /**
     * Limit how many Words to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Word upsert
   */
  export type WordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Word
     */
    select?: WordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Word
     */
    omit?: WordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordInclude<ExtArgs> | null
    /**
     * The filter to search for the Word to update in case it exists.
     */
    where: WordWhereUniqueInput
    /**
     * In case the Word found by the `where` argument doesn't exist, create a new Word with this data.
     */
    create: XOR<WordCreateInput, WordUncheckedCreateInput>
    /**
     * In case the Word was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WordUpdateInput, WordUncheckedUpdateInput>
  }

  /**
   * Word delete
   */
  export type WordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Word
     */
    select?: WordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Word
     */
    omit?: WordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordInclude<ExtArgs> | null
    /**
     * Filter which Word to delete.
     */
    where: WordWhereUniqueInput
  }

  /**
   * Word deleteMany
   */
  export type WordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Words to delete
     */
    where?: WordWhereInput
    /**
     * Limit how many Words to delete.
     */
    limit?: number
  }

  /**
   * Word.audio
   */
  export type Word$audioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audio
     */
    select?: AudioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audio
     */
    omit?: AudioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudioInclude<ExtArgs> | null
    where?: AudioWhereInput
  }

  /**
   * Word.issues
   */
  export type Word$issuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Issue
     */
    select?: IssueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Issue
     */
    omit?: IssueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IssueInclude<ExtArgs> | null
    where?: IssueWhereInput
    orderBy?: IssueOrderByWithRelationInput | IssueOrderByWithRelationInput[]
    cursor?: IssueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IssueScalarFieldEnum | IssueScalarFieldEnum[]
  }

  /**
   * Word.consonants
   */
  export type Word$consonantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhoneme
     */
    select?: ConsonantPhonemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhoneme
     */
    omit?: ConsonantPhonemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeInclude<ExtArgs> | null
    where?: ConsonantPhonemeWhereInput
    orderBy?: ConsonantPhonemeOrderByWithRelationInput | ConsonantPhonemeOrderByWithRelationInput[]
    cursor?: ConsonantPhonemeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsonantPhonemeScalarFieldEnum | ConsonantPhonemeScalarFieldEnum[]
  }

  /**
   * Word.pronunciation
   */
  export type Word$pronunciationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSet
     */
    select?: LexicalSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSet
     */
    omit?: LexicalSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetInclude<ExtArgs> | null
    where?: LexicalSetWhereInput
    orderBy?: LexicalSetOrderByWithRelationInput | LexicalSetOrderByWithRelationInput[]
    cursor?: LexicalSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LexicalSetScalarFieldEnum | LexicalSetScalarFieldEnum[]
  }

  /**
   * Word without action
   */
  export type WordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Word
     */
    select?: WordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Word
     */
    omit?: WordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordInclude<ExtArgs> | null
  }


  /**
   * Model Issue
   */

  export type AggregateIssue = {
    _count: IssueCountAggregateOutputType | null
    _avg: IssueAvgAggregateOutputType | null
    _sum: IssueSumAggregateOutputType | null
    _min: IssueMinAggregateOutputType | null
    _max: IssueMaxAggregateOutputType | null
  }

  export type IssueAvgAggregateOutputType = {
    id: number | null
    featureId: number | null
  }

  export type IssueSumAggregateOutputType = {
    id: number | null
    featureId: number | null
  }

  export type IssueMinAggregateOutputType = {
    id: number | null
    name: string | null
    featureId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IssueMaxAggregateOutputType = {
    id: number | null
    name: string | null
    featureId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IssueCountAggregateOutputType = {
    id: number
    name: number
    featureId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type IssueAvgAggregateInputType = {
    id?: true
    featureId?: true
  }

  export type IssueSumAggregateInputType = {
    id?: true
    featureId?: true
  }

  export type IssueMinAggregateInputType = {
    id?: true
    name?: true
    featureId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IssueMaxAggregateInputType = {
    id?: true
    name?: true
    featureId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IssueCountAggregateInputType = {
    id?: true
    name?: true
    featureId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type IssueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Issue to aggregate.
     */
    where?: IssueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Issues to fetch.
     */
    orderBy?: IssueOrderByWithRelationInput | IssueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IssueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Issues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Issues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Issues
    **/
    _count?: true | IssueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IssueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IssueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IssueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IssueMaxAggregateInputType
  }

  export type GetIssueAggregateType<T extends IssueAggregateArgs> = {
        [P in keyof T & keyof AggregateIssue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIssue[P]>
      : GetScalarType<T[P], AggregateIssue[P]>
  }




  export type IssueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IssueWhereInput
    orderBy?: IssueOrderByWithAggregationInput | IssueOrderByWithAggregationInput[]
    by: IssueScalarFieldEnum[] | IssueScalarFieldEnum
    having?: IssueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IssueCountAggregateInputType | true
    _avg?: IssueAvgAggregateInputType
    _sum?: IssueSumAggregateInputType
    _min?: IssueMinAggregateInputType
    _max?: IssueMaxAggregateInputType
  }

  export type IssueGroupByOutputType = {
    id: number
    name: string
    featureId: number
    createdAt: Date
    updatedAt: Date
    _count: IssueCountAggregateOutputType | null
    _avg: IssueAvgAggregateOutputType | null
    _sum: IssueSumAggregateOutputType | null
    _min: IssueMinAggregateOutputType | null
    _max: IssueMaxAggregateOutputType | null
  }

  type GetIssueGroupByPayload<T extends IssueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IssueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IssueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IssueGroupByOutputType[P]>
            : GetScalarType<T[P], IssueGroupByOutputType[P]>
        }
      >
    >


  export type IssueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    featureId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    feature?: boolean | FeatureDefaultArgs<ExtArgs>
    words?: boolean | Issue$wordsArgs<ExtArgs>
    _count?: boolean | IssueCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["issue"]>

  export type IssueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    featureId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    feature?: boolean | FeatureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["issue"]>

  export type IssueSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    featureId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    feature?: boolean | FeatureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["issue"]>

  export type IssueSelectScalar = {
    id?: boolean
    name?: boolean
    featureId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type IssueOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "featureId" | "createdAt" | "updatedAt", ExtArgs["result"]["issue"]>
  export type IssueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feature?: boolean | FeatureDefaultArgs<ExtArgs>
    words?: boolean | Issue$wordsArgs<ExtArgs>
    _count?: boolean | IssueCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type IssueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feature?: boolean | FeatureDefaultArgs<ExtArgs>
  }
  export type IssueIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feature?: boolean | FeatureDefaultArgs<ExtArgs>
  }

  export type $IssuePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Issue"
    objects: {
      feature: Prisma.$FeaturePayload<ExtArgs>
      words: Prisma.$WordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      featureId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["issue"]>
    composites: {}
  }

  type IssueGetPayload<S extends boolean | null | undefined | IssueDefaultArgs> = $Result.GetResult<Prisma.$IssuePayload, S>

  type IssueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IssueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IssueCountAggregateInputType | true
    }

  export interface IssueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Issue'], meta: { name: 'Issue' } }
    /**
     * Find zero or one Issue that matches the filter.
     * @param {IssueFindUniqueArgs} args - Arguments to find a Issue
     * @example
     * // Get one Issue
     * const issue = await prisma.issue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IssueFindUniqueArgs>(args: SelectSubset<T, IssueFindUniqueArgs<ExtArgs>>): Prisma__IssueClient<$Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Issue that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IssueFindUniqueOrThrowArgs} args - Arguments to find a Issue
     * @example
     * // Get one Issue
     * const issue = await prisma.issue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IssueFindUniqueOrThrowArgs>(args: SelectSubset<T, IssueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IssueClient<$Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Issue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssueFindFirstArgs} args - Arguments to find a Issue
     * @example
     * // Get one Issue
     * const issue = await prisma.issue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IssueFindFirstArgs>(args?: SelectSubset<T, IssueFindFirstArgs<ExtArgs>>): Prisma__IssueClient<$Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Issue that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssueFindFirstOrThrowArgs} args - Arguments to find a Issue
     * @example
     * // Get one Issue
     * const issue = await prisma.issue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IssueFindFirstOrThrowArgs>(args?: SelectSubset<T, IssueFindFirstOrThrowArgs<ExtArgs>>): Prisma__IssueClient<$Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Issues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Issues
     * const issues = await prisma.issue.findMany()
     * 
     * // Get first 10 Issues
     * const issues = await prisma.issue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const issueWithIdOnly = await prisma.issue.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IssueFindManyArgs>(args?: SelectSubset<T, IssueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Issue.
     * @param {IssueCreateArgs} args - Arguments to create a Issue.
     * @example
     * // Create one Issue
     * const Issue = await prisma.issue.create({
     *   data: {
     *     // ... data to create a Issue
     *   }
     * })
     * 
     */
    create<T extends IssueCreateArgs>(args: SelectSubset<T, IssueCreateArgs<ExtArgs>>): Prisma__IssueClient<$Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Issues.
     * @param {IssueCreateManyArgs} args - Arguments to create many Issues.
     * @example
     * // Create many Issues
     * const issue = await prisma.issue.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IssueCreateManyArgs>(args?: SelectSubset<T, IssueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Issues and returns the data saved in the database.
     * @param {IssueCreateManyAndReturnArgs} args - Arguments to create many Issues.
     * @example
     * // Create many Issues
     * const issue = await prisma.issue.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Issues and only return the `id`
     * const issueWithIdOnly = await prisma.issue.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IssueCreateManyAndReturnArgs>(args?: SelectSubset<T, IssueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Issue.
     * @param {IssueDeleteArgs} args - Arguments to delete one Issue.
     * @example
     * // Delete one Issue
     * const Issue = await prisma.issue.delete({
     *   where: {
     *     // ... filter to delete one Issue
     *   }
     * })
     * 
     */
    delete<T extends IssueDeleteArgs>(args: SelectSubset<T, IssueDeleteArgs<ExtArgs>>): Prisma__IssueClient<$Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Issue.
     * @param {IssueUpdateArgs} args - Arguments to update one Issue.
     * @example
     * // Update one Issue
     * const issue = await prisma.issue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IssueUpdateArgs>(args: SelectSubset<T, IssueUpdateArgs<ExtArgs>>): Prisma__IssueClient<$Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Issues.
     * @param {IssueDeleteManyArgs} args - Arguments to filter Issues to delete.
     * @example
     * // Delete a few Issues
     * const { count } = await prisma.issue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IssueDeleteManyArgs>(args?: SelectSubset<T, IssueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Issues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Issues
     * const issue = await prisma.issue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IssueUpdateManyArgs>(args: SelectSubset<T, IssueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Issues and returns the data updated in the database.
     * @param {IssueUpdateManyAndReturnArgs} args - Arguments to update many Issues.
     * @example
     * // Update many Issues
     * const issue = await prisma.issue.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Issues and only return the `id`
     * const issueWithIdOnly = await prisma.issue.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends IssueUpdateManyAndReturnArgs>(args: SelectSubset<T, IssueUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Issue.
     * @param {IssueUpsertArgs} args - Arguments to update or create a Issue.
     * @example
     * // Update or create a Issue
     * const issue = await prisma.issue.upsert({
     *   create: {
     *     // ... data to create a Issue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Issue we want to update
     *   }
     * })
     */
    upsert<T extends IssueUpsertArgs>(args: SelectSubset<T, IssueUpsertArgs<ExtArgs>>): Prisma__IssueClient<$Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Issues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssueCountArgs} args - Arguments to filter Issues to count.
     * @example
     * // Count the number of Issues
     * const count = await prisma.issue.count({
     *   where: {
     *     // ... the filter for the Issues we want to count
     *   }
     * })
    **/
    count<T extends IssueCountArgs>(
      args?: Subset<T, IssueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IssueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Issue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IssueAggregateArgs>(args: Subset<T, IssueAggregateArgs>): Prisma.PrismaPromise<GetIssueAggregateType<T>>

    /**
     * Group by Issue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IssueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IssueGroupByArgs['orderBy'] }
        : { orderBy?: IssueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IssueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIssueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Issue model
   */
  readonly fields: IssueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Issue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IssueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    feature<T extends FeatureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FeatureDefaultArgs<ExtArgs>>): Prisma__FeatureClient<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    words<T extends Issue$wordsArgs<ExtArgs> = {}>(args?: Subset<T, Issue$wordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Issue model
   */
  interface IssueFieldRefs {
    readonly id: FieldRef<"Issue", 'Int'>
    readonly name: FieldRef<"Issue", 'String'>
    readonly featureId: FieldRef<"Issue", 'Int'>
    readonly createdAt: FieldRef<"Issue", 'DateTime'>
    readonly updatedAt: FieldRef<"Issue", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Issue findUnique
   */
  export type IssueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Issue
     */
    select?: IssueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Issue
     */
    omit?: IssueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IssueInclude<ExtArgs> | null
    /**
     * Filter, which Issue to fetch.
     */
    where: IssueWhereUniqueInput
  }

  /**
   * Issue findUniqueOrThrow
   */
  export type IssueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Issue
     */
    select?: IssueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Issue
     */
    omit?: IssueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IssueInclude<ExtArgs> | null
    /**
     * Filter, which Issue to fetch.
     */
    where: IssueWhereUniqueInput
  }

  /**
   * Issue findFirst
   */
  export type IssueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Issue
     */
    select?: IssueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Issue
     */
    omit?: IssueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IssueInclude<ExtArgs> | null
    /**
     * Filter, which Issue to fetch.
     */
    where?: IssueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Issues to fetch.
     */
    orderBy?: IssueOrderByWithRelationInput | IssueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Issues.
     */
    cursor?: IssueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Issues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Issues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Issues.
     */
    distinct?: IssueScalarFieldEnum | IssueScalarFieldEnum[]
  }

  /**
   * Issue findFirstOrThrow
   */
  export type IssueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Issue
     */
    select?: IssueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Issue
     */
    omit?: IssueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IssueInclude<ExtArgs> | null
    /**
     * Filter, which Issue to fetch.
     */
    where?: IssueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Issues to fetch.
     */
    orderBy?: IssueOrderByWithRelationInput | IssueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Issues.
     */
    cursor?: IssueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Issues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Issues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Issues.
     */
    distinct?: IssueScalarFieldEnum | IssueScalarFieldEnum[]
  }

  /**
   * Issue findMany
   */
  export type IssueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Issue
     */
    select?: IssueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Issue
     */
    omit?: IssueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IssueInclude<ExtArgs> | null
    /**
     * Filter, which Issues to fetch.
     */
    where?: IssueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Issues to fetch.
     */
    orderBy?: IssueOrderByWithRelationInput | IssueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Issues.
     */
    cursor?: IssueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Issues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Issues.
     */
    skip?: number
    distinct?: IssueScalarFieldEnum | IssueScalarFieldEnum[]
  }

  /**
   * Issue create
   */
  export type IssueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Issue
     */
    select?: IssueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Issue
     */
    omit?: IssueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IssueInclude<ExtArgs> | null
    /**
     * The data needed to create a Issue.
     */
    data: XOR<IssueCreateInput, IssueUncheckedCreateInput>
  }

  /**
   * Issue createMany
   */
  export type IssueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Issues.
     */
    data: IssueCreateManyInput | IssueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Issue createManyAndReturn
   */
  export type IssueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Issue
     */
    select?: IssueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Issue
     */
    omit?: IssueOmit<ExtArgs> | null
    /**
     * The data used to create many Issues.
     */
    data: IssueCreateManyInput | IssueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IssueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Issue update
   */
  export type IssueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Issue
     */
    select?: IssueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Issue
     */
    omit?: IssueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IssueInclude<ExtArgs> | null
    /**
     * The data needed to update a Issue.
     */
    data: XOR<IssueUpdateInput, IssueUncheckedUpdateInput>
    /**
     * Choose, which Issue to update.
     */
    where: IssueWhereUniqueInput
  }

  /**
   * Issue updateMany
   */
  export type IssueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Issues.
     */
    data: XOR<IssueUpdateManyMutationInput, IssueUncheckedUpdateManyInput>
    /**
     * Filter which Issues to update
     */
    where?: IssueWhereInput
    /**
     * Limit how many Issues to update.
     */
    limit?: number
  }

  /**
   * Issue updateManyAndReturn
   */
  export type IssueUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Issue
     */
    select?: IssueSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Issue
     */
    omit?: IssueOmit<ExtArgs> | null
    /**
     * The data used to update Issues.
     */
    data: XOR<IssueUpdateManyMutationInput, IssueUncheckedUpdateManyInput>
    /**
     * Filter which Issues to update
     */
    where?: IssueWhereInput
    /**
     * Limit how many Issues to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IssueIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Issue upsert
   */
  export type IssueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Issue
     */
    select?: IssueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Issue
     */
    omit?: IssueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IssueInclude<ExtArgs> | null
    /**
     * The filter to search for the Issue to update in case it exists.
     */
    where: IssueWhereUniqueInput
    /**
     * In case the Issue found by the `where` argument doesn't exist, create a new Issue with this data.
     */
    create: XOR<IssueCreateInput, IssueUncheckedCreateInput>
    /**
     * In case the Issue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IssueUpdateInput, IssueUncheckedUpdateInput>
  }

  /**
   * Issue delete
   */
  export type IssueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Issue
     */
    select?: IssueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Issue
     */
    omit?: IssueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IssueInclude<ExtArgs> | null
    /**
     * Filter which Issue to delete.
     */
    where: IssueWhereUniqueInput
  }

  /**
   * Issue deleteMany
   */
  export type IssueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Issues to delete
     */
    where?: IssueWhereInput
    /**
     * Limit how many Issues to delete.
     */
    limit?: number
  }

  /**
   * Issue.words
   */
  export type Issue$wordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Word
     */
    select?: WordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Word
     */
    omit?: WordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordInclude<ExtArgs> | null
    where?: WordWhereInput
    orderBy?: WordOrderByWithRelationInput | WordOrderByWithRelationInput[]
    cursor?: WordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WordScalarFieldEnum | WordScalarFieldEnum[]
  }

  /**
   * Issue without action
   */
  export type IssueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Issue
     */
    select?: IssueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Issue
     */
    omit?: IssueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IssueInclude<ExtArgs> | null
  }


  /**
   * Model Feature
   */

  export type AggregateFeature = {
    _count: FeatureCountAggregateOutputType | null
    _avg: FeatureAvgAggregateOutputType | null
    _sum: FeatureSumAggregateOutputType | null
    _min: FeatureMinAggregateOutputType | null
    _max: FeatureMaxAggregateOutputType | null
  }

  export type FeatureAvgAggregateOutputType = {
    id: number | null
    order: number | null
  }

  export type FeatureSumAggregateOutputType = {
    id: number | null
    order: number | null
  }

  export type FeatureMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    order: number | null
  }

  export type FeatureMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    order: number | null
  }

  export type FeatureCountAggregateOutputType = {
    id: number
    name: number
    type: number
    order: number
    _all: number
  }


  export type FeatureAvgAggregateInputType = {
    id?: true
    order?: true
  }

  export type FeatureSumAggregateInputType = {
    id?: true
    order?: true
  }

  export type FeatureMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    order?: true
  }

  export type FeatureMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    order?: true
  }

  export type FeatureCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    order?: true
    _all?: true
  }

  export type FeatureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feature to aggregate.
     */
    where?: FeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Features to fetch.
     */
    orderBy?: FeatureOrderByWithRelationInput | FeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Features from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Features.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Features
    **/
    _count?: true | FeatureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeatureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeatureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeatureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeatureMaxAggregateInputType
  }

  export type GetFeatureAggregateType<T extends FeatureAggregateArgs> = {
        [P in keyof T & keyof AggregateFeature]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeature[P]>
      : GetScalarType<T[P], AggregateFeature[P]>
  }




  export type FeatureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureWhereInput
    orderBy?: FeatureOrderByWithAggregationInput | FeatureOrderByWithAggregationInput[]
    by: FeatureScalarFieldEnum[] | FeatureScalarFieldEnum
    having?: FeatureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeatureCountAggregateInputType | true
    _avg?: FeatureAvgAggregateInputType
    _sum?: FeatureSumAggregateInputType
    _min?: FeatureMinAggregateInputType
    _max?: FeatureMaxAggregateInputType
  }

  export type FeatureGroupByOutputType = {
    id: number
    name: string
    type: string | null
    order: number | null
    _count: FeatureCountAggregateOutputType | null
    _avg: FeatureAvgAggregateOutputType | null
    _sum: FeatureSumAggregateOutputType | null
    _min: FeatureMinAggregateOutputType | null
    _max: FeatureMaxAggregateOutputType | null
  }

  type GetFeatureGroupByPayload<T extends FeatureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeatureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeatureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeatureGroupByOutputType[P]>
            : GetScalarType<T[P], FeatureGroupByOutputType[P]>
        }
      >
    >


  export type FeatureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    order?: boolean
    issues?: boolean | Feature$issuesArgs<ExtArgs>
    _count?: boolean | FeatureCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feature"]>

  export type FeatureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    order?: boolean
  }, ExtArgs["result"]["feature"]>

  export type FeatureSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    order?: boolean
  }, ExtArgs["result"]["feature"]>

  export type FeatureSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    order?: boolean
  }

  export type FeatureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "order", ExtArgs["result"]["feature"]>
  export type FeatureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    issues?: boolean | Feature$issuesArgs<ExtArgs>
    _count?: boolean | FeatureCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FeatureIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type FeatureIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FeaturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feature"
    objects: {
      issues: Prisma.$IssuePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      type: string | null
      order: number | null
    }, ExtArgs["result"]["feature"]>
    composites: {}
  }

  type FeatureGetPayload<S extends boolean | null | undefined | FeatureDefaultArgs> = $Result.GetResult<Prisma.$FeaturePayload, S>

  type FeatureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeatureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeatureCountAggregateInputType | true
    }

  export interface FeatureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feature'], meta: { name: 'Feature' } }
    /**
     * Find zero or one Feature that matches the filter.
     * @param {FeatureFindUniqueArgs} args - Arguments to find a Feature
     * @example
     * // Get one Feature
     * const feature = await prisma.feature.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeatureFindUniqueArgs>(args: SelectSubset<T, FeatureFindUniqueArgs<ExtArgs>>): Prisma__FeatureClient<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Feature that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeatureFindUniqueOrThrowArgs} args - Arguments to find a Feature
     * @example
     * // Get one Feature
     * const feature = await prisma.feature.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeatureFindUniqueOrThrowArgs>(args: SelectSubset<T, FeatureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeatureClient<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feature that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureFindFirstArgs} args - Arguments to find a Feature
     * @example
     * // Get one Feature
     * const feature = await prisma.feature.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeatureFindFirstArgs>(args?: SelectSubset<T, FeatureFindFirstArgs<ExtArgs>>): Prisma__FeatureClient<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feature that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureFindFirstOrThrowArgs} args - Arguments to find a Feature
     * @example
     * // Get one Feature
     * const feature = await prisma.feature.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeatureFindFirstOrThrowArgs>(args?: SelectSubset<T, FeatureFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeatureClient<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Features that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Features
     * const features = await prisma.feature.findMany()
     * 
     * // Get first 10 Features
     * const features = await prisma.feature.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const featureWithIdOnly = await prisma.feature.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeatureFindManyArgs>(args?: SelectSubset<T, FeatureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Feature.
     * @param {FeatureCreateArgs} args - Arguments to create a Feature.
     * @example
     * // Create one Feature
     * const Feature = await prisma.feature.create({
     *   data: {
     *     // ... data to create a Feature
     *   }
     * })
     * 
     */
    create<T extends FeatureCreateArgs>(args: SelectSubset<T, FeatureCreateArgs<ExtArgs>>): Prisma__FeatureClient<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Features.
     * @param {FeatureCreateManyArgs} args - Arguments to create many Features.
     * @example
     * // Create many Features
     * const feature = await prisma.feature.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeatureCreateManyArgs>(args?: SelectSubset<T, FeatureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Features and returns the data saved in the database.
     * @param {FeatureCreateManyAndReturnArgs} args - Arguments to create many Features.
     * @example
     * // Create many Features
     * const feature = await prisma.feature.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Features and only return the `id`
     * const featureWithIdOnly = await prisma.feature.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeatureCreateManyAndReturnArgs>(args?: SelectSubset<T, FeatureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Feature.
     * @param {FeatureDeleteArgs} args - Arguments to delete one Feature.
     * @example
     * // Delete one Feature
     * const Feature = await prisma.feature.delete({
     *   where: {
     *     // ... filter to delete one Feature
     *   }
     * })
     * 
     */
    delete<T extends FeatureDeleteArgs>(args: SelectSubset<T, FeatureDeleteArgs<ExtArgs>>): Prisma__FeatureClient<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Feature.
     * @param {FeatureUpdateArgs} args - Arguments to update one Feature.
     * @example
     * // Update one Feature
     * const feature = await prisma.feature.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeatureUpdateArgs>(args: SelectSubset<T, FeatureUpdateArgs<ExtArgs>>): Prisma__FeatureClient<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Features.
     * @param {FeatureDeleteManyArgs} args - Arguments to filter Features to delete.
     * @example
     * // Delete a few Features
     * const { count } = await prisma.feature.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeatureDeleteManyArgs>(args?: SelectSubset<T, FeatureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Features.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Features
     * const feature = await prisma.feature.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeatureUpdateManyArgs>(args: SelectSubset<T, FeatureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Features and returns the data updated in the database.
     * @param {FeatureUpdateManyAndReturnArgs} args - Arguments to update many Features.
     * @example
     * // Update many Features
     * const feature = await prisma.feature.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Features and only return the `id`
     * const featureWithIdOnly = await prisma.feature.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeatureUpdateManyAndReturnArgs>(args: SelectSubset<T, FeatureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Feature.
     * @param {FeatureUpsertArgs} args - Arguments to update or create a Feature.
     * @example
     * // Update or create a Feature
     * const feature = await prisma.feature.upsert({
     *   create: {
     *     // ... data to create a Feature
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feature we want to update
     *   }
     * })
     */
    upsert<T extends FeatureUpsertArgs>(args: SelectSubset<T, FeatureUpsertArgs<ExtArgs>>): Prisma__FeatureClient<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Features.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureCountArgs} args - Arguments to filter Features to count.
     * @example
     * // Count the number of Features
     * const count = await prisma.feature.count({
     *   where: {
     *     // ... the filter for the Features we want to count
     *   }
     * })
    **/
    count<T extends FeatureCountArgs>(
      args?: Subset<T, FeatureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeatureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeatureAggregateArgs>(args: Subset<T, FeatureAggregateArgs>): Prisma.PrismaPromise<GetFeatureAggregateType<T>>

    /**
     * Group by Feature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeatureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeatureGroupByArgs['orderBy'] }
        : { orderBy?: FeatureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeatureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeatureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feature model
   */
  readonly fields: FeatureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feature.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeatureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    issues<T extends Feature$issuesArgs<ExtArgs> = {}>(args?: Subset<T, Feature$issuesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feature model
   */
  interface FeatureFieldRefs {
    readonly id: FieldRef<"Feature", 'Int'>
    readonly name: FieldRef<"Feature", 'String'>
    readonly type: FieldRef<"Feature", 'String'>
    readonly order: FieldRef<"Feature", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Feature findUnique
   */
  export type FeatureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
    /**
     * Filter, which Feature to fetch.
     */
    where: FeatureWhereUniqueInput
  }

  /**
   * Feature findUniqueOrThrow
   */
  export type FeatureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
    /**
     * Filter, which Feature to fetch.
     */
    where: FeatureWhereUniqueInput
  }

  /**
   * Feature findFirst
   */
  export type FeatureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
    /**
     * Filter, which Feature to fetch.
     */
    where?: FeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Features to fetch.
     */
    orderBy?: FeatureOrderByWithRelationInput | FeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Features.
     */
    cursor?: FeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Features from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Features.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Features.
     */
    distinct?: FeatureScalarFieldEnum | FeatureScalarFieldEnum[]
  }

  /**
   * Feature findFirstOrThrow
   */
  export type FeatureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
    /**
     * Filter, which Feature to fetch.
     */
    where?: FeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Features to fetch.
     */
    orderBy?: FeatureOrderByWithRelationInput | FeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Features.
     */
    cursor?: FeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Features from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Features.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Features.
     */
    distinct?: FeatureScalarFieldEnum | FeatureScalarFieldEnum[]
  }

  /**
   * Feature findMany
   */
  export type FeatureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
    /**
     * Filter, which Features to fetch.
     */
    where?: FeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Features to fetch.
     */
    orderBy?: FeatureOrderByWithRelationInput | FeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Features.
     */
    cursor?: FeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Features from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Features.
     */
    skip?: number
    distinct?: FeatureScalarFieldEnum | FeatureScalarFieldEnum[]
  }

  /**
   * Feature create
   */
  export type FeatureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
    /**
     * The data needed to create a Feature.
     */
    data: XOR<FeatureCreateInput, FeatureUncheckedCreateInput>
  }

  /**
   * Feature createMany
   */
  export type FeatureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Features.
     */
    data: FeatureCreateManyInput | FeatureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feature createManyAndReturn
   */
  export type FeatureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * The data used to create many Features.
     */
    data: FeatureCreateManyInput | FeatureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feature update
   */
  export type FeatureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
    /**
     * The data needed to update a Feature.
     */
    data: XOR<FeatureUpdateInput, FeatureUncheckedUpdateInput>
    /**
     * Choose, which Feature to update.
     */
    where: FeatureWhereUniqueInput
  }

  /**
   * Feature updateMany
   */
  export type FeatureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Features.
     */
    data: XOR<FeatureUpdateManyMutationInput, FeatureUncheckedUpdateManyInput>
    /**
     * Filter which Features to update
     */
    where?: FeatureWhereInput
    /**
     * Limit how many Features to update.
     */
    limit?: number
  }

  /**
   * Feature updateManyAndReturn
   */
  export type FeatureUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * The data used to update Features.
     */
    data: XOR<FeatureUpdateManyMutationInput, FeatureUncheckedUpdateManyInput>
    /**
     * Filter which Features to update
     */
    where?: FeatureWhereInput
    /**
     * Limit how many Features to update.
     */
    limit?: number
  }

  /**
   * Feature upsert
   */
  export type FeatureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
    /**
     * The filter to search for the Feature to update in case it exists.
     */
    where: FeatureWhereUniqueInput
    /**
     * In case the Feature found by the `where` argument doesn't exist, create a new Feature with this data.
     */
    create: XOR<FeatureCreateInput, FeatureUncheckedCreateInput>
    /**
     * In case the Feature was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeatureUpdateInput, FeatureUncheckedUpdateInput>
  }

  /**
   * Feature delete
   */
  export type FeatureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
    /**
     * Filter which Feature to delete.
     */
    where: FeatureWhereUniqueInput
  }

  /**
   * Feature deleteMany
   */
  export type FeatureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Features to delete
     */
    where?: FeatureWhereInput
    /**
     * Limit how many Features to delete.
     */
    limit?: number
  }

  /**
   * Feature.issues
   */
  export type Feature$issuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Issue
     */
    select?: IssueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Issue
     */
    omit?: IssueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IssueInclude<ExtArgs> | null
    where?: IssueWhereInput
    orderBy?: IssueOrderByWithRelationInput | IssueOrderByWithRelationInput[]
    cursor?: IssueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IssueScalarFieldEnum | IssueScalarFieldEnum[]
  }

  /**
   * Feature without action
   */
  export type FeatureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
  }


  /**
   * Model DictionaryEntry
   */

  export type AggregateDictionaryEntry = {
    _count: DictionaryEntryCountAggregateOutputType | null
    _avg: DictionaryEntryAvgAggregateOutputType | null
    _sum: DictionaryEntrySumAggregateOutputType | null
    _min: DictionaryEntryMinAggregateOutputType | null
    _max: DictionaryEntryMaxAggregateOutputType | null
  }

  export type DictionaryEntryAvgAggregateOutputType = {
    id: number | null
  }

  export type DictionaryEntrySumAggregateOutputType = {
    id: number | null
  }

  export type DictionaryEntryMinAggregateOutputType = {
    id: number | null
    word: string | null
    createdAt: Date | null
    updatedAt: Date | null
    notes: string | null
  }

  export type DictionaryEntryMaxAggregateOutputType = {
    id: number | null
    word: string | null
    createdAt: Date | null
    updatedAt: Date | null
    notes: string | null
  }

  export type DictionaryEntryCountAggregateOutputType = {
    id: number
    word: number
    createdAt: number
    updatedAt: number
    notes: number
    _all: number
  }


  export type DictionaryEntryAvgAggregateInputType = {
    id?: true
  }

  export type DictionaryEntrySumAggregateInputType = {
    id?: true
  }

  export type DictionaryEntryMinAggregateInputType = {
    id?: true
    word?: true
    createdAt?: true
    updatedAt?: true
    notes?: true
  }

  export type DictionaryEntryMaxAggregateInputType = {
    id?: true
    word?: true
    createdAt?: true
    updatedAt?: true
    notes?: true
  }

  export type DictionaryEntryCountAggregateInputType = {
    id?: true
    word?: true
    createdAt?: true
    updatedAt?: true
    notes?: true
    _all?: true
  }

  export type DictionaryEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DictionaryEntry to aggregate.
     */
    where?: DictionaryEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DictionaryEntries to fetch.
     */
    orderBy?: DictionaryEntryOrderByWithRelationInput | DictionaryEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DictionaryEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DictionaryEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DictionaryEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DictionaryEntries
    **/
    _count?: true | DictionaryEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DictionaryEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DictionaryEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DictionaryEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DictionaryEntryMaxAggregateInputType
  }

  export type GetDictionaryEntryAggregateType<T extends DictionaryEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateDictionaryEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDictionaryEntry[P]>
      : GetScalarType<T[P], AggregateDictionaryEntry[P]>
  }




  export type DictionaryEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DictionaryEntryWhereInput
    orderBy?: DictionaryEntryOrderByWithAggregationInput | DictionaryEntryOrderByWithAggregationInput[]
    by: DictionaryEntryScalarFieldEnum[] | DictionaryEntryScalarFieldEnum
    having?: DictionaryEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DictionaryEntryCountAggregateInputType | true
    _avg?: DictionaryEntryAvgAggregateInputType
    _sum?: DictionaryEntrySumAggregateInputType
    _min?: DictionaryEntryMinAggregateInputType
    _max?: DictionaryEntryMaxAggregateInputType
  }

  export type DictionaryEntryGroupByOutputType = {
    id: number
    word: string
    createdAt: Date
    updatedAt: Date
    notes: string | null
    _count: DictionaryEntryCountAggregateOutputType | null
    _avg: DictionaryEntryAvgAggregateOutputType | null
    _sum: DictionaryEntrySumAggregateOutputType | null
    _min: DictionaryEntryMinAggregateOutputType | null
    _max: DictionaryEntryMaxAggregateOutputType | null
  }

  type GetDictionaryEntryGroupByPayload<T extends DictionaryEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DictionaryEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DictionaryEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DictionaryEntryGroupByOutputType[P]>
            : GetScalarType<T[P], DictionaryEntryGroupByOutputType[P]>
        }
      >
    >


  export type DictionaryEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    word?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean
    usages?: boolean | DictionaryEntry$usagesArgs<ExtArgs>
    variations?: boolean | DictionaryEntry$variationsArgs<ExtArgs>
    _count?: boolean | DictionaryEntryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dictionaryEntry"]>

  export type DictionaryEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    word?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean
  }, ExtArgs["result"]["dictionaryEntry"]>

  export type DictionaryEntrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    word?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean
  }, ExtArgs["result"]["dictionaryEntry"]>

  export type DictionaryEntrySelectScalar = {
    id?: boolean
    word?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean
  }

  export type DictionaryEntryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "word" | "createdAt" | "updatedAt" | "notes", ExtArgs["result"]["dictionaryEntry"]>
  export type DictionaryEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usages?: boolean | DictionaryEntry$usagesArgs<ExtArgs>
    variations?: boolean | DictionaryEntry$variationsArgs<ExtArgs>
    _count?: boolean | DictionaryEntryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DictionaryEntryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DictionaryEntryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DictionaryEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DictionaryEntry"
    objects: {
      usages: Prisma.$WordUsagePayload<ExtArgs>[]
      variations: Prisma.$WordVariationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      word: string
      createdAt: Date
      updatedAt: Date
      notes: string | null
    }, ExtArgs["result"]["dictionaryEntry"]>
    composites: {}
  }

  type DictionaryEntryGetPayload<S extends boolean | null | undefined | DictionaryEntryDefaultArgs> = $Result.GetResult<Prisma.$DictionaryEntryPayload, S>

  type DictionaryEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DictionaryEntryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DictionaryEntryCountAggregateInputType | true
    }

  export interface DictionaryEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DictionaryEntry'], meta: { name: 'DictionaryEntry' } }
    /**
     * Find zero or one DictionaryEntry that matches the filter.
     * @param {DictionaryEntryFindUniqueArgs} args - Arguments to find a DictionaryEntry
     * @example
     * // Get one DictionaryEntry
     * const dictionaryEntry = await prisma.dictionaryEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DictionaryEntryFindUniqueArgs>(args: SelectSubset<T, DictionaryEntryFindUniqueArgs<ExtArgs>>): Prisma__DictionaryEntryClient<$Result.GetResult<Prisma.$DictionaryEntryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DictionaryEntry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DictionaryEntryFindUniqueOrThrowArgs} args - Arguments to find a DictionaryEntry
     * @example
     * // Get one DictionaryEntry
     * const dictionaryEntry = await prisma.dictionaryEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DictionaryEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, DictionaryEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DictionaryEntryClient<$Result.GetResult<Prisma.$DictionaryEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DictionaryEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DictionaryEntryFindFirstArgs} args - Arguments to find a DictionaryEntry
     * @example
     * // Get one DictionaryEntry
     * const dictionaryEntry = await prisma.dictionaryEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DictionaryEntryFindFirstArgs>(args?: SelectSubset<T, DictionaryEntryFindFirstArgs<ExtArgs>>): Prisma__DictionaryEntryClient<$Result.GetResult<Prisma.$DictionaryEntryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DictionaryEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DictionaryEntryFindFirstOrThrowArgs} args - Arguments to find a DictionaryEntry
     * @example
     * // Get one DictionaryEntry
     * const dictionaryEntry = await prisma.dictionaryEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DictionaryEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, DictionaryEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__DictionaryEntryClient<$Result.GetResult<Prisma.$DictionaryEntryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DictionaryEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DictionaryEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DictionaryEntries
     * const dictionaryEntries = await prisma.dictionaryEntry.findMany()
     * 
     * // Get first 10 DictionaryEntries
     * const dictionaryEntries = await prisma.dictionaryEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dictionaryEntryWithIdOnly = await prisma.dictionaryEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DictionaryEntryFindManyArgs>(args?: SelectSubset<T, DictionaryEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DictionaryEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DictionaryEntry.
     * @param {DictionaryEntryCreateArgs} args - Arguments to create a DictionaryEntry.
     * @example
     * // Create one DictionaryEntry
     * const DictionaryEntry = await prisma.dictionaryEntry.create({
     *   data: {
     *     // ... data to create a DictionaryEntry
     *   }
     * })
     * 
     */
    create<T extends DictionaryEntryCreateArgs>(args: SelectSubset<T, DictionaryEntryCreateArgs<ExtArgs>>): Prisma__DictionaryEntryClient<$Result.GetResult<Prisma.$DictionaryEntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DictionaryEntries.
     * @param {DictionaryEntryCreateManyArgs} args - Arguments to create many DictionaryEntries.
     * @example
     * // Create many DictionaryEntries
     * const dictionaryEntry = await prisma.dictionaryEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DictionaryEntryCreateManyArgs>(args?: SelectSubset<T, DictionaryEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DictionaryEntries and returns the data saved in the database.
     * @param {DictionaryEntryCreateManyAndReturnArgs} args - Arguments to create many DictionaryEntries.
     * @example
     * // Create many DictionaryEntries
     * const dictionaryEntry = await prisma.dictionaryEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DictionaryEntries and only return the `id`
     * const dictionaryEntryWithIdOnly = await prisma.dictionaryEntry.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DictionaryEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, DictionaryEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DictionaryEntryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DictionaryEntry.
     * @param {DictionaryEntryDeleteArgs} args - Arguments to delete one DictionaryEntry.
     * @example
     * // Delete one DictionaryEntry
     * const DictionaryEntry = await prisma.dictionaryEntry.delete({
     *   where: {
     *     // ... filter to delete one DictionaryEntry
     *   }
     * })
     * 
     */
    delete<T extends DictionaryEntryDeleteArgs>(args: SelectSubset<T, DictionaryEntryDeleteArgs<ExtArgs>>): Prisma__DictionaryEntryClient<$Result.GetResult<Prisma.$DictionaryEntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DictionaryEntry.
     * @param {DictionaryEntryUpdateArgs} args - Arguments to update one DictionaryEntry.
     * @example
     * // Update one DictionaryEntry
     * const dictionaryEntry = await prisma.dictionaryEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DictionaryEntryUpdateArgs>(args: SelectSubset<T, DictionaryEntryUpdateArgs<ExtArgs>>): Prisma__DictionaryEntryClient<$Result.GetResult<Prisma.$DictionaryEntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DictionaryEntries.
     * @param {DictionaryEntryDeleteManyArgs} args - Arguments to filter DictionaryEntries to delete.
     * @example
     * // Delete a few DictionaryEntries
     * const { count } = await prisma.dictionaryEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DictionaryEntryDeleteManyArgs>(args?: SelectSubset<T, DictionaryEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DictionaryEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DictionaryEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DictionaryEntries
     * const dictionaryEntry = await prisma.dictionaryEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DictionaryEntryUpdateManyArgs>(args: SelectSubset<T, DictionaryEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DictionaryEntries and returns the data updated in the database.
     * @param {DictionaryEntryUpdateManyAndReturnArgs} args - Arguments to update many DictionaryEntries.
     * @example
     * // Update many DictionaryEntries
     * const dictionaryEntry = await prisma.dictionaryEntry.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DictionaryEntries and only return the `id`
     * const dictionaryEntryWithIdOnly = await prisma.dictionaryEntry.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DictionaryEntryUpdateManyAndReturnArgs>(args: SelectSubset<T, DictionaryEntryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DictionaryEntryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DictionaryEntry.
     * @param {DictionaryEntryUpsertArgs} args - Arguments to update or create a DictionaryEntry.
     * @example
     * // Update or create a DictionaryEntry
     * const dictionaryEntry = await prisma.dictionaryEntry.upsert({
     *   create: {
     *     // ... data to create a DictionaryEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DictionaryEntry we want to update
     *   }
     * })
     */
    upsert<T extends DictionaryEntryUpsertArgs>(args: SelectSubset<T, DictionaryEntryUpsertArgs<ExtArgs>>): Prisma__DictionaryEntryClient<$Result.GetResult<Prisma.$DictionaryEntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DictionaryEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DictionaryEntryCountArgs} args - Arguments to filter DictionaryEntries to count.
     * @example
     * // Count the number of DictionaryEntries
     * const count = await prisma.dictionaryEntry.count({
     *   where: {
     *     // ... the filter for the DictionaryEntries we want to count
     *   }
     * })
    **/
    count<T extends DictionaryEntryCountArgs>(
      args?: Subset<T, DictionaryEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DictionaryEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DictionaryEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DictionaryEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DictionaryEntryAggregateArgs>(args: Subset<T, DictionaryEntryAggregateArgs>): Prisma.PrismaPromise<GetDictionaryEntryAggregateType<T>>

    /**
     * Group by DictionaryEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DictionaryEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DictionaryEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DictionaryEntryGroupByArgs['orderBy'] }
        : { orderBy?: DictionaryEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DictionaryEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDictionaryEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DictionaryEntry model
   */
  readonly fields: DictionaryEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DictionaryEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DictionaryEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usages<T extends DictionaryEntry$usagesArgs<ExtArgs> = {}>(args?: Subset<T, DictionaryEntry$usagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WordUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    variations<T extends DictionaryEntry$variationsArgs<ExtArgs> = {}>(args?: Subset<T, DictionaryEntry$variationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WordVariationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DictionaryEntry model
   */
  interface DictionaryEntryFieldRefs {
    readonly id: FieldRef<"DictionaryEntry", 'Int'>
    readonly word: FieldRef<"DictionaryEntry", 'String'>
    readonly createdAt: FieldRef<"DictionaryEntry", 'DateTime'>
    readonly updatedAt: FieldRef<"DictionaryEntry", 'DateTime'>
    readonly notes: FieldRef<"DictionaryEntry", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DictionaryEntry findUnique
   */
  export type DictionaryEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DictionaryEntry
     */
    select?: DictionaryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DictionaryEntry
     */
    omit?: DictionaryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DictionaryEntryInclude<ExtArgs> | null
    /**
     * Filter, which DictionaryEntry to fetch.
     */
    where: DictionaryEntryWhereUniqueInput
  }

  /**
   * DictionaryEntry findUniqueOrThrow
   */
  export type DictionaryEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DictionaryEntry
     */
    select?: DictionaryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DictionaryEntry
     */
    omit?: DictionaryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DictionaryEntryInclude<ExtArgs> | null
    /**
     * Filter, which DictionaryEntry to fetch.
     */
    where: DictionaryEntryWhereUniqueInput
  }

  /**
   * DictionaryEntry findFirst
   */
  export type DictionaryEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DictionaryEntry
     */
    select?: DictionaryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DictionaryEntry
     */
    omit?: DictionaryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DictionaryEntryInclude<ExtArgs> | null
    /**
     * Filter, which DictionaryEntry to fetch.
     */
    where?: DictionaryEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DictionaryEntries to fetch.
     */
    orderBy?: DictionaryEntryOrderByWithRelationInput | DictionaryEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DictionaryEntries.
     */
    cursor?: DictionaryEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DictionaryEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DictionaryEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DictionaryEntries.
     */
    distinct?: DictionaryEntryScalarFieldEnum | DictionaryEntryScalarFieldEnum[]
  }

  /**
   * DictionaryEntry findFirstOrThrow
   */
  export type DictionaryEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DictionaryEntry
     */
    select?: DictionaryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DictionaryEntry
     */
    omit?: DictionaryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DictionaryEntryInclude<ExtArgs> | null
    /**
     * Filter, which DictionaryEntry to fetch.
     */
    where?: DictionaryEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DictionaryEntries to fetch.
     */
    orderBy?: DictionaryEntryOrderByWithRelationInput | DictionaryEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DictionaryEntries.
     */
    cursor?: DictionaryEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DictionaryEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DictionaryEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DictionaryEntries.
     */
    distinct?: DictionaryEntryScalarFieldEnum | DictionaryEntryScalarFieldEnum[]
  }

  /**
   * DictionaryEntry findMany
   */
  export type DictionaryEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DictionaryEntry
     */
    select?: DictionaryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DictionaryEntry
     */
    omit?: DictionaryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DictionaryEntryInclude<ExtArgs> | null
    /**
     * Filter, which DictionaryEntries to fetch.
     */
    where?: DictionaryEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DictionaryEntries to fetch.
     */
    orderBy?: DictionaryEntryOrderByWithRelationInput | DictionaryEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DictionaryEntries.
     */
    cursor?: DictionaryEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DictionaryEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DictionaryEntries.
     */
    skip?: number
    distinct?: DictionaryEntryScalarFieldEnum | DictionaryEntryScalarFieldEnum[]
  }

  /**
   * DictionaryEntry create
   */
  export type DictionaryEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DictionaryEntry
     */
    select?: DictionaryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DictionaryEntry
     */
    omit?: DictionaryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DictionaryEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a DictionaryEntry.
     */
    data: XOR<DictionaryEntryCreateInput, DictionaryEntryUncheckedCreateInput>
  }

  /**
   * DictionaryEntry createMany
   */
  export type DictionaryEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DictionaryEntries.
     */
    data: DictionaryEntryCreateManyInput | DictionaryEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DictionaryEntry createManyAndReturn
   */
  export type DictionaryEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DictionaryEntry
     */
    select?: DictionaryEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DictionaryEntry
     */
    omit?: DictionaryEntryOmit<ExtArgs> | null
    /**
     * The data used to create many DictionaryEntries.
     */
    data: DictionaryEntryCreateManyInput | DictionaryEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DictionaryEntry update
   */
  export type DictionaryEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DictionaryEntry
     */
    select?: DictionaryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DictionaryEntry
     */
    omit?: DictionaryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DictionaryEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a DictionaryEntry.
     */
    data: XOR<DictionaryEntryUpdateInput, DictionaryEntryUncheckedUpdateInput>
    /**
     * Choose, which DictionaryEntry to update.
     */
    where: DictionaryEntryWhereUniqueInput
  }

  /**
   * DictionaryEntry updateMany
   */
  export type DictionaryEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DictionaryEntries.
     */
    data: XOR<DictionaryEntryUpdateManyMutationInput, DictionaryEntryUncheckedUpdateManyInput>
    /**
     * Filter which DictionaryEntries to update
     */
    where?: DictionaryEntryWhereInput
    /**
     * Limit how many DictionaryEntries to update.
     */
    limit?: number
  }

  /**
   * DictionaryEntry updateManyAndReturn
   */
  export type DictionaryEntryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DictionaryEntry
     */
    select?: DictionaryEntrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DictionaryEntry
     */
    omit?: DictionaryEntryOmit<ExtArgs> | null
    /**
     * The data used to update DictionaryEntries.
     */
    data: XOR<DictionaryEntryUpdateManyMutationInput, DictionaryEntryUncheckedUpdateManyInput>
    /**
     * Filter which DictionaryEntries to update
     */
    where?: DictionaryEntryWhereInput
    /**
     * Limit how many DictionaryEntries to update.
     */
    limit?: number
  }

  /**
   * DictionaryEntry upsert
   */
  export type DictionaryEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DictionaryEntry
     */
    select?: DictionaryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DictionaryEntry
     */
    omit?: DictionaryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DictionaryEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the DictionaryEntry to update in case it exists.
     */
    where: DictionaryEntryWhereUniqueInput
    /**
     * In case the DictionaryEntry found by the `where` argument doesn't exist, create a new DictionaryEntry with this data.
     */
    create: XOR<DictionaryEntryCreateInput, DictionaryEntryUncheckedCreateInput>
    /**
     * In case the DictionaryEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DictionaryEntryUpdateInput, DictionaryEntryUncheckedUpdateInput>
  }

  /**
   * DictionaryEntry delete
   */
  export type DictionaryEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DictionaryEntry
     */
    select?: DictionaryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DictionaryEntry
     */
    omit?: DictionaryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DictionaryEntryInclude<ExtArgs> | null
    /**
     * Filter which DictionaryEntry to delete.
     */
    where: DictionaryEntryWhereUniqueInput
  }

  /**
   * DictionaryEntry deleteMany
   */
  export type DictionaryEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DictionaryEntries to delete
     */
    where?: DictionaryEntryWhereInput
    /**
     * Limit how many DictionaryEntries to delete.
     */
    limit?: number
  }

  /**
   * DictionaryEntry.usages
   */
  export type DictionaryEntry$usagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordUsage
     */
    select?: WordUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordUsage
     */
    omit?: WordUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordUsageInclude<ExtArgs> | null
    where?: WordUsageWhereInput
    orderBy?: WordUsageOrderByWithRelationInput | WordUsageOrderByWithRelationInput[]
    cursor?: WordUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WordUsageScalarFieldEnum | WordUsageScalarFieldEnum[]
  }

  /**
   * DictionaryEntry.variations
   */
  export type DictionaryEntry$variationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordVariation
     */
    select?: WordVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordVariation
     */
    omit?: WordVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordVariationInclude<ExtArgs> | null
    where?: WordVariationWhereInput
    orderBy?: WordVariationOrderByWithRelationInput | WordVariationOrderByWithRelationInput[]
    cursor?: WordVariationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WordVariationScalarFieldEnum | WordVariationScalarFieldEnum[]
  }

  /**
   * DictionaryEntry without action
   */
  export type DictionaryEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DictionaryEntry
     */
    select?: DictionaryEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DictionaryEntry
     */
    omit?: DictionaryEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DictionaryEntryInclude<ExtArgs> | null
  }


  /**
   * Model WordUsage
   */

  export type AggregateWordUsage = {
    _count: WordUsageCountAggregateOutputType | null
    _avg: WordUsageAvgAggregateOutputType | null
    _sum: WordUsageSumAggregateOutputType | null
    _min: WordUsageMinAggregateOutputType | null
    _max: WordUsageMaxAggregateOutputType | null
  }

  export type WordUsageAvgAggregateOutputType = {
    id: number | null
    entryId: number | null
  }

  export type WordUsageSumAggregateOutputType = {
    id: number | null
    entryId: number | null
  }

  export type WordUsageMinAggregateOutputType = {
    id: number | null
    entryId: number | null
    partOfSpeech: string | null
    meaning: string | null
  }

  export type WordUsageMaxAggregateOutputType = {
    id: number | null
    entryId: number | null
    partOfSpeech: string | null
    meaning: string | null
  }

  export type WordUsageCountAggregateOutputType = {
    id: number
    entryId: number
    partOfSpeech: number
    meaning: number
    _all: number
  }


  export type WordUsageAvgAggregateInputType = {
    id?: true
    entryId?: true
  }

  export type WordUsageSumAggregateInputType = {
    id?: true
    entryId?: true
  }

  export type WordUsageMinAggregateInputType = {
    id?: true
    entryId?: true
    partOfSpeech?: true
    meaning?: true
  }

  export type WordUsageMaxAggregateInputType = {
    id?: true
    entryId?: true
    partOfSpeech?: true
    meaning?: true
  }

  export type WordUsageCountAggregateInputType = {
    id?: true
    entryId?: true
    partOfSpeech?: true
    meaning?: true
    _all?: true
  }

  export type WordUsageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WordUsage to aggregate.
     */
    where?: WordUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WordUsages to fetch.
     */
    orderBy?: WordUsageOrderByWithRelationInput | WordUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WordUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WordUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WordUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WordUsages
    **/
    _count?: true | WordUsageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WordUsageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WordUsageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WordUsageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WordUsageMaxAggregateInputType
  }

  export type GetWordUsageAggregateType<T extends WordUsageAggregateArgs> = {
        [P in keyof T & keyof AggregateWordUsage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWordUsage[P]>
      : GetScalarType<T[P], AggregateWordUsage[P]>
  }




  export type WordUsageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WordUsageWhereInput
    orderBy?: WordUsageOrderByWithAggregationInput | WordUsageOrderByWithAggregationInput[]
    by: WordUsageScalarFieldEnum[] | WordUsageScalarFieldEnum
    having?: WordUsageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WordUsageCountAggregateInputType | true
    _avg?: WordUsageAvgAggregateInputType
    _sum?: WordUsageSumAggregateInputType
    _min?: WordUsageMinAggregateInputType
    _max?: WordUsageMaxAggregateInputType
  }

  export type WordUsageGroupByOutputType = {
    id: number
    entryId: number
    partOfSpeech: string
    meaning: string
    _count: WordUsageCountAggregateOutputType | null
    _avg: WordUsageAvgAggregateOutputType | null
    _sum: WordUsageSumAggregateOutputType | null
    _min: WordUsageMinAggregateOutputType | null
    _max: WordUsageMaxAggregateOutputType | null
  }

  type GetWordUsageGroupByPayload<T extends WordUsageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WordUsageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WordUsageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WordUsageGroupByOutputType[P]>
            : GetScalarType<T[P], WordUsageGroupByOutputType[P]>
        }
      >
    >


  export type WordUsageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entryId?: boolean
    partOfSpeech?: boolean
    meaning?: boolean
    consonantPhonemes?: boolean | WordUsage$consonantPhonemesArgs<ExtArgs>
    examples?: boolean | WordUsage$examplesArgs<ExtArgs>
    lexicalSets?: boolean | WordUsage$lexicalSetsArgs<ExtArgs>
    pronunciations?: boolean | WordUsage$pronunciationsArgs<ExtArgs>
    spellingPatterns?: boolean | WordUsage$spellingPatternsArgs<ExtArgs>
    entry?: boolean | DictionaryEntryDefaultArgs<ExtArgs>
    _count?: boolean | WordUsageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wordUsage"]>

  export type WordUsageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entryId?: boolean
    partOfSpeech?: boolean
    meaning?: boolean
    entry?: boolean | DictionaryEntryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wordUsage"]>

  export type WordUsageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entryId?: boolean
    partOfSpeech?: boolean
    meaning?: boolean
    entry?: boolean | DictionaryEntryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wordUsage"]>

  export type WordUsageSelectScalar = {
    id?: boolean
    entryId?: boolean
    partOfSpeech?: boolean
    meaning?: boolean
  }

  export type WordUsageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "entryId" | "partOfSpeech" | "meaning", ExtArgs["result"]["wordUsage"]>
  export type WordUsageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consonantPhonemes?: boolean | WordUsage$consonantPhonemesArgs<ExtArgs>
    examples?: boolean | WordUsage$examplesArgs<ExtArgs>
    lexicalSets?: boolean | WordUsage$lexicalSetsArgs<ExtArgs>
    pronunciations?: boolean | WordUsage$pronunciationsArgs<ExtArgs>
    spellingPatterns?: boolean | WordUsage$spellingPatternsArgs<ExtArgs>
    entry?: boolean | DictionaryEntryDefaultArgs<ExtArgs>
    _count?: boolean | WordUsageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WordUsageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entry?: boolean | DictionaryEntryDefaultArgs<ExtArgs>
  }
  export type WordUsageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entry?: boolean | DictionaryEntryDefaultArgs<ExtArgs>
  }

  export type $WordUsagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WordUsage"
    objects: {
      consonantPhonemes: Prisma.$ConsonantPhonemeUsagePayload<ExtArgs>[]
      examples: Prisma.$ExamplePayload<ExtArgs>[]
      lexicalSets: Prisma.$LexicalSetUsagePayload<ExtArgs>[]
      pronunciations: Prisma.$PronunciationPayload<ExtArgs>[]
      spellingPatterns: Prisma.$SpellingPatternPayload<ExtArgs>[]
      entry: Prisma.$DictionaryEntryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      entryId: number
      partOfSpeech: string
      meaning: string
    }, ExtArgs["result"]["wordUsage"]>
    composites: {}
  }

  type WordUsageGetPayload<S extends boolean | null | undefined | WordUsageDefaultArgs> = $Result.GetResult<Prisma.$WordUsagePayload, S>

  type WordUsageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WordUsageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WordUsageCountAggregateInputType | true
    }

  export interface WordUsageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WordUsage'], meta: { name: 'WordUsage' } }
    /**
     * Find zero or one WordUsage that matches the filter.
     * @param {WordUsageFindUniqueArgs} args - Arguments to find a WordUsage
     * @example
     * // Get one WordUsage
     * const wordUsage = await prisma.wordUsage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WordUsageFindUniqueArgs>(args: SelectSubset<T, WordUsageFindUniqueArgs<ExtArgs>>): Prisma__WordUsageClient<$Result.GetResult<Prisma.$WordUsagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WordUsage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WordUsageFindUniqueOrThrowArgs} args - Arguments to find a WordUsage
     * @example
     * // Get one WordUsage
     * const wordUsage = await prisma.wordUsage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WordUsageFindUniqueOrThrowArgs>(args: SelectSubset<T, WordUsageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WordUsageClient<$Result.GetResult<Prisma.$WordUsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WordUsage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordUsageFindFirstArgs} args - Arguments to find a WordUsage
     * @example
     * // Get one WordUsage
     * const wordUsage = await prisma.wordUsage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WordUsageFindFirstArgs>(args?: SelectSubset<T, WordUsageFindFirstArgs<ExtArgs>>): Prisma__WordUsageClient<$Result.GetResult<Prisma.$WordUsagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WordUsage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordUsageFindFirstOrThrowArgs} args - Arguments to find a WordUsage
     * @example
     * // Get one WordUsage
     * const wordUsage = await prisma.wordUsage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WordUsageFindFirstOrThrowArgs>(args?: SelectSubset<T, WordUsageFindFirstOrThrowArgs<ExtArgs>>): Prisma__WordUsageClient<$Result.GetResult<Prisma.$WordUsagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WordUsages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordUsageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WordUsages
     * const wordUsages = await prisma.wordUsage.findMany()
     * 
     * // Get first 10 WordUsages
     * const wordUsages = await prisma.wordUsage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wordUsageWithIdOnly = await prisma.wordUsage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WordUsageFindManyArgs>(args?: SelectSubset<T, WordUsageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WordUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WordUsage.
     * @param {WordUsageCreateArgs} args - Arguments to create a WordUsage.
     * @example
     * // Create one WordUsage
     * const WordUsage = await prisma.wordUsage.create({
     *   data: {
     *     // ... data to create a WordUsage
     *   }
     * })
     * 
     */
    create<T extends WordUsageCreateArgs>(args: SelectSubset<T, WordUsageCreateArgs<ExtArgs>>): Prisma__WordUsageClient<$Result.GetResult<Prisma.$WordUsagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WordUsages.
     * @param {WordUsageCreateManyArgs} args - Arguments to create many WordUsages.
     * @example
     * // Create many WordUsages
     * const wordUsage = await prisma.wordUsage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WordUsageCreateManyArgs>(args?: SelectSubset<T, WordUsageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WordUsages and returns the data saved in the database.
     * @param {WordUsageCreateManyAndReturnArgs} args - Arguments to create many WordUsages.
     * @example
     * // Create many WordUsages
     * const wordUsage = await prisma.wordUsage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WordUsages and only return the `id`
     * const wordUsageWithIdOnly = await prisma.wordUsage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WordUsageCreateManyAndReturnArgs>(args?: SelectSubset<T, WordUsageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WordUsagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WordUsage.
     * @param {WordUsageDeleteArgs} args - Arguments to delete one WordUsage.
     * @example
     * // Delete one WordUsage
     * const WordUsage = await prisma.wordUsage.delete({
     *   where: {
     *     // ... filter to delete one WordUsage
     *   }
     * })
     * 
     */
    delete<T extends WordUsageDeleteArgs>(args: SelectSubset<T, WordUsageDeleteArgs<ExtArgs>>): Prisma__WordUsageClient<$Result.GetResult<Prisma.$WordUsagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WordUsage.
     * @param {WordUsageUpdateArgs} args - Arguments to update one WordUsage.
     * @example
     * // Update one WordUsage
     * const wordUsage = await prisma.wordUsage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WordUsageUpdateArgs>(args: SelectSubset<T, WordUsageUpdateArgs<ExtArgs>>): Prisma__WordUsageClient<$Result.GetResult<Prisma.$WordUsagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WordUsages.
     * @param {WordUsageDeleteManyArgs} args - Arguments to filter WordUsages to delete.
     * @example
     * // Delete a few WordUsages
     * const { count } = await prisma.wordUsage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WordUsageDeleteManyArgs>(args?: SelectSubset<T, WordUsageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WordUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordUsageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WordUsages
     * const wordUsage = await prisma.wordUsage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WordUsageUpdateManyArgs>(args: SelectSubset<T, WordUsageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WordUsages and returns the data updated in the database.
     * @param {WordUsageUpdateManyAndReturnArgs} args - Arguments to update many WordUsages.
     * @example
     * // Update many WordUsages
     * const wordUsage = await prisma.wordUsage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WordUsages and only return the `id`
     * const wordUsageWithIdOnly = await prisma.wordUsage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WordUsageUpdateManyAndReturnArgs>(args: SelectSubset<T, WordUsageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WordUsagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WordUsage.
     * @param {WordUsageUpsertArgs} args - Arguments to update or create a WordUsage.
     * @example
     * // Update or create a WordUsage
     * const wordUsage = await prisma.wordUsage.upsert({
     *   create: {
     *     // ... data to create a WordUsage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WordUsage we want to update
     *   }
     * })
     */
    upsert<T extends WordUsageUpsertArgs>(args: SelectSubset<T, WordUsageUpsertArgs<ExtArgs>>): Prisma__WordUsageClient<$Result.GetResult<Prisma.$WordUsagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WordUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordUsageCountArgs} args - Arguments to filter WordUsages to count.
     * @example
     * // Count the number of WordUsages
     * const count = await prisma.wordUsage.count({
     *   where: {
     *     // ... the filter for the WordUsages we want to count
     *   }
     * })
    **/
    count<T extends WordUsageCountArgs>(
      args?: Subset<T, WordUsageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WordUsageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WordUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WordUsageAggregateArgs>(args: Subset<T, WordUsageAggregateArgs>): Prisma.PrismaPromise<GetWordUsageAggregateType<T>>

    /**
     * Group by WordUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordUsageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WordUsageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WordUsageGroupByArgs['orderBy'] }
        : { orderBy?: WordUsageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WordUsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWordUsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WordUsage model
   */
  readonly fields: WordUsageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WordUsage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WordUsageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consonantPhonemes<T extends WordUsage$consonantPhonemesArgs<ExtArgs> = {}>(args?: Subset<T, WordUsage$consonantPhonemesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsonantPhonemeUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    examples<T extends WordUsage$examplesArgs<ExtArgs> = {}>(args?: Subset<T, WordUsage$examplesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lexicalSets<T extends WordUsage$lexicalSetsArgs<ExtArgs> = {}>(args?: Subset<T, WordUsage$lexicalSetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LexicalSetUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pronunciations<T extends WordUsage$pronunciationsArgs<ExtArgs> = {}>(args?: Subset<T, WordUsage$pronunciationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PronunciationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    spellingPatterns<T extends WordUsage$spellingPatternsArgs<ExtArgs> = {}>(args?: Subset<T, WordUsage$spellingPatternsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpellingPatternPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    entry<T extends DictionaryEntryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DictionaryEntryDefaultArgs<ExtArgs>>): Prisma__DictionaryEntryClient<$Result.GetResult<Prisma.$DictionaryEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WordUsage model
   */
  interface WordUsageFieldRefs {
    readonly id: FieldRef<"WordUsage", 'Int'>
    readonly entryId: FieldRef<"WordUsage", 'Int'>
    readonly partOfSpeech: FieldRef<"WordUsage", 'String'>
    readonly meaning: FieldRef<"WordUsage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WordUsage findUnique
   */
  export type WordUsageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordUsage
     */
    select?: WordUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordUsage
     */
    omit?: WordUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordUsageInclude<ExtArgs> | null
    /**
     * Filter, which WordUsage to fetch.
     */
    where: WordUsageWhereUniqueInput
  }

  /**
   * WordUsage findUniqueOrThrow
   */
  export type WordUsageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordUsage
     */
    select?: WordUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordUsage
     */
    omit?: WordUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordUsageInclude<ExtArgs> | null
    /**
     * Filter, which WordUsage to fetch.
     */
    where: WordUsageWhereUniqueInput
  }

  /**
   * WordUsage findFirst
   */
  export type WordUsageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordUsage
     */
    select?: WordUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordUsage
     */
    omit?: WordUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordUsageInclude<ExtArgs> | null
    /**
     * Filter, which WordUsage to fetch.
     */
    where?: WordUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WordUsages to fetch.
     */
    orderBy?: WordUsageOrderByWithRelationInput | WordUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WordUsages.
     */
    cursor?: WordUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WordUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WordUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WordUsages.
     */
    distinct?: WordUsageScalarFieldEnum | WordUsageScalarFieldEnum[]
  }

  /**
   * WordUsage findFirstOrThrow
   */
  export type WordUsageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordUsage
     */
    select?: WordUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordUsage
     */
    omit?: WordUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordUsageInclude<ExtArgs> | null
    /**
     * Filter, which WordUsage to fetch.
     */
    where?: WordUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WordUsages to fetch.
     */
    orderBy?: WordUsageOrderByWithRelationInput | WordUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WordUsages.
     */
    cursor?: WordUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WordUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WordUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WordUsages.
     */
    distinct?: WordUsageScalarFieldEnum | WordUsageScalarFieldEnum[]
  }

  /**
   * WordUsage findMany
   */
  export type WordUsageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordUsage
     */
    select?: WordUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordUsage
     */
    omit?: WordUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordUsageInclude<ExtArgs> | null
    /**
     * Filter, which WordUsages to fetch.
     */
    where?: WordUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WordUsages to fetch.
     */
    orderBy?: WordUsageOrderByWithRelationInput | WordUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WordUsages.
     */
    cursor?: WordUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WordUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WordUsages.
     */
    skip?: number
    distinct?: WordUsageScalarFieldEnum | WordUsageScalarFieldEnum[]
  }

  /**
   * WordUsage create
   */
  export type WordUsageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordUsage
     */
    select?: WordUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordUsage
     */
    omit?: WordUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordUsageInclude<ExtArgs> | null
    /**
     * The data needed to create a WordUsage.
     */
    data: XOR<WordUsageCreateInput, WordUsageUncheckedCreateInput>
  }

  /**
   * WordUsage createMany
   */
  export type WordUsageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WordUsages.
     */
    data: WordUsageCreateManyInput | WordUsageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WordUsage createManyAndReturn
   */
  export type WordUsageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordUsage
     */
    select?: WordUsageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WordUsage
     */
    omit?: WordUsageOmit<ExtArgs> | null
    /**
     * The data used to create many WordUsages.
     */
    data: WordUsageCreateManyInput | WordUsageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordUsageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WordUsage update
   */
  export type WordUsageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordUsage
     */
    select?: WordUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordUsage
     */
    omit?: WordUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordUsageInclude<ExtArgs> | null
    /**
     * The data needed to update a WordUsage.
     */
    data: XOR<WordUsageUpdateInput, WordUsageUncheckedUpdateInput>
    /**
     * Choose, which WordUsage to update.
     */
    where: WordUsageWhereUniqueInput
  }

  /**
   * WordUsage updateMany
   */
  export type WordUsageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WordUsages.
     */
    data: XOR<WordUsageUpdateManyMutationInput, WordUsageUncheckedUpdateManyInput>
    /**
     * Filter which WordUsages to update
     */
    where?: WordUsageWhereInput
    /**
     * Limit how many WordUsages to update.
     */
    limit?: number
  }

  /**
   * WordUsage updateManyAndReturn
   */
  export type WordUsageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordUsage
     */
    select?: WordUsageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WordUsage
     */
    omit?: WordUsageOmit<ExtArgs> | null
    /**
     * The data used to update WordUsages.
     */
    data: XOR<WordUsageUpdateManyMutationInput, WordUsageUncheckedUpdateManyInput>
    /**
     * Filter which WordUsages to update
     */
    where?: WordUsageWhereInput
    /**
     * Limit how many WordUsages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordUsageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WordUsage upsert
   */
  export type WordUsageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordUsage
     */
    select?: WordUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordUsage
     */
    omit?: WordUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordUsageInclude<ExtArgs> | null
    /**
     * The filter to search for the WordUsage to update in case it exists.
     */
    where: WordUsageWhereUniqueInput
    /**
     * In case the WordUsage found by the `where` argument doesn't exist, create a new WordUsage with this data.
     */
    create: XOR<WordUsageCreateInput, WordUsageUncheckedCreateInput>
    /**
     * In case the WordUsage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WordUsageUpdateInput, WordUsageUncheckedUpdateInput>
  }

  /**
   * WordUsage delete
   */
  export type WordUsageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordUsage
     */
    select?: WordUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordUsage
     */
    omit?: WordUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordUsageInclude<ExtArgs> | null
    /**
     * Filter which WordUsage to delete.
     */
    where: WordUsageWhereUniqueInput
  }

  /**
   * WordUsage deleteMany
   */
  export type WordUsageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WordUsages to delete
     */
    where?: WordUsageWhereInput
    /**
     * Limit how many WordUsages to delete.
     */
    limit?: number
  }

  /**
   * WordUsage.consonantPhonemes
   */
  export type WordUsage$consonantPhonemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhonemeUsage
     */
    select?: ConsonantPhonemeUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhonemeUsage
     */
    omit?: ConsonantPhonemeUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeUsageInclude<ExtArgs> | null
    where?: ConsonantPhonemeUsageWhereInput
    orderBy?: ConsonantPhonemeUsageOrderByWithRelationInput | ConsonantPhonemeUsageOrderByWithRelationInput[]
    cursor?: ConsonantPhonemeUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsonantPhonemeUsageScalarFieldEnum | ConsonantPhonemeUsageScalarFieldEnum[]
  }

  /**
   * WordUsage.examples
   */
  export type WordUsage$examplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Example
     */
    omit?: ExampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExampleInclude<ExtArgs> | null
    where?: ExampleWhereInput
    orderBy?: ExampleOrderByWithRelationInput | ExampleOrderByWithRelationInput[]
    cursor?: ExampleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExampleScalarFieldEnum | ExampleScalarFieldEnum[]
  }

  /**
   * WordUsage.lexicalSets
   */
  export type WordUsage$lexicalSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSetUsage
     */
    select?: LexicalSetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSetUsage
     */
    omit?: LexicalSetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetUsageInclude<ExtArgs> | null
    where?: LexicalSetUsageWhereInput
    orderBy?: LexicalSetUsageOrderByWithRelationInput | LexicalSetUsageOrderByWithRelationInput[]
    cursor?: LexicalSetUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LexicalSetUsageScalarFieldEnum | LexicalSetUsageScalarFieldEnum[]
  }

  /**
   * WordUsage.pronunciations
   */
  export type WordUsage$pronunciationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pronunciation
     */
    select?: PronunciationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pronunciation
     */
    omit?: PronunciationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronunciationInclude<ExtArgs> | null
    where?: PronunciationWhereInput
    orderBy?: PronunciationOrderByWithRelationInput | PronunciationOrderByWithRelationInput[]
    cursor?: PronunciationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PronunciationScalarFieldEnum | PronunciationScalarFieldEnum[]
  }

  /**
   * WordUsage.spellingPatterns
   */
  export type WordUsage$spellingPatternsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpellingPattern
     */
    select?: SpellingPatternSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpellingPattern
     */
    omit?: SpellingPatternOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellingPatternInclude<ExtArgs> | null
    where?: SpellingPatternWhereInput
    orderBy?: SpellingPatternOrderByWithRelationInput | SpellingPatternOrderByWithRelationInput[]
    cursor?: SpellingPatternWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpellingPatternScalarFieldEnum | SpellingPatternScalarFieldEnum[]
  }

  /**
   * WordUsage without action
   */
  export type WordUsageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordUsage
     */
    select?: WordUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordUsage
     */
    omit?: WordUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordUsageInclude<ExtArgs> | null
  }


  /**
   * Model Pronunciation
   */

  export type AggregatePronunciation = {
    _count: PronunciationCountAggregateOutputType | null
    _avg: PronunciationAvgAggregateOutputType | null
    _sum: PronunciationSumAggregateOutputType | null
    _min: PronunciationMinAggregateOutputType | null
    _max: PronunciationMaxAggregateOutputType | null
  }

  export type PronunciationAvgAggregateOutputType = {
    id: number | null
    usageId: number | null
    order: number | null
  }

  export type PronunciationSumAggregateOutputType = {
    id: number | null
    usageId: number | null
    order: number | null
  }

  export type PronunciationMinAggregateOutputType = {
    id: number | null
    usageId: number | null
    phonemic: string | null
    broadIPA: string | null
    narrowIPA: string | null
    audioUrl: string | null
    speaker: string | null
    dialect: string | null
    isPrimary: boolean | null
    notes: string | null
    order: number | null
  }

  export type PronunciationMaxAggregateOutputType = {
    id: number | null
    usageId: number | null
    phonemic: string | null
    broadIPA: string | null
    narrowIPA: string | null
    audioUrl: string | null
    speaker: string | null
    dialect: string | null
    isPrimary: boolean | null
    notes: string | null
    order: number | null
  }

  export type PronunciationCountAggregateOutputType = {
    id: number
    usageId: number
    phonemic: number
    broadIPA: number
    narrowIPA: number
    audioUrl: number
    speaker: number
    dialect: number
    isPrimary: number
    notes: number
    order: number
    _all: number
  }


  export type PronunciationAvgAggregateInputType = {
    id?: true
    usageId?: true
    order?: true
  }

  export type PronunciationSumAggregateInputType = {
    id?: true
    usageId?: true
    order?: true
  }

  export type PronunciationMinAggregateInputType = {
    id?: true
    usageId?: true
    phonemic?: true
    broadIPA?: true
    narrowIPA?: true
    audioUrl?: true
    speaker?: true
    dialect?: true
    isPrimary?: true
    notes?: true
    order?: true
  }

  export type PronunciationMaxAggregateInputType = {
    id?: true
    usageId?: true
    phonemic?: true
    broadIPA?: true
    narrowIPA?: true
    audioUrl?: true
    speaker?: true
    dialect?: true
    isPrimary?: true
    notes?: true
    order?: true
  }

  export type PronunciationCountAggregateInputType = {
    id?: true
    usageId?: true
    phonemic?: true
    broadIPA?: true
    narrowIPA?: true
    audioUrl?: true
    speaker?: true
    dialect?: true
    isPrimary?: true
    notes?: true
    order?: true
    _all?: true
  }

  export type PronunciationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pronunciation to aggregate.
     */
    where?: PronunciationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pronunciations to fetch.
     */
    orderBy?: PronunciationOrderByWithRelationInput | PronunciationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PronunciationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pronunciations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pronunciations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pronunciations
    **/
    _count?: true | PronunciationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PronunciationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PronunciationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PronunciationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PronunciationMaxAggregateInputType
  }

  export type GetPronunciationAggregateType<T extends PronunciationAggregateArgs> = {
        [P in keyof T & keyof AggregatePronunciation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePronunciation[P]>
      : GetScalarType<T[P], AggregatePronunciation[P]>
  }




  export type PronunciationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PronunciationWhereInput
    orderBy?: PronunciationOrderByWithAggregationInput | PronunciationOrderByWithAggregationInput[]
    by: PronunciationScalarFieldEnum[] | PronunciationScalarFieldEnum
    having?: PronunciationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PronunciationCountAggregateInputType | true
    _avg?: PronunciationAvgAggregateInputType
    _sum?: PronunciationSumAggregateInputType
    _min?: PronunciationMinAggregateInputType
    _max?: PronunciationMaxAggregateInputType
  }

  export type PronunciationGroupByOutputType = {
    id: number
    usageId: number
    phonemic: string | null
    broadIPA: string | null
    narrowIPA: string | null
    audioUrl: string | null
    speaker: string | null
    dialect: string | null
    isPrimary: boolean
    notes: string | null
    order: number | null
    _count: PronunciationCountAggregateOutputType | null
    _avg: PronunciationAvgAggregateOutputType | null
    _sum: PronunciationSumAggregateOutputType | null
    _min: PronunciationMinAggregateOutputType | null
    _max: PronunciationMaxAggregateOutputType | null
  }

  type GetPronunciationGroupByPayload<T extends PronunciationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PronunciationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PronunciationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PronunciationGroupByOutputType[P]>
            : GetScalarType<T[P], PronunciationGroupByOutputType[P]>
        }
      >
    >


  export type PronunciationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usageId?: boolean
    phonemic?: boolean
    broadIPA?: boolean
    narrowIPA?: boolean
    audioUrl?: boolean
    speaker?: boolean
    dialect?: boolean
    isPrimary?: boolean
    notes?: boolean
    order?: boolean
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pronunciation"]>

  export type PronunciationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usageId?: boolean
    phonemic?: boolean
    broadIPA?: boolean
    narrowIPA?: boolean
    audioUrl?: boolean
    speaker?: boolean
    dialect?: boolean
    isPrimary?: boolean
    notes?: boolean
    order?: boolean
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pronunciation"]>

  export type PronunciationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usageId?: boolean
    phonemic?: boolean
    broadIPA?: boolean
    narrowIPA?: boolean
    audioUrl?: boolean
    speaker?: boolean
    dialect?: boolean
    isPrimary?: boolean
    notes?: boolean
    order?: boolean
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pronunciation"]>

  export type PronunciationSelectScalar = {
    id?: boolean
    usageId?: boolean
    phonemic?: boolean
    broadIPA?: boolean
    narrowIPA?: boolean
    audioUrl?: boolean
    speaker?: boolean
    dialect?: boolean
    isPrimary?: boolean
    notes?: boolean
    order?: boolean
  }

  export type PronunciationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "usageId" | "phonemic" | "broadIPA" | "narrowIPA" | "audioUrl" | "speaker" | "dialect" | "isPrimary" | "notes" | "order", ExtArgs["result"]["pronunciation"]>
  export type PronunciationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }
  export type PronunciationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }
  export type PronunciationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }

  export type $PronunciationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pronunciation"
    objects: {
      wordUsage: Prisma.$WordUsagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usageId: number
      phonemic: string | null
      broadIPA: string | null
      narrowIPA: string | null
      audioUrl: string | null
      speaker: string | null
      dialect: string | null
      isPrimary: boolean
      notes: string | null
      order: number | null
    }, ExtArgs["result"]["pronunciation"]>
    composites: {}
  }

  type PronunciationGetPayload<S extends boolean | null | undefined | PronunciationDefaultArgs> = $Result.GetResult<Prisma.$PronunciationPayload, S>

  type PronunciationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PronunciationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PronunciationCountAggregateInputType | true
    }

  export interface PronunciationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pronunciation'], meta: { name: 'Pronunciation' } }
    /**
     * Find zero or one Pronunciation that matches the filter.
     * @param {PronunciationFindUniqueArgs} args - Arguments to find a Pronunciation
     * @example
     * // Get one Pronunciation
     * const pronunciation = await prisma.pronunciation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PronunciationFindUniqueArgs>(args: SelectSubset<T, PronunciationFindUniqueArgs<ExtArgs>>): Prisma__PronunciationClient<$Result.GetResult<Prisma.$PronunciationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Pronunciation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PronunciationFindUniqueOrThrowArgs} args - Arguments to find a Pronunciation
     * @example
     * // Get one Pronunciation
     * const pronunciation = await prisma.pronunciation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PronunciationFindUniqueOrThrowArgs>(args: SelectSubset<T, PronunciationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PronunciationClient<$Result.GetResult<Prisma.$PronunciationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pronunciation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PronunciationFindFirstArgs} args - Arguments to find a Pronunciation
     * @example
     * // Get one Pronunciation
     * const pronunciation = await prisma.pronunciation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PronunciationFindFirstArgs>(args?: SelectSubset<T, PronunciationFindFirstArgs<ExtArgs>>): Prisma__PronunciationClient<$Result.GetResult<Prisma.$PronunciationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pronunciation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PronunciationFindFirstOrThrowArgs} args - Arguments to find a Pronunciation
     * @example
     * // Get one Pronunciation
     * const pronunciation = await prisma.pronunciation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PronunciationFindFirstOrThrowArgs>(args?: SelectSubset<T, PronunciationFindFirstOrThrowArgs<ExtArgs>>): Prisma__PronunciationClient<$Result.GetResult<Prisma.$PronunciationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pronunciations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PronunciationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pronunciations
     * const pronunciations = await prisma.pronunciation.findMany()
     * 
     * // Get first 10 Pronunciations
     * const pronunciations = await prisma.pronunciation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pronunciationWithIdOnly = await prisma.pronunciation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PronunciationFindManyArgs>(args?: SelectSubset<T, PronunciationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PronunciationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Pronunciation.
     * @param {PronunciationCreateArgs} args - Arguments to create a Pronunciation.
     * @example
     * // Create one Pronunciation
     * const Pronunciation = await prisma.pronunciation.create({
     *   data: {
     *     // ... data to create a Pronunciation
     *   }
     * })
     * 
     */
    create<T extends PronunciationCreateArgs>(args: SelectSubset<T, PronunciationCreateArgs<ExtArgs>>): Prisma__PronunciationClient<$Result.GetResult<Prisma.$PronunciationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pronunciations.
     * @param {PronunciationCreateManyArgs} args - Arguments to create many Pronunciations.
     * @example
     * // Create many Pronunciations
     * const pronunciation = await prisma.pronunciation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PronunciationCreateManyArgs>(args?: SelectSubset<T, PronunciationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pronunciations and returns the data saved in the database.
     * @param {PronunciationCreateManyAndReturnArgs} args - Arguments to create many Pronunciations.
     * @example
     * // Create many Pronunciations
     * const pronunciation = await prisma.pronunciation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pronunciations and only return the `id`
     * const pronunciationWithIdOnly = await prisma.pronunciation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PronunciationCreateManyAndReturnArgs>(args?: SelectSubset<T, PronunciationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PronunciationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Pronunciation.
     * @param {PronunciationDeleteArgs} args - Arguments to delete one Pronunciation.
     * @example
     * // Delete one Pronunciation
     * const Pronunciation = await prisma.pronunciation.delete({
     *   where: {
     *     // ... filter to delete one Pronunciation
     *   }
     * })
     * 
     */
    delete<T extends PronunciationDeleteArgs>(args: SelectSubset<T, PronunciationDeleteArgs<ExtArgs>>): Prisma__PronunciationClient<$Result.GetResult<Prisma.$PronunciationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Pronunciation.
     * @param {PronunciationUpdateArgs} args - Arguments to update one Pronunciation.
     * @example
     * // Update one Pronunciation
     * const pronunciation = await prisma.pronunciation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PronunciationUpdateArgs>(args: SelectSubset<T, PronunciationUpdateArgs<ExtArgs>>): Prisma__PronunciationClient<$Result.GetResult<Prisma.$PronunciationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pronunciations.
     * @param {PronunciationDeleteManyArgs} args - Arguments to filter Pronunciations to delete.
     * @example
     * // Delete a few Pronunciations
     * const { count } = await prisma.pronunciation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PronunciationDeleteManyArgs>(args?: SelectSubset<T, PronunciationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pronunciations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PronunciationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pronunciations
     * const pronunciation = await prisma.pronunciation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PronunciationUpdateManyArgs>(args: SelectSubset<T, PronunciationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pronunciations and returns the data updated in the database.
     * @param {PronunciationUpdateManyAndReturnArgs} args - Arguments to update many Pronunciations.
     * @example
     * // Update many Pronunciations
     * const pronunciation = await prisma.pronunciation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Pronunciations and only return the `id`
     * const pronunciationWithIdOnly = await prisma.pronunciation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PronunciationUpdateManyAndReturnArgs>(args: SelectSubset<T, PronunciationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PronunciationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Pronunciation.
     * @param {PronunciationUpsertArgs} args - Arguments to update or create a Pronunciation.
     * @example
     * // Update or create a Pronunciation
     * const pronunciation = await prisma.pronunciation.upsert({
     *   create: {
     *     // ... data to create a Pronunciation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pronunciation we want to update
     *   }
     * })
     */
    upsert<T extends PronunciationUpsertArgs>(args: SelectSubset<T, PronunciationUpsertArgs<ExtArgs>>): Prisma__PronunciationClient<$Result.GetResult<Prisma.$PronunciationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pronunciations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PronunciationCountArgs} args - Arguments to filter Pronunciations to count.
     * @example
     * // Count the number of Pronunciations
     * const count = await prisma.pronunciation.count({
     *   where: {
     *     // ... the filter for the Pronunciations we want to count
     *   }
     * })
    **/
    count<T extends PronunciationCountArgs>(
      args?: Subset<T, PronunciationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PronunciationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pronunciation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PronunciationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PronunciationAggregateArgs>(args: Subset<T, PronunciationAggregateArgs>): Prisma.PrismaPromise<GetPronunciationAggregateType<T>>

    /**
     * Group by Pronunciation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PronunciationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PronunciationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PronunciationGroupByArgs['orderBy'] }
        : { orderBy?: PronunciationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PronunciationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPronunciationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pronunciation model
   */
  readonly fields: PronunciationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pronunciation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PronunciationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wordUsage<T extends WordUsageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WordUsageDefaultArgs<ExtArgs>>): Prisma__WordUsageClient<$Result.GetResult<Prisma.$WordUsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pronunciation model
   */
  interface PronunciationFieldRefs {
    readonly id: FieldRef<"Pronunciation", 'Int'>
    readonly usageId: FieldRef<"Pronunciation", 'Int'>
    readonly phonemic: FieldRef<"Pronunciation", 'String'>
    readonly broadIPA: FieldRef<"Pronunciation", 'String'>
    readonly narrowIPA: FieldRef<"Pronunciation", 'String'>
    readonly audioUrl: FieldRef<"Pronunciation", 'String'>
    readonly speaker: FieldRef<"Pronunciation", 'String'>
    readonly dialect: FieldRef<"Pronunciation", 'String'>
    readonly isPrimary: FieldRef<"Pronunciation", 'Boolean'>
    readonly notes: FieldRef<"Pronunciation", 'String'>
    readonly order: FieldRef<"Pronunciation", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Pronunciation findUnique
   */
  export type PronunciationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pronunciation
     */
    select?: PronunciationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pronunciation
     */
    omit?: PronunciationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronunciationInclude<ExtArgs> | null
    /**
     * Filter, which Pronunciation to fetch.
     */
    where: PronunciationWhereUniqueInput
  }

  /**
   * Pronunciation findUniqueOrThrow
   */
  export type PronunciationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pronunciation
     */
    select?: PronunciationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pronunciation
     */
    omit?: PronunciationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronunciationInclude<ExtArgs> | null
    /**
     * Filter, which Pronunciation to fetch.
     */
    where: PronunciationWhereUniqueInput
  }

  /**
   * Pronunciation findFirst
   */
  export type PronunciationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pronunciation
     */
    select?: PronunciationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pronunciation
     */
    omit?: PronunciationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronunciationInclude<ExtArgs> | null
    /**
     * Filter, which Pronunciation to fetch.
     */
    where?: PronunciationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pronunciations to fetch.
     */
    orderBy?: PronunciationOrderByWithRelationInput | PronunciationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pronunciations.
     */
    cursor?: PronunciationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pronunciations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pronunciations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pronunciations.
     */
    distinct?: PronunciationScalarFieldEnum | PronunciationScalarFieldEnum[]
  }

  /**
   * Pronunciation findFirstOrThrow
   */
  export type PronunciationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pronunciation
     */
    select?: PronunciationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pronunciation
     */
    omit?: PronunciationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronunciationInclude<ExtArgs> | null
    /**
     * Filter, which Pronunciation to fetch.
     */
    where?: PronunciationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pronunciations to fetch.
     */
    orderBy?: PronunciationOrderByWithRelationInput | PronunciationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pronunciations.
     */
    cursor?: PronunciationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pronunciations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pronunciations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pronunciations.
     */
    distinct?: PronunciationScalarFieldEnum | PronunciationScalarFieldEnum[]
  }

  /**
   * Pronunciation findMany
   */
  export type PronunciationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pronunciation
     */
    select?: PronunciationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pronunciation
     */
    omit?: PronunciationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronunciationInclude<ExtArgs> | null
    /**
     * Filter, which Pronunciations to fetch.
     */
    where?: PronunciationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pronunciations to fetch.
     */
    orderBy?: PronunciationOrderByWithRelationInput | PronunciationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pronunciations.
     */
    cursor?: PronunciationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pronunciations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pronunciations.
     */
    skip?: number
    distinct?: PronunciationScalarFieldEnum | PronunciationScalarFieldEnum[]
  }

  /**
   * Pronunciation create
   */
  export type PronunciationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pronunciation
     */
    select?: PronunciationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pronunciation
     */
    omit?: PronunciationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronunciationInclude<ExtArgs> | null
    /**
     * The data needed to create a Pronunciation.
     */
    data: XOR<PronunciationCreateInput, PronunciationUncheckedCreateInput>
  }

  /**
   * Pronunciation createMany
   */
  export type PronunciationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pronunciations.
     */
    data: PronunciationCreateManyInput | PronunciationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pronunciation createManyAndReturn
   */
  export type PronunciationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pronunciation
     */
    select?: PronunciationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Pronunciation
     */
    omit?: PronunciationOmit<ExtArgs> | null
    /**
     * The data used to create many Pronunciations.
     */
    data: PronunciationCreateManyInput | PronunciationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronunciationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Pronunciation update
   */
  export type PronunciationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pronunciation
     */
    select?: PronunciationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pronunciation
     */
    omit?: PronunciationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronunciationInclude<ExtArgs> | null
    /**
     * The data needed to update a Pronunciation.
     */
    data: XOR<PronunciationUpdateInput, PronunciationUncheckedUpdateInput>
    /**
     * Choose, which Pronunciation to update.
     */
    where: PronunciationWhereUniqueInput
  }

  /**
   * Pronunciation updateMany
   */
  export type PronunciationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pronunciations.
     */
    data: XOR<PronunciationUpdateManyMutationInput, PronunciationUncheckedUpdateManyInput>
    /**
     * Filter which Pronunciations to update
     */
    where?: PronunciationWhereInput
    /**
     * Limit how many Pronunciations to update.
     */
    limit?: number
  }

  /**
   * Pronunciation updateManyAndReturn
   */
  export type PronunciationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pronunciation
     */
    select?: PronunciationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Pronunciation
     */
    omit?: PronunciationOmit<ExtArgs> | null
    /**
     * The data used to update Pronunciations.
     */
    data: XOR<PronunciationUpdateManyMutationInput, PronunciationUncheckedUpdateManyInput>
    /**
     * Filter which Pronunciations to update
     */
    where?: PronunciationWhereInput
    /**
     * Limit how many Pronunciations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronunciationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Pronunciation upsert
   */
  export type PronunciationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pronunciation
     */
    select?: PronunciationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pronunciation
     */
    omit?: PronunciationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronunciationInclude<ExtArgs> | null
    /**
     * The filter to search for the Pronunciation to update in case it exists.
     */
    where: PronunciationWhereUniqueInput
    /**
     * In case the Pronunciation found by the `where` argument doesn't exist, create a new Pronunciation with this data.
     */
    create: XOR<PronunciationCreateInput, PronunciationUncheckedCreateInput>
    /**
     * In case the Pronunciation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PronunciationUpdateInput, PronunciationUncheckedUpdateInput>
  }

  /**
   * Pronunciation delete
   */
  export type PronunciationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pronunciation
     */
    select?: PronunciationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pronunciation
     */
    omit?: PronunciationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronunciationInclude<ExtArgs> | null
    /**
     * Filter which Pronunciation to delete.
     */
    where: PronunciationWhereUniqueInput
  }

  /**
   * Pronunciation deleteMany
   */
  export type PronunciationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pronunciations to delete
     */
    where?: PronunciationWhereInput
    /**
     * Limit how many Pronunciations to delete.
     */
    limit?: number
  }

  /**
   * Pronunciation without action
   */
  export type PronunciationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pronunciation
     */
    select?: PronunciationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pronunciation
     */
    omit?: PronunciationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronunciationInclude<ExtArgs> | null
  }


  /**
   * Model WordVariation
   */

  export type AggregateWordVariation = {
    _count: WordVariationCountAggregateOutputType | null
    _avg: WordVariationAvgAggregateOutputType | null
    _sum: WordVariationSumAggregateOutputType | null
    _min: WordVariationMinAggregateOutputType | null
    _max: WordVariationMaxAggregateOutputType | null
  }

  export type WordVariationAvgAggregateOutputType = {
    id: number | null
    entryId: number | null
  }

  export type WordVariationSumAggregateOutputType = {
    id: number | null
    entryId: number | null
  }

  export type WordVariationMinAggregateOutputType = {
    id: number | null
    entryId: number | null
    form: string | null
    type: string | null
    isRegular: boolean | null
    notes: string | null
  }

  export type WordVariationMaxAggregateOutputType = {
    id: number | null
    entryId: number | null
    form: string | null
    type: string | null
    isRegular: boolean | null
    notes: string | null
  }

  export type WordVariationCountAggregateOutputType = {
    id: number
    entryId: number
    form: number
    type: number
    isRegular: number
    notes: number
    _all: number
  }


  export type WordVariationAvgAggregateInputType = {
    id?: true
    entryId?: true
  }

  export type WordVariationSumAggregateInputType = {
    id?: true
    entryId?: true
  }

  export type WordVariationMinAggregateInputType = {
    id?: true
    entryId?: true
    form?: true
    type?: true
    isRegular?: true
    notes?: true
  }

  export type WordVariationMaxAggregateInputType = {
    id?: true
    entryId?: true
    form?: true
    type?: true
    isRegular?: true
    notes?: true
  }

  export type WordVariationCountAggregateInputType = {
    id?: true
    entryId?: true
    form?: true
    type?: true
    isRegular?: true
    notes?: true
    _all?: true
  }

  export type WordVariationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WordVariation to aggregate.
     */
    where?: WordVariationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WordVariations to fetch.
     */
    orderBy?: WordVariationOrderByWithRelationInput | WordVariationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WordVariationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WordVariations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WordVariations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WordVariations
    **/
    _count?: true | WordVariationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WordVariationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WordVariationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WordVariationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WordVariationMaxAggregateInputType
  }

  export type GetWordVariationAggregateType<T extends WordVariationAggregateArgs> = {
        [P in keyof T & keyof AggregateWordVariation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWordVariation[P]>
      : GetScalarType<T[P], AggregateWordVariation[P]>
  }




  export type WordVariationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WordVariationWhereInput
    orderBy?: WordVariationOrderByWithAggregationInput | WordVariationOrderByWithAggregationInput[]
    by: WordVariationScalarFieldEnum[] | WordVariationScalarFieldEnum
    having?: WordVariationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WordVariationCountAggregateInputType | true
    _avg?: WordVariationAvgAggregateInputType
    _sum?: WordVariationSumAggregateInputType
    _min?: WordVariationMinAggregateInputType
    _max?: WordVariationMaxAggregateInputType
  }

  export type WordVariationGroupByOutputType = {
    id: number
    entryId: number
    form: string
    type: string
    isRegular: boolean
    notes: string | null
    _count: WordVariationCountAggregateOutputType | null
    _avg: WordVariationAvgAggregateOutputType | null
    _sum: WordVariationSumAggregateOutputType | null
    _min: WordVariationMinAggregateOutputType | null
    _max: WordVariationMaxAggregateOutputType | null
  }

  type GetWordVariationGroupByPayload<T extends WordVariationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WordVariationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WordVariationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WordVariationGroupByOutputType[P]>
            : GetScalarType<T[P], WordVariationGroupByOutputType[P]>
        }
      >
    >


  export type WordVariationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entryId?: boolean
    form?: boolean
    type?: boolean
    isRegular?: boolean
    notes?: boolean
    entry?: boolean | DictionaryEntryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wordVariation"]>

  export type WordVariationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entryId?: boolean
    form?: boolean
    type?: boolean
    isRegular?: boolean
    notes?: boolean
    entry?: boolean | DictionaryEntryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wordVariation"]>

  export type WordVariationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entryId?: boolean
    form?: boolean
    type?: boolean
    isRegular?: boolean
    notes?: boolean
    entry?: boolean | DictionaryEntryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wordVariation"]>

  export type WordVariationSelectScalar = {
    id?: boolean
    entryId?: boolean
    form?: boolean
    type?: boolean
    isRegular?: boolean
    notes?: boolean
  }

  export type WordVariationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "entryId" | "form" | "type" | "isRegular" | "notes", ExtArgs["result"]["wordVariation"]>
  export type WordVariationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entry?: boolean | DictionaryEntryDefaultArgs<ExtArgs>
  }
  export type WordVariationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entry?: boolean | DictionaryEntryDefaultArgs<ExtArgs>
  }
  export type WordVariationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entry?: boolean | DictionaryEntryDefaultArgs<ExtArgs>
  }

  export type $WordVariationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WordVariation"
    objects: {
      entry: Prisma.$DictionaryEntryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      entryId: number
      form: string
      type: string
      isRegular: boolean
      notes: string | null
    }, ExtArgs["result"]["wordVariation"]>
    composites: {}
  }

  type WordVariationGetPayload<S extends boolean | null | undefined | WordVariationDefaultArgs> = $Result.GetResult<Prisma.$WordVariationPayload, S>

  type WordVariationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WordVariationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WordVariationCountAggregateInputType | true
    }

  export interface WordVariationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WordVariation'], meta: { name: 'WordVariation' } }
    /**
     * Find zero or one WordVariation that matches the filter.
     * @param {WordVariationFindUniqueArgs} args - Arguments to find a WordVariation
     * @example
     * // Get one WordVariation
     * const wordVariation = await prisma.wordVariation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WordVariationFindUniqueArgs>(args: SelectSubset<T, WordVariationFindUniqueArgs<ExtArgs>>): Prisma__WordVariationClient<$Result.GetResult<Prisma.$WordVariationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WordVariation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WordVariationFindUniqueOrThrowArgs} args - Arguments to find a WordVariation
     * @example
     * // Get one WordVariation
     * const wordVariation = await prisma.wordVariation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WordVariationFindUniqueOrThrowArgs>(args: SelectSubset<T, WordVariationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WordVariationClient<$Result.GetResult<Prisma.$WordVariationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WordVariation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordVariationFindFirstArgs} args - Arguments to find a WordVariation
     * @example
     * // Get one WordVariation
     * const wordVariation = await prisma.wordVariation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WordVariationFindFirstArgs>(args?: SelectSubset<T, WordVariationFindFirstArgs<ExtArgs>>): Prisma__WordVariationClient<$Result.GetResult<Prisma.$WordVariationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WordVariation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordVariationFindFirstOrThrowArgs} args - Arguments to find a WordVariation
     * @example
     * // Get one WordVariation
     * const wordVariation = await prisma.wordVariation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WordVariationFindFirstOrThrowArgs>(args?: SelectSubset<T, WordVariationFindFirstOrThrowArgs<ExtArgs>>): Prisma__WordVariationClient<$Result.GetResult<Prisma.$WordVariationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WordVariations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordVariationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WordVariations
     * const wordVariations = await prisma.wordVariation.findMany()
     * 
     * // Get first 10 WordVariations
     * const wordVariations = await prisma.wordVariation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wordVariationWithIdOnly = await prisma.wordVariation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WordVariationFindManyArgs>(args?: SelectSubset<T, WordVariationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WordVariationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WordVariation.
     * @param {WordVariationCreateArgs} args - Arguments to create a WordVariation.
     * @example
     * // Create one WordVariation
     * const WordVariation = await prisma.wordVariation.create({
     *   data: {
     *     // ... data to create a WordVariation
     *   }
     * })
     * 
     */
    create<T extends WordVariationCreateArgs>(args: SelectSubset<T, WordVariationCreateArgs<ExtArgs>>): Prisma__WordVariationClient<$Result.GetResult<Prisma.$WordVariationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WordVariations.
     * @param {WordVariationCreateManyArgs} args - Arguments to create many WordVariations.
     * @example
     * // Create many WordVariations
     * const wordVariation = await prisma.wordVariation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WordVariationCreateManyArgs>(args?: SelectSubset<T, WordVariationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WordVariations and returns the data saved in the database.
     * @param {WordVariationCreateManyAndReturnArgs} args - Arguments to create many WordVariations.
     * @example
     * // Create many WordVariations
     * const wordVariation = await prisma.wordVariation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WordVariations and only return the `id`
     * const wordVariationWithIdOnly = await prisma.wordVariation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WordVariationCreateManyAndReturnArgs>(args?: SelectSubset<T, WordVariationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WordVariationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WordVariation.
     * @param {WordVariationDeleteArgs} args - Arguments to delete one WordVariation.
     * @example
     * // Delete one WordVariation
     * const WordVariation = await prisma.wordVariation.delete({
     *   where: {
     *     // ... filter to delete one WordVariation
     *   }
     * })
     * 
     */
    delete<T extends WordVariationDeleteArgs>(args: SelectSubset<T, WordVariationDeleteArgs<ExtArgs>>): Prisma__WordVariationClient<$Result.GetResult<Prisma.$WordVariationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WordVariation.
     * @param {WordVariationUpdateArgs} args - Arguments to update one WordVariation.
     * @example
     * // Update one WordVariation
     * const wordVariation = await prisma.wordVariation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WordVariationUpdateArgs>(args: SelectSubset<T, WordVariationUpdateArgs<ExtArgs>>): Prisma__WordVariationClient<$Result.GetResult<Prisma.$WordVariationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WordVariations.
     * @param {WordVariationDeleteManyArgs} args - Arguments to filter WordVariations to delete.
     * @example
     * // Delete a few WordVariations
     * const { count } = await prisma.wordVariation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WordVariationDeleteManyArgs>(args?: SelectSubset<T, WordVariationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WordVariations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordVariationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WordVariations
     * const wordVariation = await prisma.wordVariation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WordVariationUpdateManyArgs>(args: SelectSubset<T, WordVariationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WordVariations and returns the data updated in the database.
     * @param {WordVariationUpdateManyAndReturnArgs} args - Arguments to update many WordVariations.
     * @example
     * // Update many WordVariations
     * const wordVariation = await prisma.wordVariation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WordVariations and only return the `id`
     * const wordVariationWithIdOnly = await prisma.wordVariation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WordVariationUpdateManyAndReturnArgs>(args: SelectSubset<T, WordVariationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WordVariationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WordVariation.
     * @param {WordVariationUpsertArgs} args - Arguments to update or create a WordVariation.
     * @example
     * // Update or create a WordVariation
     * const wordVariation = await prisma.wordVariation.upsert({
     *   create: {
     *     // ... data to create a WordVariation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WordVariation we want to update
     *   }
     * })
     */
    upsert<T extends WordVariationUpsertArgs>(args: SelectSubset<T, WordVariationUpsertArgs<ExtArgs>>): Prisma__WordVariationClient<$Result.GetResult<Prisma.$WordVariationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WordVariations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordVariationCountArgs} args - Arguments to filter WordVariations to count.
     * @example
     * // Count the number of WordVariations
     * const count = await prisma.wordVariation.count({
     *   where: {
     *     // ... the filter for the WordVariations we want to count
     *   }
     * })
    **/
    count<T extends WordVariationCountArgs>(
      args?: Subset<T, WordVariationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WordVariationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WordVariation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordVariationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WordVariationAggregateArgs>(args: Subset<T, WordVariationAggregateArgs>): Prisma.PrismaPromise<GetWordVariationAggregateType<T>>

    /**
     * Group by WordVariation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordVariationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WordVariationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WordVariationGroupByArgs['orderBy'] }
        : { orderBy?: WordVariationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WordVariationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWordVariationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WordVariation model
   */
  readonly fields: WordVariationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WordVariation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WordVariationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    entry<T extends DictionaryEntryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DictionaryEntryDefaultArgs<ExtArgs>>): Prisma__DictionaryEntryClient<$Result.GetResult<Prisma.$DictionaryEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WordVariation model
   */
  interface WordVariationFieldRefs {
    readonly id: FieldRef<"WordVariation", 'Int'>
    readonly entryId: FieldRef<"WordVariation", 'Int'>
    readonly form: FieldRef<"WordVariation", 'String'>
    readonly type: FieldRef<"WordVariation", 'String'>
    readonly isRegular: FieldRef<"WordVariation", 'Boolean'>
    readonly notes: FieldRef<"WordVariation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WordVariation findUnique
   */
  export type WordVariationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordVariation
     */
    select?: WordVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordVariation
     */
    omit?: WordVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordVariationInclude<ExtArgs> | null
    /**
     * Filter, which WordVariation to fetch.
     */
    where: WordVariationWhereUniqueInput
  }

  /**
   * WordVariation findUniqueOrThrow
   */
  export type WordVariationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordVariation
     */
    select?: WordVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordVariation
     */
    omit?: WordVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordVariationInclude<ExtArgs> | null
    /**
     * Filter, which WordVariation to fetch.
     */
    where: WordVariationWhereUniqueInput
  }

  /**
   * WordVariation findFirst
   */
  export type WordVariationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordVariation
     */
    select?: WordVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordVariation
     */
    omit?: WordVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordVariationInclude<ExtArgs> | null
    /**
     * Filter, which WordVariation to fetch.
     */
    where?: WordVariationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WordVariations to fetch.
     */
    orderBy?: WordVariationOrderByWithRelationInput | WordVariationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WordVariations.
     */
    cursor?: WordVariationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WordVariations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WordVariations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WordVariations.
     */
    distinct?: WordVariationScalarFieldEnum | WordVariationScalarFieldEnum[]
  }

  /**
   * WordVariation findFirstOrThrow
   */
  export type WordVariationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordVariation
     */
    select?: WordVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordVariation
     */
    omit?: WordVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordVariationInclude<ExtArgs> | null
    /**
     * Filter, which WordVariation to fetch.
     */
    where?: WordVariationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WordVariations to fetch.
     */
    orderBy?: WordVariationOrderByWithRelationInput | WordVariationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WordVariations.
     */
    cursor?: WordVariationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WordVariations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WordVariations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WordVariations.
     */
    distinct?: WordVariationScalarFieldEnum | WordVariationScalarFieldEnum[]
  }

  /**
   * WordVariation findMany
   */
  export type WordVariationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordVariation
     */
    select?: WordVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordVariation
     */
    omit?: WordVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordVariationInclude<ExtArgs> | null
    /**
     * Filter, which WordVariations to fetch.
     */
    where?: WordVariationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WordVariations to fetch.
     */
    orderBy?: WordVariationOrderByWithRelationInput | WordVariationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WordVariations.
     */
    cursor?: WordVariationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WordVariations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WordVariations.
     */
    skip?: number
    distinct?: WordVariationScalarFieldEnum | WordVariationScalarFieldEnum[]
  }

  /**
   * WordVariation create
   */
  export type WordVariationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordVariation
     */
    select?: WordVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordVariation
     */
    omit?: WordVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordVariationInclude<ExtArgs> | null
    /**
     * The data needed to create a WordVariation.
     */
    data: XOR<WordVariationCreateInput, WordVariationUncheckedCreateInput>
  }

  /**
   * WordVariation createMany
   */
  export type WordVariationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WordVariations.
     */
    data: WordVariationCreateManyInput | WordVariationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WordVariation createManyAndReturn
   */
  export type WordVariationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordVariation
     */
    select?: WordVariationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WordVariation
     */
    omit?: WordVariationOmit<ExtArgs> | null
    /**
     * The data used to create many WordVariations.
     */
    data: WordVariationCreateManyInput | WordVariationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordVariationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WordVariation update
   */
  export type WordVariationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordVariation
     */
    select?: WordVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordVariation
     */
    omit?: WordVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordVariationInclude<ExtArgs> | null
    /**
     * The data needed to update a WordVariation.
     */
    data: XOR<WordVariationUpdateInput, WordVariationUncheckedUpdateInput>
    /**
     * Choose, which WordVariation to update.
     */
    where: WordVariationWhereUniqueInput
  }

  /**
   * WordVariation updateMany
   */
  export type WordVariationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WordVariations.
     */
    data: XOR<WordVariationUpdateManyMutationInput, WordVariationUncheckedUpdateManyInput>
    /**
     * Filter which WordVariations to update
     */
    where?: WordVariationWhereInput
    /**
     * Limit how many WordVariations to update.
     */
    limit?: number
  }

  /**
   * WordVariation updateManyAndReturn
   */
  export type WordVariationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordVariation
     */
    select?: WordVariationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WordVariation
     */
    omit?: WordVariationOmit<ExtArgs> | null
    /**
     * The data used to update WordVariations.
     */
    data: XOR<WordVariationUpdateManyMutationInput, WordVariationUncheckedUpdateManyInput>
    /**
     * Filter which WordVariations to update
     */
    where?: WordVariationWhereInput
    /**
     * Limit how many WordVariations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordVariationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WordVariation upsert
   */
  export type WordVariationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordVariation
     */
    select?: WordVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordVariation
     */
    omit?: WordVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordVariationInclude<ExtArgs> | null
    /**
     * The filter to search for the WordVariation to update in case it exists.
     */
    where: WordVariationWhereUniqueInput
    /**
     * In case the WordVariation found by the `where` argument doesn't exist, create a new WordVariation with this data.
     */
    create: XOR<WordVariationCreateInput, WordVariationUncheckedCreateInput>
    /**
     * In case the WordVariation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WordVariationUpdateInput, WordVariationUncheckedUpdateInput>
  }

  /**
   * WordVariation delete
   */
  export type WordVariationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordVariation
     */
    select?: WordVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordVariation
     */
    omit?: WordVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordVariationInclude<ExtArgs> | null
    /**
     * Filter which WordVariation to delete.
     */
    where: WordVariationWhereUniqueInput
  }

  /**
   * WordVariation deleteMany
   */
  export type WordVariationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WordVariations to delete
     */
    where?: WordVariationWhereInput
    /**
     * Limit how many WordVariations to delete.
     */
    limit?: number
  }

  /**
   * WordVariation without action
   */
  export type WordVariationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WordVariation
     */
    select?: WordVariationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WordVariation
     */
    omit?: WordVariationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordVariationInclude<ExtArgs> | null
  }


  /**
   * Model SpellingPattern
   */

  export type AggregateSpellingPattern = {
    _count: SpellingPatternCountAggregateOutputType | null
    _avg: SpellingPatternAvgAggregateOutputType | null
    _sum: SpellingPatternSumAggregateOutputType | null
    _min: SpellingPatternMinAggregateOutputType | null
    _max: SpellingPatternMaxAggregateOutputType | null
  }

  export type SpellingPatternAvgAggregateOutputType = {
    id: number | null
    usageId: number | null
    order: number | null
  }

  export type SpellingPatternSumAggregateOutputType = {
    id: number | null
    usageId: number | null
    order: number | null
  }

  export type SpellingPatternMinAggregateOutputType = {
    id: number | null
    usageId: number | null
    pattern: string | null
    type: string | null
    description: string | null
    order: number | null
  }

  export type SpellingPatternMaxAggregateOutputType = {
    id: number | null
    usageId: number | null
    pattern: string | null
    type: string | null
    description: string | null
    order: number | null
  }

  export type SpellingPatternCountAggregateOutputType = {
    id: number
    usageId: number
    pattern: number
    type: number
    description: number
    order: number
    _all: number
  }


  export type SpellingPatternAvgAggregateInputType = {
    id?: true
    usageId?: true
    order?: true
  }

  export type SpellingPatternSumAggregateInputType = {
    id?: true
    usageId?: true
    order?: true
  }

  export type SpellingPatternMinAggregateInputType = {
    id?: true
    usageId?: true
    pattern?: true
    type?: true
    description?: true
    order?: true
  }

  export type SpellingPatternMaxAggregateInputType = {
    id?: true
    usageId?: true
    pattern?: true
    type?: true
    description?: true
    order?: true
  }

  export type SpellingPatternCountAggregateInputType = {
    id?: true
    usageId?: true
    pattern?: true
    type?: true
    description?: true
    order?: true
    _all?: true
  }

  export type SpellingPatternAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpellingPattern to aggregate.
     */
    where?: SpellingPatternWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpellingPatterns to fetch.
     */
    orderBy?: SpellingPatternOrderByWithRelationInput | SpellingPatternOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpellingPatternWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpellingPatterns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpellingPatterns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SpellingPatterns
    **/
    _count?: true | SpellingPatternCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SpellingPatternAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SpellingPatternSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpellingPatternMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpellingPatternMaxAggregateInputType
  }

  export type GetSpellingPatternAggregateType<T extends SpellingPatternAggregateArgs> = {
        [P in keyof T & keyof AggregateSpellingPattern]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpellingPattern[P]>
      : GetScalarType<T[P], AggregateSpellingPattern[P]>
  }




  export type SpellingPatternGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpellingPatternWhereInput
    orderBy?: SpellingPatternOrderByWithAggregationInput | SpellingPatternOrderByWithAggregationInput[]
    by: SpellingPatternScalarFieldEnum[] | SpellingPatternScalarFieldEnum
    having?: SpellingPatternScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpellingPatternCountAggregateInputType | true
    _avg?: SpellingPatternAvgAggregateInputType
    _sum?: SpellingPatternSumAggregateInputType
    _min?: SpellingPatternMinAggregateInputType
    _max?: SpellingPatternMaxAggregateInputType
  }

  export type SpellingPatternGroupByOutputType = {
    id: number
    usageId: number
    pattern: string
    type: string
    description: string | null
    order: number | null
    _count: SpellingPatternCountAggregateOutputType | null
    _avg: SpellingPatternAvgAggregateOutputType | null
    _sum: SpellingPatternSumAggregateOutputType | null
    _min: SpellingPatternMinAggregateOutputType | null
    _max: SpellingPatternMaxAggregateOutputType | null
  }

  type GetSpellingPatternGroupByPayload<T extends SpellingPatternGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpellingPatternGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpellingPatternGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpellingPatternGroupByOutputType[P]>
            : GetScalarType<T[P], SpellingPatternGroupByOutputType[P]>
        }
      >
    >


  export type SpellingPatternSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usageId?: boolean
    pattern?: boolean
    type?: boolean
    description?: boolean
    order?: boolean
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spellingPattern"]>

  export type SpellingPatternSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usageId?: boolean
    pattern?: boolean
    type?: boolean
    description?: boolean
    order?: boolean
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spellingPattern"]>

  export type SpellingPatternSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usageId?: boolean
    pattern?: boolean
    type?: boolean
    description?: boolean
    order?: boolean
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spellingPattern"]>

  export type SpellingPatternSelectScalar = {
    id?: boolean
    usageId?: boolean
    pattern?: boolean
    type?: boolean
    description?: boolean
    order?: boolean
  }

  export type SpellingPatternOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "usageId" | "pattern" | "type" | "description" | "order", ExtArgs["result"]["spellingPattern"]>
  export type SpellingPatternInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }
  export type SpellingPatternIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }
  export type SpellingPatternIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }

  export type $SpellingPatternPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SpellingPattern"
    objects: {
      wordUsage: Prisma.$WordUsagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usageId: number
      pattern: string
      type: string
      description: string | null
      order: number | null
    }, ExtArgs["result"]["spellingPattern"]>
    composites: {}
  }

  type SpellingPatternGetPayload<S extends boolean | null | undefined | SpellingPatternDefaultArgs> = $Result.GetResult<Prisma.$SpellingPatternPayload, S>

  type SpellingPatternCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SpellingPatternFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SpellingPatternCountAggregateInputType | true
    }

  export interface SpellingPatternDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SpellingPattern'], meta: { name: 'SpellingPattern' } }
    /**
     * Find zero or one SpellingPattern that matches the filter.
     * @param {SpellingPatternFindUniqueArgs} args - Arguments to find a SpellingPattern
     * @example
     * // Get one SpellingPattern
     * const spellingPattern = await prisma.spellingPattern.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SpellingPatternFindUniqueArgs>(args: SelectSubset<T, SpellingPatternFindUniqueArgs<ExtArgs>>): Prisma__SpellingPatternClient<$Result.GetResult<Prisma.$SpellingPatternPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SpellingPattern that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SpellingPatternFindUniqueOrThrowArgs} args - Arguments to find a SpellingPattern
     * @example
     * // Get one SpellingPattern
     * const spellingPattern = await prisma.spellingPattern.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SpellingPatternFindUniqueOrThrowArgs>(args: SelectSubset<T, SpellingPatternFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SpellingPatternClient<$Result.GetResult<Prisma.$SpellingPatternPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SpellingPattern that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellingPatternFindFirstArgs} args - Arguments to find a SpellingPattern
     * @example
     * // Get one SpellingPattern
     * const spellingPattern = await prisma.spellingPattern.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SpellingPatternFindFirstArgs>(args?: SelectSubset<T, SpellingPatternFindFirstArgs<ExtArgs>>): Prisma__SpellingPatternClient<$Result.GetResult<Prisma.$SpellingPatternPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SpellingPattern that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellingPatternFindFirstOrThrowArgs} args - Arguments to find a SpellingPattern
     * @example
     * // Get one SpellingPattern
     * const spellingPattern = await prisma.spellingPattern.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SpellingPatternFindFirstOrThrowArgs>(args?: SelectSubset<T, SpellingPatternFindFirstOrThrowArgs<ExtArgs>>): Prisma__SpellingPatternClient<$Result.GetResult<Prisma.$SpellingPatternPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SpellingPatterns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellingPatternFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SpellingPatterns
     * const spellingPatterns = await prisma.spellingPattern.findMany()
     * 
     * // Get first 10 SpellingPatterns
     * const spellingPatterns = await prisma.spellingPattern.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const spellingPatternWithIdOnly = await prisma.spellingPattern.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SpellingPatternFindManyArgs>(args?: SelectSubset<T, SpellingPatternFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpellingPatternPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SpellingPattern.
     * @param {SpellingPatternCreateArgs} args - Arguments to create a SpellingPattern.
     * @example
     * // Create one SpellingPattern
     * const SpellingPattern = await prisma.spellingPattern.create({
     *   data: {
     *     // ... data to create a SpellingPattern
     *   }
     * })
     * 
     */
    create<T extends SpellingPatternCreateArgs>(args: SelectSubset<T, SpellingPatternCreateArgs<ExtArgs>>): Prisma__SpellingPatternClient<$Result.GetResult<Prisma.$SpellingPatternPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SpellingPatterns.
     * @param {SpellingPatternCreateManyArgs} args - Arguments to create many SpellingPatterns.
     * @example
     * // Create many SpellingPatterns
     * const spellingPattern = await prisma.spellingPattern.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SpellingPatternCreateManyArgs>(args?: SelectSubset<T, SpellingPatternCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SpellingPatterns and returns the data saved in the database.
     * @param {SpellingPatternCreateManyAndReturnArgs} args - Arguments to create many SpellingPatterns.
     * @example
     * // Create many SpellingPatterns
     * const spellingPattern = await prisma.spellingPattern.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SpellingPatterns and only return the `id`
     * const spellingPatternWithIdOnly = await prisma.spellingPattern.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SpellingPatternCreateManyAndReturnArgs>(args?: SelectSubset<T, SpellingPatternCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpellingPatternPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SpellingPattern.
     * @param {SpellingPatternDeleteArgs} args - Arguments to delete one SpellingPattern.
     * @example
     * // Delete one SpellingPattern
     * const SpellingPattern = await prisma.spellingPattern.delete({
     *   where: {
     *     // ... filter to delete one SpellingPattern
     *   }
     * })
     * 
     */
    delete<T extends SpellingPatternDeleteArgs>(args: SelectSubset<T, SpellingPatternDeleteArgs<ExtArgs>>): Prisma__SpellingPatternClient<$Result.GetResult<Prisma.$SpellingPatternPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SpellingPattern.
     * @param {SpellingPatternUpdateArgs} args - Arguments to update one SpellingPattern.
     * @example
     * // Update one SpellingPattern
     * const spellingPattern = await prisma.spellingPattern.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SpellingPatternUpdateArgs>(args: SelectSubset<T, SpellingPatternUpdateArgs<ExtArgs>>): Prisma__SpellingPatternClient<$Result.GetResult<Prisma.$SpellingPatternPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SpellingPatterns.
     * @param {SpellingPatternDeleteManyArgs} args - Arguments to filter SpellingPatterns to delete.
     * @example
     * // Delete a few SpellingPatterns
     * const { count } = await prisma.spellingPattern.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SpellingPatternDeleteManyArgs>(args?: SelectSubset<T, SpellingPatternDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpellingPatterns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellingPatternUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SpellingPatterns
     * const spellingPattern = await prisma.spellingPattern.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SpellingPatternUpdateManyArgs>(args: SelectSubset<T, SpellingPatternUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpellingPatterns and returns the data updated in the database.
     * @param {SpellingPatternUpdateManyAndReturnArgs} args - Arguments to update many SpellingPatterns.
     * @example
     * // Update many SpellingPatterns
     * const spellingPattern = await prisma.spellingPattern.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SpellingPatterns and only return the `id`
     * const spellingPatternWithIdOnly = await prisma.spellingPattern.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SpellingPatternUpdateManyAndReturnArgs>(args: SelectSubset<T, SpellingPatternUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpellingPatternPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SpellingPattern.
     * @param {SpellingPatternUpsertArgs} args - Arguments to update or create a SpellingPattern.
     * @example
     * // Update or create a SpellingPattern
     * const spellingPattern = await prisma.spellingPattern.upsert({
     *   create: {
     *     // ... data to create a SpellingPattern
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SpellingPattern we want to update
     *   }
     * })
     */
    upsert<T extends SpellingPatternUpsertArgs>(args: SelectSubset<T, SpellingPatternUpsertArgs<ExtArgs>>): Prisma__SpellingPatternClient<$Result.GetResult<Prisma.$SpellingPatternPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SpellingPatterns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellingPatternCountArgs} args - Arguments to filter SpellingPatterns to count.
     * @example
     * // Count the number of SpellingPatterns
     * const count = await prisma.spellingPattern.count({
     *   where: {
     *     // ... the filter for the SpellingPatterns we want to count
     *   }
     * })
    **/
    count<T extends SpellingPatternCountArgs>(
      args?: Subset<T, SpellingPatternCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpellingPatternCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SpellingPattern.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellingPatternAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpellingPatternAggregateArgs>(args: Subset<T, SpellingPatternAggregateArgs>): Prisma.PrismaPromise<GetSpellingPatternAggregateType<T>>

    /**
     * Group by SpellingPattern.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellingPatternGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpellingPatternGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpellingPatternGroupByArgs['orderBy'] }
        : { orderBy?: SpellingPatternGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpellingPatternGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpellingPatternGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SpellingPattern model
   */
  readonly fields: SpellingPatternFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SpellingPattern.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpellingPatternClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wordUsage<T extends WordUsageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WordUsageDefaultArgs<ExtArgs>>): Prisma__WordUsageClient<$Result.GetResult<Prisma.$WordUsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SpellingPattern model
   */
  interface SpellingPatternFieldRefs {
    readonly id: FieldRef<"SpellingPattern", 'Int'>
    readonly usageId: FieldRef<"SpellingPattern", 'Int'>
    readonly pattern: FieldRef<"SpellingPattern", 'String'>
    readonly type: FieldRef<"SpellingPattern", 'String'>
    readonly description: FieldRef<"SpellingPattern", 'String'>
    readonly order: FieldRef<"SpellingPattern", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SpellingPattern findUnique
   */
  export type SpellingPatternFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpellingPattern
     */
    select?: SpellingPatternSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpellingPattern
     */
    omit?: SpellingPatternOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellingPatternInclude<ExtArgs> | null
    /**
     * Filter, which SpellingPattern to fetch.
     */
    where: SpellingPatternWhereUniqueInput
  }

  /**
   * SpellingPattern findUniqueOrThrow
   */
  export type SpellingPatternFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpellingPattern
     */
    select?: SpellingPatternSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpellingPattern
     */
    omit?: SpellingPatternOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellingPatternInclude<ExtArgs> | null
    /**
     * Filter, which SpellingPattern to fetch.
     */
    where: SpellingPatternWhereUniqueInput
  }

  /**
   * SpellingPattern findFirst
   */
  export type SpellingPatternFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpellingPattern
     */
    select?: SpellingPatternSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpellingPattern
     */
    omit?: SpellingPatternOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellingPatternInclude<ExtArgs> | null
    /**
     * Filter, which SpellingPattern to fetch.
     */
    where?: SpellingPatternWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpellingPatterns to fetch.
     */
    orderBy?: SpellingPatternOrderByWithRelationInput | SpellingPatternOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpellingPatterns.
     */
    cursor?: SpellingPatternWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpellingPatterns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpellingPatterns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpellingPatterns.
     */
    distinct?: SpellingPatternScalarFieldEnum | SpellingPatternScalarFieldEnum[]
  }

  /**
   * SpellingPattern findFirstOrThrow
   */
  export type SpellingPatternFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpellingPattern
     */
    select?: SpellingPatternSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpellingPattern
     */
    omit?: SpellingPatternOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellingPatternInclude<ExtArgs> | null
    /**
     * Filter, which SpellingPattern to fetch.
     */
    where?: SpellingPatternWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpellingPatterns to fetch.
     */
    orderBy?: SpellingPatternOrderByWithRelationInput | SpellingPatternOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpellingPatterns.
     */
    cursor?: SpellingPatternWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpellingPatterns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpellingPatterns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpellingPatterns.
     */
    distinct?: SpellingPatternScalarFieldEnum | SpellingPatternScalarFieldEnum[]
  }

  /**
   * SpellingPattern findMany
   */
  export type SpellingPatternFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpellingPattern
     */
    select?: SpellingPatternSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpellingPattern
     */
    omit?: SpellingPatternOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellingPatternInclude<ExtArgs> | null
    /**
     * Filter, which SpellingPatterns to fetch.
     */
    where?: SpellingPatternWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpellingPatterns to fetch.
     */
    orderBy?: SpellingPatternOrderByWithRelationInput | SpellingPatternOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SpellingPatterns.
     */
    cursor?: SpellingPatternWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpellingPatterns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpellingPatterns.
     */
    skip?: number
    distinct?: SpellingPatternScalarFieldEnum | SpellingPatternScalarFieldEnum[]
  }

  /**
   * SpellingPattern create
   */
  export type SpellingPatternCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpellingPattern
     */
    select?: SpellingPatternSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpellingPattern
     */
    omit?: SpellingPatternOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellingPatternInclude<ExtArgs> | null
    /**
     * The data needed to create a SpellingPattern.
     */
    data: XOR<SpellingPatternCreateInput, SpellingPatternUncheckedCreateInput>
  }

  /**
   * SpellingPattern createMany
   */
  export type SpellingPatternCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SpellingPatterns.
     */
    data: SpellingPatternCreateManyInput | SpellingPatternCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SpellingPattern createManyAndReturn
   */
  export type SpellingPatternCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpellingPattern
     */
    select?: SpellingPatternSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SpellingPattern
     */
    omit?: SpellingPatternOmit<ExtArgs> | null
    /**
     * The data used to create many SpellingPatterns.
     */
    data: SpellingPatternCreateManyInput | SpellingPatternCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellingPatternIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SpellingPattern update
   */
  export type SpellingPatternUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpellingPattern
     */
    select?: SpellingPatternSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpellingPattern
     */
    omit?: SpellingPatternOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellingPatternInclude<ExtArgs> | null
    /**
     * The data needed to update a SpellingPattern.
     */
    data: XOR<SpellingPatternUpdateInput, SpellingPatternUncheckedUpdateInput>
    /**
     * Choose, which SpellingPattern to update.
     */
    where: SpellingPatternWhereUniqueInput
  }

  /**
   * SpellingPattern updateMany
   */
  export type SpellingPatternUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SpellingPatterns.
     */
    data: XOR<SpellingPatternUpdateManyMutationInput, SpellingPatternUncheckedUpdateManyInput>
    /**
     * Filter which SpellingPatterns to update
     */
    where?: SpellingPatternWhereInput
    /**
     * Limit how many SpellingPatterns to update.
     */
    limit?: number
  }

  /**
   * SpellingPattern updateManyAndReturn
   */
  export type SpellingPatternUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpellingPattern
     */
    select?: SpellingPatternSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SpellingPattern
     */
    omit?: SpellingPatternOmit<ExtArgs> | null
    /**
     * The data used to update SpellingPatterns.
     */
    data: XOR<SpellingPatternUpdateManyMutationInput, SpellingPatternUncheckedUpdateManyInput>
    /**
     * Filter which SpellingPatterns to update
     */
    where?: SpellingPatternWhereInput
    /**
     * Limit how many SpellingPatterns to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellingPatternIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SpellingPattern upsert
   */
  export type SpellingPatternUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpellingPattern
     */
    select?: SpellingPatternSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpellingPattern
     */
    omit?: SpellingPatternOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellingPatternInclude<ExtArgs> | null
    /**
     * The filter to search for the SpellingPattern to update in case it exists.
     */
    where: SpellingPatternWhereUniqueInput
    /**
     * In case the SpellingPattern found by the `where` argument doesn't exist, create a new SpellingPattern with this data.
     */
    create: XOR<SpellingPatternCreateInput, SpellingPatternUncheckedCreateInput>
    /**
     * In case the SpellingPattern was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpellingPatternUpdateInput, SpellingPatternUncheckedUpdateInput>
  }

  /**
   * SpellingPattern delete
   */
  export type SpellingPatternDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpellingPattern
     */
    select?: SpellingPatternSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpellingPattern
     */
    omit?: SpellingPatternOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellingPatternInclude<ExtArgs> | null
    /**
     * Filter which SpellingPattern to delete.
     */
    where: SpellingPatternWhereUniqueInput
  }

  /**
   * SpellingPattern deleteMany
   */
  export type SpellingPatternDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpellingPatterns to delete
     */
    where?: SpellingPatternWhereInput
    /**
     * Limit how many SpellingPatterns to delete.
     */
    limit?: number
  }

  /**
   * SpellingPattern without action
   */
  export type SpellingPatternDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpellingPattern
     */
    select?: SpellingPatternSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpellingPattern
     */
    omit?: SpellingPatternOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpellingPatternInclude<ExtArgs> | null
  }


  /**
   * Model LexicalSet
   */

  export type AggregateLexicalSet = {
    _count: LexicalSetCountAggregateOutputType | null
    _avg: LexicalSetAvgAggregateOutputType | null
    _sum: LexicalSetSumAggregateOutputType | null
    _min: LexicalSetMinAggregateOutputType | null
    _max: LexicalSetMaxAggregateOutputType | null
  }

  export type LexicalSetAvgAggregateOutputType = {
    id: number | null
    order: number | null
  }

  export type LexicalSetSumAggregateOutputType = {
    id: number | null
    order: number | null
  }

  export type LexicalSetMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    order: number | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LexicalSetMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    order: number | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LexicalSetCountAggregateOutputType = {
    id: number
    name: number
    description: number
    order: number
    category: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LexicalSetAvgAggregateInputType = {
    id?: true
    order?: true
  }

  export type LexicalSetSumAggregateInputType = {
    id?: true
    order?: true
  }

  export type LexicalSetMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    order?: true
    category?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LexicalSetMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    order?: true
    category?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LexicalSetCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    order?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LexicalSetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LexicalSet to aggregate.
     */
    where?: LexicalSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LexicalSets to fetch.
     */
    orderBy?: LexicalSetOrderByWithRelationInput | LexicalSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LexicalSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LexicalSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LexicalSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LexicalSets
    **/
    _count?: true | LexicalSetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LexicalSetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LexicalSetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LexicalSetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LexicalSetMaxAggregateInputType
  }

  export type GetLexicalSetAggregateType<T extends LexicalSetAggregateArgs> = {
        [P in keyof T & keyof AggregateLexicalSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLexicalSet[P]>
      : GetScalarType<T[P], AggregateLexicalSet[P]>
  }




  export type LexicalSetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LexicalSetWhereInput
    orderBy?: LexicalSetOrderByWithAggregationInput | LexicalSetOrderByWithAggregationInput[]
    by: LexicalSetScalarFieldEnum[] | LexicalSetScalarFieldEnum
    having?: LexicalSetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LexicalSetCountAggregateInputType | true
    _avg?: LexicalSetAvgAggregateInputType
    _sum?: LexicalSetSumAggregateInputType
    _min?: LexicalSetMinAggregateInputType
    _max?: LexicalSetMaxAggregateInputType
  }

  export type LexicalSetGroupByOutputType = {
    id: number
    name: string
    description: string | null
    order: number | null
    category: string | null
    createdAt: Date
    updatedAt: Date
    _count: LexicalSetCountAggregateOutputType | null
    _avg: LexicalSetAvgAggregateOutputType | null
    _sum: LexicalSetSumAggregateOutputType | null
    _min: LexicalSetMinAggregateOutputType | null
    _max: LexicalSetMaxAggregateOutputType | null
  }

  type GetLexicalSetGroupByPayload<T extends LexicalSetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LexicalSetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LexicalSetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LexicalSetGroupByOutputType[P]>
            : GetScalarType<T[P], LexicalSetGroupByOutputType[P]>
        }
      >
    >


  export type LexicalSetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    order?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usages?: boolean | LexicalSet$usagesArgs<ExtArgs>
    words?: boolean | LexicalSet$wordsArgs<ExtArgs>
    _count?: boolean | LexicalSetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lexicalSet"]>

  export type LexicalSetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    order?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["lexicalSet"]>

  export type LexicalSetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    order?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["lexicalSet"]>

  export type LexicalSetSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    order?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LexicalSetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "order" | "category" | "createdAt" | "updatedAt", ExtArgs["result"]["lexicalSet"]>
  export type LexicalSetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usages?: boolean | LexicalSet$usagesArgs<ExtArgs>
    words?: boolean | LexicalSet$wordsArgs<ExtArgs>
    _count?: boolean | LexicalSetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LexicalSetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LexicalSetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LexicalSetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LexicalSet"
    objects: {
      usages: Prisma.$LexicalSetUsagePayload<ExtArgs>[]
      words: Prisma.$WordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      order: number | null
      category: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["lexicalSet"]>
    composites: {}
  }

  type LexicalSetGetPayload<S extends boolean | null | undefined | LexicalSetDefaultArgs> = $Result.GetResult<Prisma.$LexicalSetPayload, S>

  type LexicalSetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LexicalSetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LexicalSetCountAggregateInputType | true
    }

  export interface LexicalSetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LexicalSet'], meta: { name: 'LexicalSet' } }
    /**
     * Find zero or one LexicalSet that matches the filter.
     * @param {LexicalSetFindUniqueArgs} args - Arguments to find a LexicalSet
     * @example
     * // Get one LexicalSet
     * const lexicalSet = await prisma.lexicalSet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LexicalSetFindUniqueArgs>(args: SelectSubset<T, LexicalSetFindUniqueArgs<ExtArgs>>): Prisma__LexicalSetClient<$Result.GetResult<Prisma.$LexicalSetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LexicalSet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LexicalSetFindUniqueOrThrowArgs} args - Arguments to find a LexicalSet
     * @example
     * // Get one LexicalSet
     * const lexicalSet = await prisma.lexicalSet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LexicalSetFindUniqueOrThrowArgs>(args: SelectSubset<T, LexicalSetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LexicalSetClient<$Result.GetResult<Prisma.$LexicalSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LexicalSet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LexicalSetFindFirstArgs} args - Arguments to find a LexicalSet
     * @example
     * // Get one LexicalSet
     * const lexicalSet = await prisma.lexicalSet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LexicalSetFindFirstArgs>(args?: SelectSubset<T, LexicalSetFindFirstArgs<ExtArgs>>): Prisma__LexicalSetClient<$Result.GetResult<Prisma.$LexicalSetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LexicalSet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LexicalSetFindFirstOrThrowArgs} args - Arguments to find a LexicalSet
     * @example
     * // Get one LexicalSet
     * const lexicalSet = await prisma.lexicalSet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LexicalSetFindFirstOrThrowArgs>(args?: SelectSubset<T, LexicalSetFindFirstOrThrowArgs<ExtArgs>>): Prisma__LexicalSetClient<$Result.GetResult<Prisma.$LexicalSetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LexicalSets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LexicalSetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LexicalSets
     * const lexicalSets = await prisma.lexicalSet.findMany()
     * 
     * // Get first 10 LexicalSets
     * const lexicalSets = await prisma.lexicalSet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lexicalSetWithIdOnly = await prisma.lexicalSet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LexicalSetFindManyArgs>(args?: SelectSubset<T, LexicalSetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LexicalSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LexicalSet.
     * @param {LexicalSetCreateArgs} args - Arguments to create a LexicalSet.
     * @example
     * // Create one LexicalSet
     * const LexicalSet = await prisma.lexicalSet.create({
     *   data: {
     *     // ... data to create a LexicalSet
     *   }
     * })
     * 
     */
    create<T extends LexicalSetCreateArgs>(args: SelectSubset<T, LexicalSetCreateArgs<ExtArgs>>): Prisma__LexicalSetClient<$Result.GetResult<Prisma.$LexicalSetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LexicalSets.
     * @param {LexicalSetCreateManyArgs} args - Arguments to create many LexicalSets.
     * @example
     * // Create many LexicalSets
     * const lexicalSet = await prisma.lexicalSet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LexicalSetCreateManyArgs>(args?: SelectSubset<T, LexicalSetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LexicalSets and returns the data saved in the database.
     * @param {LexicalSetCreateManyAndReturnArgs} args - Arguments to create many LexicalSets.
     * @example
     * // Create many LexicalSets
     * const lexicalSet = await prisma.lexicalSet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LexicalSets and only return the `id`
     * const lexicalSetWithIdOnly = await prisma.lexicalSet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LexicalSetCreateManyAndReturnArgs>(args?: SelectSubset<T, LexicalSetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LexicalSetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LexicalSet.
     * @param {LexicalSetDeleteArgs} args - Arguments to delete one LexicalSet.
     * @example
     * // Delete one LexicalSet
     * const LexicalSet = await prisma.lexicalSet.delete({
     *   where: {
     *     // ... filter to delete one LexicalSet
     *   }
     * })
     * 
     */
    delete<T extends LexicalSetDeleteArgs>(args: SelectSubset<T, LexicalSetDeleteArgs<ExtArgs>>): Prisma__LexicalSetClient<$Result.GetResult<Prisma.$LexicalSetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LexicalSet.
     * @param {LexicalSetUpdateArgs} args - Arguments to update one LexicalSet.
     * @example
     * // Update one LexicalSet
     * const lexicalSet = await prisma.lexicalSet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LexicalSetUpdateArgs>(args: SelectSubset<T, LexicalSetUpdateArgs<ExtArgs>>): Prisma__LexicalSetClient<$Result.GetResult<Prisma.$LexicalSetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LexicalSets.
     * @param {LexicalSetDeleteManyArgs} args - Arguments to filter LexicalSets to delete.
     * @example
     * // Delete a few LexicalSets
     * const { count } = await prisma.lexicalSet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LexicalSetDeleteManyArgs>(args?: SelectSubset<T, LexicalSetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LexicalSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LexicalSetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LexicalSets
     * const lexicalSet = await prisma.lexicalSet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LexicalSetUpdateManyArgs>(args: SelectSubset<T, LexicalSetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LexicalSets and returns the data updated in the database.
     * @param {LexicalSetUpdateManyAndReturnArgs} args - Arguments to update many LexicalSets.
     * @example
     * // Update many LexicalSets
     * const lexicalSet = await prisma.lexicalSet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LexicalSets and only return the `id`
     * const lexicalSetWithIdOnly = await prisma.lexicalSet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LexicalSetUpdateManyAndReturnArgs>(args: SelectSubset<T, LexicalSetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LexicalSetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LexicalSet.
     * @param {LexicalSetUpsertArgs} args - Arguments to update or create a LexicalSet.
     * @example
     * // Update or create a LexicalSet
     * const lexicalSet = await prisma.lexicalSet.upsert({
     *   create: {
     *     // ... data to create a LexicalSet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LexicalSet we want to update
     *   }
     * })
     */
    upsert<T extends LexicalSetUpsertArgs>(args: SelectSubset<T, LexicalSetUpsertArgs<ExtArgs>>): Prisma__LexicalSetClient<$Result.GetResult<Prisma.$LexicalSetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LexicalSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LexicalSetCountArgs} args - Arguments to filter LexicalSets to count.
     * @example
     * // Count the number of LexicalSets
     * const count = await prisma.lexicalSet.count({
     *   where: {
     *     // ... the filter for the LexicalSets we want to count
     *   }
     * })
    **/
    count<T extends LexicalSetCountArgs>(
      args?: Subset<T, LexicalSetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LexicalSetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LexicalSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LexicalSetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LexicalSetAggregateArgs>(args: Subset<T, LexicalSetAggregateArgs>): Prisma.PrismaPromise<GetLexicalSetAggregateType<T>>

    /**
     * Group by LexicalSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LexicalSetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LexicalSetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LexicalSetGroupByArgs['orderBy'] }
        : { orderBy?: LexicalSetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LexicalSetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLexicalSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LexicalSet model
   */
  readonly fields: LexicalSetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LexicalSet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LexicalSetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usages<T extends LexicalSet$usagesArgs<ExtArgs> = {}>(args?: Subset<T, LexicalSet$usagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LexicalSetUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    words<T extends LexicalSet$wordsArgs<ExtArgs> = {}>(args?: Subset<T, LexicalSet$wordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LexicalSet model
   */
  interface LexicalSetFieldRefs {
    readonly id: FieldRef<"LexicalSet", 'Int'>
    readonly name: FieldRef<"LexicalSet", 'String'>
    readonly description: FieldRef<"LexicalSet", 'String'>
    readonly order: FieldRef<"LexicalSet", 'Int'>
    readonly category: FieldRef<"LexicalSet", 'String'>
    readonly createdAt: FieldRef<"LexicalSet", 'DateTime'>
    readonly updatedAt: FieldRef<"LexicalSet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LexicalSet findUnique
   */
  export type LexicalSetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSet
     */
    select?: LexicalSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSet
     */
    omit?: LexicalSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetInclude<ExtArgs> | null
    /**
     * Filter, which LexicalSet to fetch.
     */
    where: LexicalSetWhereUniqueInput
  }

  /**
   * LexicalSet findUniqueOrThrow
   */
  export type LexicalSetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSet
     */
    select?: LexicalSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSet
     */
    omit?: LexicalSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetInclude<ExtArgs> | null
    /**
     * Filter, which LexicalSet to fetch.
     */
    where: LexicalSetWhereUniqueInput
  }

  /**
   * LexicalSet findFirst
   */
  export type LexicalSetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSet
     */
    select?: LexicalSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSet
     */
    omit?: LexicalSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetInclude<ExtArgs> | null
    /**
     * Filter, which LexicalSet to fetch.
     */
    where?: LexicalSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LexicalSets to fetch.
     */
    orderBy?: LexicalSetOrderByWithRelationInput | LexicalSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LexicalSets.
     */
    cursor?: LexicalSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LexicalSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LexicalSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LexicalSets.
     */
    distinct?: LexicalSetScalarFieldEnum | LexicalSetScalarFieldEnum[]
  }

  /**
   * LexicalSet findFirstOrThrow
   */
  export type LexicalSetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSet
     */
    select?: LexicalSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSet
     */
    omit?: LexicalSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetInclude<ExtArgs> | null
    /**
     * Filter, which LexicalSet to fetch.
     */
    where?: LexicalSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LexicalSets to fetch.
     */
    orderBy?: LexicalSetOrderByWithRelationInput | LexicalSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LexicalSets.
     */
    cursor?: LexicalSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LexicalSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LexicalSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LexicalSets.
     */
    distinct?: LexicalSetScalarFieldEnum | LexicalSetScalarFieldEnum[]
  }

  /**
   * LexicalSet findMany
   */
  export type LexicalSetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSet
     */
    select?: LexicalSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSet
     */
    omit?: LexicalSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetInclude<ExtArgs> | null
    /**
     * Filter, which LexicalSets to fetch.
     */
    where?: LexicalSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LexicalSets to fetch.
     */
    orderBy?: LexicalSetOrderByWithRelationInput | LexicalSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LexicalSets.
     */
    cursor?: LexicalSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LexicalSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LexicalSets.
     */
    skip?: number
    distinct?: LexicalSetScalarFieldEnum | LexicalSetScalarFieldEnum[]
  }

  /**
   * LexicalSet create
   */
  export type LexicalSetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSet
     */
    select?: LexicalSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSet
     */
    omit?: LexicalSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetInclude<ExtArgs> | null
    /**
     * The data needed to create a LexicalSet.
     */
    data: XOR<LexicalSetCreateInput, LexicalSetUncheckedCreateInput>
  }

  /**
   * LexicalSet createMany
   */
  export type LexicalSetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LexicalSets.
     */
    data: LexicalSetCreateManyInput | LexicalSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LexicalSet createManyAndReturn
   */
  export type LexicalSetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSet
     */
    select?: LexicalSetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSet
     */
    omit?: LexicalSetOmit<ExtArgs> | null
    /**
     * The data used to create many LexicalSets.
     */
    data: LexicalSetCreateManyInput | LexicalSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LexicalSet update
   */
  export type LexicalSetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSet
     */
    select?: LexicalSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSet
     */
    omit?: LexicalSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetInclude<ExtArgs> | null
    /**
     * The data needed to update a LexicalSet.
     */
    data: XOR<LexicalSetUpdateInput, LexicalSetUncheckedUpdateInput>
    /**
     * Choose, which LexicalSet to update.
     */
    where: LexicalSetWhereUniqueInput
  }

  /**
   * LexicalSet updateMany
   */
  export type LexicalSetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LexicalSets.
     */
    data: XOR<LexicalSetUpdateManyMutationInput, LexicalSetUncheckedUpdateManyInput>
    /**
     * Filter which LexicalSets to update
     */
    where?: LexicalSetWhereInput
    /**
     * Limit how many LexicalSets to update.
     */
    limit?: number
  }

  /**
   * LexicalSet updateManyAndReturn
   */
  export type LexicalSetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSet
     */
    select?: LexicalSetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSet
     */
    omit?: LexicalSetOmit<ExtArgs> | null
    /**
     * The data used to update LexicalSets.
     */
    data: XOR<LexicalSetUpdateManyMutationInput, LexicalSetUncheckedUpdateManyInput>
    /**
     * Filter which LexicalSets to update
     */
    where?: LexicalSetWhereInput
    /**
     * Limit how many LexicalSets to update.
     */
    limit?: number
  }

  /**
   * LexicalSet upsert
   */
  export type LexicalSetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSet
     */
    select?: LexicalSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSet
     */
    omit?: LexicalSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetInclude<ExtArgs> | null
    /**
     * The filter to search for the LexicalSet to update in case it exists.
     */
    where: LexicalSetWhereUniqueInput
    /**
     * In case the LexicalSet found by the `where` argument doesn't exist, create a new LexicalSet with this data.
     */
    create: XOR<LexicalSetCreateInput, LexicalSetUncheckedCreateInput>
    /**
     * In case the LexicalSet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LexicalSetUpdateInput, LexicalSetUncheckedUpdateInput>
  }

  /**
   * LexicalSet delete
   */
  export type LexicalSetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSet
     */
    select?: LexicalSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSet
     */
    omit?: LexicalSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetInclude<ExtArgs> | null
    /**
     * Filter which LexicalSet to delete.
     */
    where: LexicalSetWhereUniqueInput
  }

  /**
   * LexicalSet deleteMany
   */
  export type LexicalSetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LexicalSets to delete
     */
    where?: LexicalSetWhereInput
    /**
     * Limit how many LexicalSets to delete.
     */
    limit?: number
  }

  /**
   * LexicalSet.usages
   */
  export type LexicalSet$usagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSetUsage
     */
    select?: LexicalSetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSetUsage
     */
    omit?: LexicalSetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetUsageInclude<ExtArgs> | null
    where?: LexicalSetUsageWhereInput
    orderBy?: LexicalSetUsageOrderByWithRelationInput | LexicalSetUsageOrderByWithRelationInput[]
    cursor?: LexicalSetUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LexicalSetUsageScalarFieldEnum | LexicalSetUsageScalarFieldEnum[]
  }

  /**
   * LexicalSet.words
   */
  export type LexicalSet$wordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Word
     */
    select?: WordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Word
     */
    omit?: WordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordInclude<ExtArgs> | null
    where?: WordWhereInput
    orderBy?: WordOrderByWithRelationInput | WordOrderByWithRelationInput[]
    cursor?: WordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WordScalarFieldEnum | WordScalarFieldEnum[]
  }

  /**
   * LexicalSet without action
   */
  export type LexicalSetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSet
     */
    select?: LexicalSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSet
     */
    omit?: LexicalSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetInclude<ExtArgs> | null
  }


  /**
   * Model LexicalSetUsage
   */

  export type AggregateLexicalSetUsage = {
    _count: LexicalSetUsageCountAggregateOutputType | null
    _avg: LexicalSetUsageAvgAggregateOutputType | null
    _sum: LexicalSetUsageSumAggregateOutputType | null
    _min: LexicalSetUsageMinAggregateOutputType | null
    _max: LexicalSetUsageMaxAggregateOutputType | null
  }

  export type LexicalSetUsageAvgAggregateOutputType = {
    id: number | null
    lexicalSetId: number | null
    usageId: number | null
    order: number | null
  }

  export type LexicalSetUsageSumAggregateOutputType = {
    id: number | null
    lexicalSetId: number | null
    usageId: number | null
    order: number | null
  }

  export type LexicalSetUsageMinAggregateOutputType = {
    id: number | null
    lexicalSetId: number | null
    usageId: number | null
    order: number | null
  }

  export type LexicalSetUsageMaxAggregateOutputType = {
    id: number | null
    lexicalSetId: number | null
    usageId: number | null
    order: number | null
  }

  export type LexicalSetUsageCountAggregateOutputType = {
    id: number
    lexicalSetId: number
    usageId: number
    order: number
    _all: number
  }


  export type LexicalSetUsageAvgAggregateInputType = {
    id?: true
    lexicalSetId?: true
    usageId?: true
    order?: true
  }

  export type LexicalSetUsageSumAggregateInputType = {
    id?: true
    lexicalSetId?: true
    usageId?: true
    order?: true
  }

  export type LexicalSetUsageMinAggregateInputType = {
    id?: true
    lexicalSetId?: true
    usageId?: true
    order?: true
  }

  export type LexicalSetUsageMaxAggregateInputType = {
    id?: true
    lexicalSetId?: true
    usageId?: true
    order?: true
  }

  export type LexicalSetUsageCountAggregateInputType = {
    id?: true
    lexicalSetId?: true
    usageId?: true
    order?: true
    _all?: true
  }

  export type LexicalSetUsageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LexicalSetUsage to aggregate.
     */
    where?: LexicalSetUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LexicalSetUsages to fetch.
     */
    orderBy?: LexicalSetUsageOrderByWithRelationInput | LexicalSetUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LexicalSetUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LexicalSetUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LexicalSetUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LexicalSetUsages
    **/
    _count?: true | LexicalSetUsageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LexicalSetUsageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LexicalSetUsageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LexicalSetUsageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LexicalSetUsageMaxAggregateInputType
  }

  export type GetLexicalSetUsageAggregateType<T extends LexicalSetUsageAggregateArgs> = {
        [P in keyof T & keyof AggregateLexicalSetUsage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLexicalSetUsage[P]>
      : GetScalarType<T[P], AggregateLexicalSetUsage[P]>
  }




  export type LexicalSetUsageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LexicalSetUsageWhereInput
    orderBy?: LexicalSetUsageOrderByWithAggregationInput | LexicalSetUsageOrderByWithAggregationInput[]
    by: LexicalSetUsageScalarFieldEnum[] | LexicalSetUsageScalarFieldEnum
    having?: LexicalSetUsageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LexicalSetUsageCountAggregateInputType | true
    _avg?: LexicalSetUsageAvgAggregateInputType
    _sum?: LexicalSetUsageSumAggregateInputType
    _min?: LexicalSetUsageMinAggregateInputType
    _max?: LexicalSetUsageMaxAggregateInputType
  }

  export type LexicalSetUsageGroupByOutputType = {
    id: number
    lexicalSetId: number
    usageId: number
    order: number | null
    _count: LexicalSetUsageCountAggregateOutputType | null
    _avg: LexicalSetUsageAvgAggregateOutputType | null
    _sum: LexicalSetUsageSumAggregateOutputType | null
    _min: LexicalSetUsageMinAggregateOutputType | null
    _max: LexicalSetUsageMaxAggregateOutputType | null
  }

  type GetLexicalSetUsageGroupByPayload<T extends LexicalSetUsageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LexicalSetUsageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LexicalSetUsageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LexicalSetUsageGroupByOutputType[P]>
            : GetScalarType<T[P], LexicalSetUsageGroupByOutputType[P]>
        }
      >
    >


  export type LexicalSetUsageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lexicalSetId?: boolean
    usageId?: boolean
    order?: boolean
    lexicalSet?: boolean | LexicalSetDefaultArgs<ExtArgs>
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lexicalSetUsage"]>

  export type LexicalSetUsageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lexicalSetId?: boolean
    usageId?: boolean
    order?: boolean
    lexicalSet?: boolean | LexicalSetDefaultArgs<ExtArgs>
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lexicalSetUsage"]>

  export type LexicalSetUsageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lexicalSetId?: boolean
    usageId?: boolean
    order?: boolean
    lexicalSet?: boolean | LexicalSetDefaultArgs<ExtArgs>
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lexicalSetUsage"]>

  export type LexicalSetUsageSelectScalar = {
    id?: boolean
    lexicalSetId?: boolean
    usageId?: boolean
    order?: boolean
  }

  export type LexicalSetUsageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "lexicalSetId" | "usageId" | "order", ExtArgs["result"]["lexicalSetUsage"]>
  export type LexicalSetUsageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lexicalSet?: boolean | LexicalSetDefaultArgs<ExtArgs>
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }
  export type LexicalSetUsageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lexicalSet?: boolean | LexicalSetDefaultArgs<ExtArgs>
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }
  export type LexicalSetUsageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lexicalSet?: boolean | LexicalSetDefaultArgs<ExtArgs>
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }

  export type $LexicalSetUsagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LexicalSetUsage"
    objects: {
      lexicalSet: Prisma.$LexicalSetPayload<ExtArgs>
      wordUsage: Prisma.$WordUsagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      lexicalSetId: number
      usageId: number
      order: number | null
    }, ExtArgs["result"]["lexicalSetUsage"]>
    composites: {}
  }

  type LexicalSetUsageGetPayload<S extends boolean | null | undefined | LexicalSetUsageDefaultArgs> = $Result.GetResult<Prisma.$LexicalSetUsagePayload, S>

  type LexicalSetUsageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LexicalSetUsageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LexicalSetUsageCountAggregateInputType | true
    }

  export interface LexicalSetUsageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LexicalSetUsage'], meta: { name: 'LexicalSetUsage' } }
    /**
     * Find zero or one LexicalSetUsage that matches the filter.
     * @param {LexicalSetUsageFindUniqueArgs} args - Arguments to find a LexicalSetUsage
     * @example
     * // Get one LexicalSetUsage
     * const lexicalSetUsage = await prisma.lexicalSetUsage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LexicalSetUsageFindUniqueArgs>(args: SelectSubset<T, LexicalSetUsageFindUniqueArgs<ExtArgs>>): Prisma__LexicalSetUsageClient<$Result.GetResult<Prisma.$LexicalSetUsagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LexicalSetUsage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LexicalSetUsageFindUniqueOrThrowArgs} args - Arguments to find a LexicalSetUsage
     * @example
     * // Get one LexicalSetUsage
     * const lexicalSetUsage = await prisma.lexicalSetUsage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LexicalSetUsageFindUniqueOrThrowArgs>(args: SelectSubset<T, LexicalSetUsageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LexicalSetUsageClient<$Result.GetResult<Prisma.$LexicalSetUsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LexicalSetUsage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LexicalSetUsageFindFirstArgs} args - Arguments to find a LexicalSetUsage
     * @example
     * // Get one LexicalSetUsage
     * const lexicalSetUsage = await prisma.lexicalSetUsage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LexicalSetUsageFindFirstArgs>(args?: SelectSubset<T, LexicalSetUsageFindFirstArgs<ExtArgs>>): Prisma__LexicalSetUsageClient<$Result.GetResult<Prisma.$LexicalSetUsagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LexicalSetUsage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LexicalSetUsageFindFirstOrThrowArgs} args - Arguments to find a LexicalSetUsage
     * @example
     * // Get one LexicalSetUsage
     * const lexicalSetUsage = await prisma.lexicalSetUsage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LexicalSetUsageFindFirstOrThrowArgs>(args?: SelectSubset<T, LexicalSetUsageFindFirstOrThrowArgs<ExtArgs>>): Prisma__LexicalSetUsageClient<$Result.GetResult<Prisma.$LexicalSetUsagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LexicalSetUsages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LexicalSetUsageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LexicalSetUsages
     * const lexicalSetUsages = await prisma.lexicalSetUsage.findMany()
     * 
     * // Get first 10 LexicalSetUsages
     * const lexicalSetUsages = await prisma.lexicalSetUsage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lexicalSetUsageWithIdOnly = await prisma.lexicalSetUsage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LexicalSetUsageFindManyArgs>(args?: SelectSubset<T, LexicalSetUsageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LexicalSetUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LexicalSetUsage.
     * @param {LexicalSetUsageCreateArgs} args - Arguments to create a LexicalSetUsage.
     * @example
     * // Create one LexicalSetUsage
     * const LexicalSetUsage = await prisma.lexicalSetUsage.create({
     *   data: {
     *     // ... data to create a LexicalSetUsage
     *   }
     * })
     * 
     */
    create<T extends LexicalSetUsageCreateArgs>(args: SelectSubset<T, LexicalSetUsageCreateArgs<ExtArgs>>): Prisma__LexicalSetUsageClient<$Result.GetResult<Prisma.$LexicalSetUsagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LexicalSetUsages.
     * @param {LexicalSetUsageCreateManyArgs} args - Arguments to create many LexicalSetUsages.
     * @example
     * // Create many LexicalSetUsages
     * const lexicalSetUsage = await prisma.lexicalSetUsage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LexicalSetUsageCreateManyArgs>(args?: SelectSubset<T, LexicalSetUsageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LexicalSetUsages and returns the data saved in the database.
     * @param {LexicalSetUsageCreateManyAndReturnArgs} args - Arguments to create many LexicalSetUsages.
     * @example
     * // Create many LexicalSetUsages
     * const lexicalSetUsage = await prisma.lexicalSetUsage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LexicalSetUsages and only return the `id`
     * const lexicalSetUsageWithIdOnly = await prisma.lexicalSetUsage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LexicalSetUsageCreateManyAndReturnArgs>(args?: SelectSubset<T, LexicalSetUsageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LexicalSetUsagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LexicalSetUsage.
     * @param {LexicalSetUsageDeleteArgs} args - Arguments to delete one LexicalSetUsage.
     * @example
     * // Delete one LexicalSetUsage
     * const LexicalSetUsage = await prisma.lexicalSetUsage.delete({
     *   where: {
     *     // ... filter to delete one LexicalSetUsage
     *   }
     * })
     * 
     */
    delete<T extends LexicalSetUsageDeleteArgs>(args: SelectSubset<T, LexicalSetUsageDeleteArgs<ExtArgs>>): Prisma__LexicalSetUsageClient<$Result.GetResult<Prisma.$LexicalSetUsagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LexicalSetUsage.
     * @param {LexicalSetUsageUpdateArgs} args - Arguments to update one LexicalSetUsage.
     * @example
     * // Update one LexicalSetUsage
     * const lexicalSetUsage = await prisma.lexicalSetUsage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LexicalSetUsageUpdateArgs>(args: SelectSubset<T, LexicalSetUsageUpdateArgs<ExtArgs>>): Prisma__LexicalSetUsageClient<$Result.GetResult<Prisma.$LexicalSetUsagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LexicalSetUsages.
     * @param {LexicalSetUsageDeleteManyArgs} args - Arguments to filter LexicalSetUsages to delete.
     * @example
     * // Delete a few LexicalSetUsages
     * const { count } = await prisma.lexicalSetUsage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LexicalSetUsageDeleteManyArgs>(args?: SelectSubset<T, LexicalSetUsageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LexicalSetUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LexicalSetUsageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LexicalSetUsages
     * const lexicalSetUsage = await prisma.lexicalSetUsage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LexicalSetUsageUpdateManyArgs>(args: SelectSubset<T, LexicalSetUsageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LexicalSetUsages and returns the data updated in the database.
     * @param {LexicalSetUsageUpdateManyAndReturnArgs} args - Arguments to update many LexicalSetUsages.
     * @example
     * // Update many LexicalSetUsages
     * const lexicalSetUsage = await prisma.lexicalSetUsage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LexicalSetUsages and only return the `id`
     * const lexicalSetUsageWithIdOnly = await prisma.lexicalSetUsage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LexicalSetUsageUpdateManyAndReturnArgs>(args: SelectSubset<T, LexicalSetUsageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LexicalSetUsagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LexicalSetUsage.
     * @param {LexicalSetUsageUpsertArgs} args - Arguments to update or create a LexicalSetUsage.
     * @example
     * // Update or create a LexicalSetUsage
     * const lexicalSetUsage = await prisma.lexicalSetUsage.upsert({
     *   create: {
     *     // ... data to create a LexicalSetUsage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LexicalSetUsage we want to update
     *   }
     * })
     */
    upsert<T extends LexicalSetUsageUpsertArgs>(args: SelectSubset<T, LexicalSetUsageUpsertArgs<ExtArgs>>): Prisma__LexicalSetUsageClient<$Result.GetResult<Prisma.$LexicalSetUsagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LexicalSetUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LexicalSetUsageCountArgs} args - Arguments to filter LexicalSetUsages to count.
     * @example
     * // Count the number of LexicalSetUsages
     * const count = await prisma.lexicalSetUsage.count({
     *   where: {
     *     // ... the filter for the LexicalSetUsages we want to count
     *   }
     * })
    **/
    count<T extends LexicalSetUsageCountArgs>(
      args?: Subset<T, LexicalSetUsageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LexicalSetUsageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LexicalSetUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LexicalSetUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LexicalSetUsageAggregateArgs>(args: Subset<T, LexicalSetUsageAggregateArgs>): Prisma.PrismaPromise<GetLexicalSetUsageAggregateType<T>>

    /**
     * Group by LexicalSetUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LexicalSetUsageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LexicalSetUsageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LexicalSetUsageGroupByArgs['orderBy'] }
        : { orderBy?: LexicalSetUsageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LexicalSetUsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLexicalSetUsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LexicalSetUsage model
   */
  readonly fields: LexicalSetUsageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LexicalSetUsage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LexicalSetUsageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lexicalSet<T extends LexicalSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LexicalSetDefaultArgs<ExtArgs>>): Prisma__LexicalSetClient<$Result.GetResult<Prisma.$LexicalSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    wordUsage<T extends WordUsageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WordUsageDefaultArgs<ExtArgs>>): Prisma__WordUsageClient<$Result.GetResult<Prisma.$WordUsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LexicalSetUsage model
   */
  interface LexicalSetUsageFieldRefs {
    readonly id: FieldRef<"LexicalSetUsage", 'Int'>
    readonly lexicalSetId: FieldRef<"LexicalSetUsage", 'Int'>
    readonly usageId: FieldRef<"LexicalSetUsage", 'Int'>
    readonly order: FieldRef<"LexicalSetUsage", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * LexicalSetUsage findUnique
   */
  export type LexicalSetUsageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSetUsage
     */
    select?: LexicalSetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSetUsage
     */
    omit?: LexicalSetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetUsageInclude<ExtArgs> | null
    /**
     * Filter, which LexicalSetUsage to fetch.
     */
    where: LexicalSetUsageWhereUniqueInput
  }

  /**
   * LexicalSetUsage findUniqueOrThrow
   */
  export type LexicalSetUsageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSetUsage
     */
    select?: LexicalSetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSetUsage
     */
    omit?: LexicalSetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetUsageInclude<ExtArgs> | null
    /**
     * Filter, which LexicalSetUsage to fetch.
     */
    where: LexicalSetUsageWhereUniqueInput
  }

  /**
   * LexicalSetUsage findFirst
   */
  export type LexicalSetUsageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSetUsage
     */
    select?: LexicalSetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSetUsage
     */
    omit?: LexicalSetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetUsageInclude<ExtArgs> | null
    /**
     * Filter, which LexicalSetUsage to fetch.
     */
    where?: LexicalSetUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LexicalSetUsages to fetch.
     */
    orderBy?: LexicalSetUsageOrderByWithRelationInput | LexicalSetUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LexicalSetUsages.
     */
    cursor?: LexicalSetUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LexicalSetUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LexicalSetUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LexicalSetUsages.
     */
    distinct?: LexicalSetUsageScalarFieldEnum | LexicalSetUsageScalarFieldEnum[]
  }

  /**
   * LexicalSetUsage findFirstOrThrow
   */
  export type LexicalSetUsageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSetUsage
     */
    select?: LexicalSetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSetUsage
     */
    omit?: LexicalSetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetUsageInclude<ExtArgs> | null
    /**
     * Filter, which LexicalSetUsage to fetch.
     */
    where?: LexicalSetUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LexicalSetUsages to fetch.
     */
    orderBy?: LexicalSetUsageOrderByWithRelationInput | LexicalSetUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LexicalSetUsages.
     */
    cursor?: LexicalSetUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LexicalSetUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LexicalSetUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LexicalSetUsages.
     */
    distinct?: LexicalSetUsageScalarFieldEnum | LexicalSetUsageScalarFieldEnum[]
  }

  /**
   * LexicalSetUsage findMany
   */
  export type LexicalSetUsageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSetUsage
     */
    select?: LexicalSetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSetUsage
     */
    omit?: LexicalSetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetUsageInclude<ExtArgs> | null
    /**
     * Filter, which LexicalSetUsages to fetch.
     */
    where?: LexicalSetUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LexicalSetUsages to fetch.
     */
    orderBy?: LexicalSetUsageOrderByWithRelationInput | LexicalSetUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LexicalSetUsages.
     */
    cursor?: LexicalSetUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LexicalSetUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LexicalSetUsages.
     */
    skip?: number
    distinct?: LexicalSetUsageScalarFieldEnum | LexicalSetUsageScalarFieldEnum[]
  }

  /**
   * LexicalSetUsage create
   */
  export type LexicalSetUsageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSetUsage
     */
    select?: LexicalSetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSetUsage
     */
    omit?: LexicalSetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetUsageInclude<ExtArgs> | null
    /**
     * The data needed to create a LexicalSetUsage.
     */
    data: XOR<LexicalSetUsageCreateInput, LexicalSetUsageUncheckedCreateInput>
  }

  /**
   * LexicalSetUsage createMany
   */
  export type LexicalSetUsageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LexicalSetUsages.
     */
    data: LexicalSetUsageCreateManyInput | LexicalSetUsageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LexicalSetUsage createManyAndReturn
   */
  export type LexicalSetUsageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSetUsage
     */
    select?: LexicalSetUsageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSetUsage
     */
    omit?: LexicalSetUsageOmit<ExtArgs> | null
    /**
     * The data used to create many LexicalSetUsages.
     */
    data: LexicalSetUsageCreateManyInput | LexicalSetUsageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetUsageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LexicalSetUsage update
   */
  export type LexicalSetUsageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSetUsage
     */
    select?: LexicalSetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSetUsage
     */
    omit?: LexicalSetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetUsageInclude<ExtArgs> | null
    /**
     * The data needed to update a LexicalSetUsage.
     */
    data: XOR<LexicalSetUsageUpdateInput, LexicalSetUsageUncheckedUpdateInput>
    /**
     * Choose, which LexicalSetUsage to update.
     */
    where: LexicalSetUsageWhereUniqueInput
  }

  /**
   * LexicalSetUsage updateMany
   */
  export type LexicalSetUsageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LexicalSetUsages.
     */
    data: XOR<LexicalSetUsageUpdateManyMutationInput, LexicalSetUsageUncheckedUpdateManyInput>
    /**
     * Filter which LexicalSetUsages to update
     */
    where?: LexicalSetUsageWhereInput
    /**
     * Limit how many LexicalSetUsages to update.
     */
    limit?: number
  }

  /**
   * LexicalSetUsage updateManyAndReturn
   */
  export type LexicalSetUsageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSetUsage
     */
    select?: LexicalSetUsageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSetUsage
     */
    omit?: LexicalSetUsageOmit<ExtArgs> | null
    /**
     * The data used to update LexicalSetUsages.
     */
    data: XOR<LexicalSetUsageUpdateManyMutationInput, LexicalSetUsageUncheckedUpdateManyInput>
    /**
     * Filter which LexicalSetUsages to update
     */
    where?: LexicalSetUsageWhereInput
    /**
     * Limit how many LexicalSetUsages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetUsageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LexicalSetUsage upsert
   */
  export type LexicalSetUsageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSetUsage
     */
    select?: LexicalSetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSetUsage
     */
    omit?: LexicalSetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetUsageInclude<ExtArgs> | null
    /**
     * The filter to search for the LexicalSetUsage to update in case it exists.
     */
    where: LexicalSetUsageWhereUniqueInput
    /**
     * In case the LexicalSetUsage found by the `where` argument doesn't exist, create a new LexicalSetUsage with this data.
     */
    create: XOR<LexicalSetUsageCreateInput, LexicalSetUsageUncheckedCreateInput>
    /**
     * In case the LexicalSetUsage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LexicalSetUsageUpdateInput, LexicalSetUsageUncheckedUpdateInput>
  }

  /**
   * LexicalSetUsage delete
   */
  export type LexicalSetUsageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSetUsage
     */
    select?: LexicalSetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSetUsage
     */
    omit?: LexicalSetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetUsageInclude<ExtArgs> | null
    /**
     * Filter which LexicalSetUsage to delete.
     */
    where: LexicalSetUsageWhereUniqueInput
  }

  /**
   * LexicalSetUsage deleteMany
   */
  export type LexicalSetUsageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LexicalSetUsages to delete
     */
    where?: LexicalSetUsageWhereInput
    /**
     * Limit how many LexicalSetUsages to delete.
     */
    limit?: number
  }

  /**
   * LexicalSetUsage without action
   */
  export type LexicalSetUsageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LexicalSetUsage
     */
    select?: LexicalSetUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LexicalSetUsage
     */
    omit?: LexicalSetUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LexicalSetUsageInclude<ExtArgs> | null
  }


  /**
   * Model Example
   */

  export type AggregateExample = {
    _count: ExampleCountAggregateOutputType | null
    _avg: ExampleAvgAggregateOutputType | null
    _sum: ExampleSumAggregateOutputType | null
    _min: ExampleMinAggregateOutputType | null
    _max: ExampleMaxAggregateOutputType | null
  }

  export type ExampleAvgAggregateOutputType = {
    id: number | null
    usageId: number | null
  }

  export type ExampleSumAggregateOutputType = {
    id: number | null
    usageId: number | null
  }

  export type ExampleMinAggregateOutputType = {
    id: number | null
    usageId: number | null
    sentence: string | null
    context: string | null
    difficulty: string | null
  }

  export type ExampleMaxAggregateOutputType = {
    id: number | null
    usageId: number | null
    sentence: string | null
    context: string | null
    difficulty: string | null
  }

  export type ExampleCountAggregateOutputType = {
    id: number
    usageId: number
    sentence: number
    context: number
    difficulty: number
    tags: number
    _all: number
  }


  export type ExampleAvgAggregateInputType = {
    id?: true
    usageId?: true
  }

  export type ExampleSumAggregateInputType = {
    id?: true
    usageId?: true
  }

  export type ExampleMinAggregateInputType = {
    id?: true
    usageId?: true
    sentence?: true
    context?: true
    difficulty?: true
  }

  export type ExampleMaxAggregateInputType = {
    id?: true
    usageId?: true
    sentence?: true
    context?: true
    difficulty?: true
  }

  export type ExampleCountAggregateInputType = {
    id?: true
    usageId?: true
    sentence?: true
    context?: true
    difficulty?: true
    tags?: true
    _all?: true
  }

  export type ExampleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Example to aggregate.
     */
    where?: ExampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Examples to fetch.
     */
    orderBy?: ExampleOrderByWithRelationInput | ExampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Examples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Examples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Examples
    **/
    _count?: true | ExampleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExampleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExampleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExampleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExampleMaxAggregateInputType
  }

  export type GetExampleAggregateType<T extends ExampleAggregateArgs> = {
        [P in keyof T & keyof AggregateExample]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExample[P]>
      : GetScalarType<T[P], AggregateExample[P]>
  }




  export type ExampleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExampleWhereInput
    orderBy?: ExampleOrderByWithAggregationInput | ExampleOrderByWithAggregationInput[]
    by: ExampleScalarFieldEnum[] | ExampleScalarFieldEnum
    having?: ExampleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExampleCountAggregateInputType | true
    _avg?: ExampleAvgAggregateInputType
    _sum?: ExampleSumAggregateInputType
    _min?: ExampleMinAggregateInputType
    _max?: ExampleMaxAggregateInputType
  }

  export type ExampleGroupByOutputType = {
    id: number
    usageId: number
    sentence: string
    context: string | null
    difficulty: string | null
    tags: string[]
    _count: ExampleCountAggregateOutputType | null
    _avg: ExampleAvgAggregateOutputType | null
    _sum: ExampleSumAggregateOutputType | null
    _min: ExampleMinAggregateOutputType | null
    _max: ExampleMaxAggregateOutputType | null
  }

  type GetExampleGroupByPayload<T extends ExampleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExampleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExampleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExampleGroupByOutputType[P]>
            : GetScalarType<T[P], ExampleGroupByOutputType[P]>
        }
      >
    >


  export type ExampleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usageId?: boolean
    sentence?: boolean
    context?: boolean
    difficulty?: boolean
    tags?: boolean
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["example"]>

  export type ExampleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usageId?: boolean
    sentence?: boolean
    context?: boolean
    difficulty?: boolean
    tags?: boolean
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["example"]>

  export type ExampleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usageId?: boolean
    sentence?: boolean
    context?: boolean
    difficulty?: boolean
    tags?: boolean
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["example"]>

  export type ExampleSelectScalar = {
    id?: boolean
    usageId?: boolean
    sentence?: boolean
    context?: boolean
    difficulty?: boolean
    tags?: boolean
  }

  export type ExampleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "usageId" | "sentence" | "context" | "difficulty" | "tags", ExtArgs["result"]["example"]>
  export type ExampleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }
  export type ExampleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }
  export type ExampleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }

  export type $ExamplePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Example"
    objects: {
      wordUsage: Prisma.$WordUsagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usageId: number
      sentence: string
      context: string | null
      difficulty: string | null
      tags: string[]
    }, ExtArgs["result"]["example"]>
    composites: {}
  }

  type ExampleGetPayload<S extends boolean | null | undefined | ExampleDefaultArgs> = $Result.GetResult<Prisma.$ExamplePayload, S>

  type ExampleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExampleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExampleCountAggregateInputType | true
    }

  export interface ExampleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Example'], meta: { name: 'Example' } }
    /**
     * Find zero or one Example that matches the filter.
     * @param {ExampleFindUniqueArgs} args - Arguments to find a Example
     * @example
     * // Get one Example
     * const example = await prisma.example.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExampleFindUniqueArgs>(args: SelectSubset<T, ExampleFindUniqueArgs<ExtArgs>>): Prisma__ExampleClient<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Example that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExampleFindUniqueOrThrowArgs} args - Arguments to find a Example
     * @example
     * // Get one Example
     * const example = await prisma.example.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExampleFindUniqueOrThrowArgs>(args: SelectSubset<T, ExampleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExampleClient<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Example that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExampleFindFirstArgs} args - Arguments to find a Example
     * @example
     * // Get one Example
     * const example = await prisma.example.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExampleFindFirstArgs>(args?: SelectSubset<T, ExampleFindFirstArgs<ExtArgs>>): Prisma__ExampleClient<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Example that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExampleFindFirstOrThrowArgs} args - Arguments to find a Example
     * @example
     * // Get one Example
     * const example = await prisma.example.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExampleFindFirstOrThrowArgs>(args?: SelectSubset<T, ExampleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExampleClient<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Examples that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExampleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Examples
     * const examples = await prisma.example.findMany()
     * 
     * // Get first 10 Examples
     * const examples = await prisma.example.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exampleWithIdOnly = await prisma.example.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExampleFindManyArgs>(args?: SelectSubset<T, ExampleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Example.
     * @param {ExampleCreateArgs} args - Arguments to create a Example.
     * @example
     * // Create one Example
     * const Example = await prisma.example.create({
     *   data: {
     *     // ... data to create a Example
     *   }
     * })
     * 
     */
    create<T extends ExampleCreateArgs>(args: SelectSubset<T, ExampleCreateArgs<ExtArgs>>): Prisma__ExampleClient<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Examples.
     * @param {ExampleCreateManyArgs} args - Arguments to create many Examples.
     * @example
     * // Create many Examples
     * const example = await prisma.example.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExampleCreateManyArgs>(args?: SelectSubset<T, ExampleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Examples and returns the data saved in the database.
     * @param {ExampleCreateManyAndReturnArgs} args - Arguments to create many Examples.
     * @example
     * // Create many Examples
     * const example = await prisma.example.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Examples and only return the `id`
     * const exampleWithIdOnly = await prisma.example.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExampleCreateManyAndReturnArgs>(args?: SelectSubset<T, ExampleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Example.
     * @param {ExampleDeleteArgs} args - Arguments to delete one Example.
     * @example
     * // Delete one Example
     * const Example = await prisma.example.delete({
     *   where: {
     *     // ... filter to delete one Example
     *   }
     * })
     * 
     */
    delete<T extends ExampleDeleteArgs>(args: SelectSubset<T, ExampleDeleteArgs<ExtArgs>>): Prisma__ExampleClient<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Example.
     * @param {ExampleUpdateArgs} args - Arguments to update one Example.
     * @example
     * // Update one Example
     * const example = await prisma.example.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExampleUpdateArgs>(args: SelectSubset<T, ExampleUpdateArgs<ExtArgs>>): Prisma__ExampleClient<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Examples.
     * @param {ExampleDeleteManyArgs} args - Arguments to filter Examples to delete.
     * @example
     * // Delete a few Examples
     * const { count } = await prisma.example.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExampleDeleteManyArgs>(args?: SelectSubset<T, ExampleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Examples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExampleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Examples
     * const example = await prisma.example.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExampleUpdateManyArgs>(args: SelectSubset<T, ExampleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Examples and returns the data updated in the database.
     * @param {ExampleUpdateManyAndReturnArgs} args - Arguments to update many Examples.
     * @example
     * // Update many Examples
     * const example = await prisma.example.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Examples and only return the `id`
     * const exampleWithIdOnly = await prisma.example.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExampleUpdateManyAndReturnArgs>(args: SelectSubset<T, ExampleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Example.
     * @param {ExampleUpsertArgs} args - Arguments to update or create a Example.
     * @example
     * // Update or create a Example
     * const example = await prisma.example.upsert({
     *   create: {
     *     // ... data to create a Example
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Example we want to update
     *   }
     * })
     */
    upsert<T extends ExampleUpsertArgs>(args: SelectSubset<T, ExampleUpsertArgs<ExtArgs>>): Prisma__ExampleClient<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Examples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExampleCountArgs} args - Arguments to filter Examples to count.
     * @example
     * // Count the number of Examples
     * const count = await prisma.example.count({
     *   where: {
     *     // ... the filter for the Examples we want to count
     *   }
     * })
    **/
    count<T extends ExampleCountArgs>(
      args?: Subset<T, ExampleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExampleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Example.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExampleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExampleAggregateArgs>(args: Subset<T, ExampleAggregateArgs>): Prisma.PrismaPromise<GetExampleAggregateType<T>>

    /**
     * Group by Example.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExampleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExampleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExampleGroupByArgs['orderBy'] }
        : { orderBy?: ExampleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExampleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExampleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Example model
   */
  readonly fields: ExampleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Example.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExampleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wordUsage<T extends WordUsageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WordUsageDefaultArgs<ExtArgs>>): Prisma__WordUsageClient<$Result.GetResult<Prisma.$WordUsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Example model
   */
  interface ExampleFieldRefs {
    readonly id: FieldRef<"Example", 'Int'>
    readonly usageId: FieldRef<"Example", 'Int'>
    readonly sentence: FieldRef<"Example", 'String'>
    readonly context: FieldRef<"Example", 'String'>
    readonly difficulty: FieldRef<"Example", 'String'>
    readonly tags: FieldRef<"Example", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * Example findUnique
   */
  export type ExampleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Example
     */
    omit?: ExampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExampleInclude<ExtArgs> | null
    /**
     * Filter, which Example to fetch.
     */
    where: ExampleWhereUniqueInput
  }

  /**
   * Example findUniqueOrThrow
   */
  export type ExampleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Example
     */
    omit?: ExampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExampleInclude<ExtArgs> | null
    /**
     * Filter, which Example to fetch.
     */
    where: ExampleWhereUniqueInput
  }

  /**
   * Example findFirst
   */
  export type ExampleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Example
     */
    omit?: ExampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExampleInclude<ExtArgs> | null
    /**
     * Filter, which Example to fetch.
     */
    where?: ExampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Examples to fetch.
     */
    orderBy?: ExampleOrderByWithRelationInput | ExampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Examples.
     */
    cursor?: ExampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Examples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Examples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Examples.
     */
    distinct?: ExampleScalarFieldEnum | ExampleScalarFieldEnum[]
  }

  /**
   * Example findFirstOrThrow
   */
  export type ExampleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Example
     */
    omit?: ExampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExampleInclude<ExtArgs> | null
    /**
     * Filter, which Example to fetch.
     */
    where?: ExampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Examples to fetch.
     */
    orderBy?: ExampleOrderByWithRelationInput | ExampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Examples.
     */
    cursor?: ExampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Examples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Examples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Examples.
     */
    distinct?: ExampleScalarFieldEnum | ExampleScalarFieldEnum[]
  }

  /**
   * Example findMany
   */
  export type ExampleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Example
     */
    omit?: ExampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExampleInclude<ExtArgs> | null
    /**
     * Filter, which Examples to fetch.
     */
    where?: ExampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Examples to fetch.
     */
    orderBy?: ExampleOrderByWithRelationInput | ExampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Examples.
     */
    cursor?: ExampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Examples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Examples.
     */
    skip?: number
    distinct?: ExampleScalarFieldEnum | ExampleScalarFieldEnum[]
  }

  /**
   * Example create
   */
  export type ExampleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Example
     */
    omit?: ExampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExampleInclude<ExtArgs> | null
    /**
     * The data needed to create a Example.
     */
    data: XOR<ExampleCreateInput, ExampleUncheckedCreateInput>
  }

  /**
   * Example createMany
   */
  export type ExampleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Examples.
     */
    data: ExampleCreateManyInput | ExampleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Example createManyAndReturn
   */
  export type ExampleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Example
     */
    omit?: ExampleOmit<ExtArgs> | null
    /**
     * The data used to create many Examples.
     */
    data: ExampleCreateManyInput | ExampleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExampleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Example update
   */
  export type ExampleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Example
     */
    omit?: ExampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExampleInclude<ExtArgs> | null
    /**
     * The data needed to update a Example.
     */
    data: XOR<ExampleUpdateInput, ExampleUncheckedUpdateInput>
    /**
     * Choose, which Example to update.
     */
    where: ExampleWhereUniqueInput
  }

  /**
   * Example updateMany
   */
  export type ExampleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Examples.
     */
    data: XOR<ExampleUpdateManyMutationInput, ExampleUncheckedUpdateManyInput>
    /**
     * Filter which Examples to update
     */
    where?: ExampleWhereInput
    /**
     * Limit how many Examples to update.
     */
    limit?: number
  }

  /**
   * Example updateManyAndReturn
   */
  export type ExampleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Example
     */
    omit?: ExampleOmit<ExtArgs> | null
    /**
     * The data used to update Examples.
     */
    data: XOR<ExampleUpdateManyMutationInput, ExampleUncheckedUpdateManyInput>
    /**
     * Filter which Examples to update
     */
    where?: ExampleWhereInput
    /**
     * Limit how many Examples to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExampleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Example upsert
   */
  export type ExampleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Example
     */
    omit?: ExampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExampleInclude<ExtArgs> | null
    /**
     * The filter to search for the Example to update in case it exists.
     */
    where: ExampleWhereUniqueInput
    /**
     * In case the Example found by the `where` argument doesn't exist, create a new Example with this data.
     */
    create: XOR<ExampleCreateInput, ExampleUncheckedCreateInput>
    /**
     * In case the Example was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExampleUpdateInput, ExampleUncheckedUpdateInput>
  }

  /**
   * Example delete
   */
  export type ExampleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Example
     */
    omit?: ExampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExampleInclude<ExtArgs> | null
    /**
     * Filter which Example to delete.
     */
    where: ExampleWhereUniqueInput
  }

  /**
   * Example deleteMany
   */
  export type ExampleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Examples to delete
     */
    where?: ExampleWhereInput
    /**
     * Limit how many Examples to delete.
     */
    limit?: number
  }

  /**
   * Example without action
   */
  export type ExampleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Example
     */
    omit?: ExampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExampleInclude<ExtArgs> | null
  }


  /**
   * Model ConsonantPhoneme
   */

  export type AggregateConsonantPhoneme = {
    _count: ConsonantPhonemeCountAggregateOutputType | null
    _avg: ConsonantPhonemeAvgAggregateOutputType | null
    _sum: ConsonantPhonemeSumAggregateOutputType | null
    _min: ConsonantPhonemeMinAggregateOutputType | null
    _max: ConsonantPhonemeMaxAggregateOutputType | null
  }

  export type ConsonantPhonemeAvgAggregateOutputType = {
    id: number | null
    order: number | null
  }

  export type ConsonantPhonemeSumAggregateOutputType = {
    id: number | null
    order: number | null
  }

  export type ConsonantPhonemeMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    order: number | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConsonantPhonemeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    order: number | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConsonantPhonemeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    order: number
    category: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ConsonantPhonemeAvgAggregateInputType = {
    id?: true
    order?: true
  }

  export type ConsonantPhonemeSumAggregateInputType = {
    id?: true
    order?: true
  }

  export type ConsonantPhonemeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    order?: true
    category?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConsonantPhonemeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    order?: true
    category?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConsonantPhonemeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    order?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ConsonantPhonemeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsonantPhoneme to aggregate.
     */
    where?: ConsonantPhonemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsonantPhonemes to fetch.
     */
    orderBy?: ConsonantPhonemeOrderByWithRelationInput | ConsonantPhonemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsonantPhonemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsonantPhonemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsonantPhonemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConsonantPhonemes
    **/
    _count?: true | ConsonantPhonemeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConsonantPhonemeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConsonantPhonemeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsonantPhonemeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsonantPhonemeMaxAggregateInputType
  }

  export type GetConsonantPhonemeAggregateType<T extends ConsonantPhonemeAggregateArgs> = {
        [P in keyof T & keyof AggregateConsonantPhoneme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsonantPhoneme[P]>
      : GetScalarType<T[P], AggregateConsonantPhoneme[P]>
  }




  export type ConsonantPhonemeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsonantPhonemeWhereInput
    orderBy?: ConsonantPhonemeOrderByWithAggregationInput | ConsonantPhonemeOrderByWithAggregationInput[]
    by: ConsonantPhonemeScalarFieldEnum[] | ConsonantPhonemeScalarFieldEnum
    having?: ConsonantPhonemeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsonantPhonemeCountAggregateInputType | true
    _avg?: ConsonantPhonemeAvgAggregateInputType
    _sum?: ConsonantPhonemeSumAggregateInputType
    _min?: ConsonantPhonemeMinAggregateInputType
    _max?: ConsonantPhonemeMaxAggregateInputType
  }

  export type ConsonantPhonemeGroupByOutputType = {
    id: number
    name: string
    description: string | null
    order: number | null
    category: string | null
    createdAt: Date
    updatedAt: Date
    _count: ConsonantPhonemeCountAggregateOutputType | null
    _avg: ConsonantPhonemeAvgAggregateOutputType | null
    _sum: ConsonantPhonemeSumAggregateOutputType | null
    _min: ConsonantPhonemeMinAggregateOutputType | null
    _max: ConsonantPhonemeMaxAggregateOutputType | null
  }

  type GetConsonantPhonemeGroupByPayload<T extends ConsonantPhonemeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsonantPhonemeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsonantPhonemeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsonantPhonemeGroupByOutputType[P]>
            : GetScalarType<T[P], ConsonantPhonemeGroupByOutputType[P]>
        }
      >
    >


  export type ConsonantPhonemeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    order?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usages?: boolean | ConsonantPhoneme$usagesArgs<ExtArgs>
    words?: boolean | ConsonantPhoneme$wordsArgs<ExtArgs>
    _count?: boolean | ConsonantPhonemeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consonantPhoneme"]>

  export type ConsonantPhonemeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    order?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["consonantPhoneme"]>

  export type ConsonantPhonemeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    order?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["consonantPhoneme"]>

  export type ConsonantPhonemeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    order?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ConsonantPhonemeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "order" | "category" | "createdAt" | "updatedAt", ExtArgs["result"]["consonantPhoneme"]>
  export type ConsonantPhonemeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usages?: boolean | ConsonantPhoneme$usagesArgs<ExtArgs>
    words?: boolean | ConsonantPhoneme$wordsArgs<ExtArgs>
    _count?: boolean | ConsonantPhonemeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConsonantPhonemeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ConsonantPhonemeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ConsonantPhonemePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConsonantPhoneme"
    objects: {
      usages: Prisma.$ConsonantPhonemeUsagePayload<ExtArgs>[]
      words: Prisma.$WordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      order: number | null
      category: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["consonantPhoneme"]>
    composites: {}
  }

  type ConsonantPhonemeGetPayload<S extends boolean | null | undefined | ConsonantPhonemeDefaultArgs> = $Result.GetResult<Prisma.$ConsonantPhonemePayload, S>

  type ConsonantPhonemeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConsonantPhonemeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConsonantPhonemeCountAggregateInputType | true
    }

  export interface ConsonantPhonemeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConsonantPhoneme'], meta: { name: 'ConsonantPhoneme' } }
    /**
     * Find zero or one ConsonantPhoneme that matches the filter.
     * @param {ConsonantPhonemeFindUniqueArgs} args - Arguments to find a ConsonantPhoneme
     * @example
     * // Get one ConsonantPhoneme
     * const consonantPhoneme = await prisma.consonantPhoneme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsonantPhonemeFindUniqueArgs>(args: SelectSubset<T, ConsonantPhonemeFindUniqueArgs<ExtArgs>>): Prisma__ConsonantPhonemeClient<$Result.GetResult<Prisma.$ConsonantPhonemePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ConsonantPhoneme that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConsonantPhonemeFindUniqueOrThrowArgs} args - Arguments to find a ConsonantPhoneme
     * @example
     * // Get one ConsonantPhoneme
     * const consonantPhoneme = await prisma.consonantPhoneme.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsonantPhonemeFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsonantPhonemeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsonantPhonemeClient<$Result.GetResult<Prisma.$ConsonantPhonemePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConsonantPhoneme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsonantPhonemeFindFirstArgs} args - Arguments to find a ConsonantPhoneme
     * @example
     * // Get one ConsonantPhoneme
     * const consonantPhoneme = await prisma.consonantPhoneme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsonantPhonemeFindFirstArgs>(args?: SelectSubset<T, ConsonantPhonemeFindFirstArgs<ExtArgs>>): Prisma__ConsonantPhonemeClient<$Result.GetResult<Prisma.$ConsonantPhonemePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConsonantPhoneme that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsonantPhonemeFindFirstOrThrowArgs} args - Arguments to find a ConsonantPhoneme
     * @example
     * // Get one ConsonantPhoneme
     * const consonantPhoneme = await prisma.consonantPhoneme.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsonantPhonemeFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsonantPhonemeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsonantPhonemeClient<$Result.GetResult<Prisma.$ConsonantPhonemePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ConsonantPhonemes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsonantPhonemeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConsonantPhonemes
     * const consonantPhonemes = await prisma.consonantPhoneme.findMany()
     * 
     * // Get first 10 ConsonantPhonemes
     * const consonantPhonemes = await prisma.consonantPhoneme.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consonantPhonemeWithIdOnly = await prisma.consonantPhoneme.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsonantPhonemeFindManyArgs>(args?: SelectSubset<T, ConsonantPhonemeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsonantPhonemePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ConsonantPhoneme.
     * @param {ConsonantPhonemeCreateArgs} args - Arguments to create a ConsonantPhoneme.
     * @example
     * // Create one ConsonantPhoneme
     * const ConsonantPhoneme = await prisma.consonantPhoneme.create({
     *   data: {
     *     // ... data to create a ConsonantPhoneme
     *   }
     * })
     * 
     */
    create<T extends ConsonantPhonemeCreateArgs>(args: SelectSubset<T, ConsonantPhonemeCreateArgs<ExtArgs>>): Prisma__ConsonantPhonemeClient<$Result.GetResult<Prisma.$ConsonantPhonemePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ConsonantPhonemes.
     * @param {ConsonantPhonemeCreateManyArgs} args - Arguments to create many ConsonantPhonemes.
     * @example
     * // Create many ConsonantPhonemes
     * const consonantPhoneme = await prisma.consonantPhoneme.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsonantPhonemeCreateManyArgs>(args?: SelectSubset<T, ConsonantPhonemeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ConsonantPhonemes and returns the data saved in the database.
     * @param {ConsonantPhonemeCreateManyAndReturnArgs} args - Arguments to create many ConsonantPhonemes.
     * @example
     * // Create many ConsonantPhonemes
     * const consonantPhoneme = await prisma.consonantPhoneme.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ConsonantPhonemes and only return the `id`
     * const consonantPhonemeWithIdOnly = await prisma.consonantPhoneme.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsonantPhonemeCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsonantPhonemeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsonantPhonemePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ConsonantPhoneme.
     * @param {ConsonantPhonemeDeleteArgs} args - Arguments to delete one ConsonantPhoneme.
     * @example
     * // Delete one ConsonantPhoneme
     * const ConsonantPhoneme = await prisma.consonantPhoneme.delete({
     *   where: {
     *     // ... filter to delete one ConsonantPhoneme
     *   }
     * })
     * 
     */
    delete<T extends ConsonantPhonemeDeleteArgs>(args: SelectSubset<T, ConsonantPhonemeDeleteArgs<ExtArgs>>): Prisma__ConsonantPhonemeClient<$Result.GetResult<Prisma.$ConsonantPhonemePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ConsonantPhoneme.
     * @param {ConsonantPhonemeUpdateArgs} args - Arguments to update one ConsonantPhoneme.
     * @example
     * // Update one ConsonantPhoneme
     * const consonantPhoneme = await prisma.consonantPhoneme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsonantPhonemeUpdateArgs>(args: SelectSubset<T, ConsonantPhonemeUpdateArgs<ExtArgs>>): Prisma__ConsonantPhonemeClient<$Result.GetResult<Prisma.$ConsonantPhonemePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ConsonantPhonemes.
     * @param {ConsonantPhonemeDeleteManyArgs} args - Arguments to filter ConsonantPhonemes to delete.
     * @example
     * // Delete a few ConsonantPhonemes
     * const { count } = await prisma.consonantPhoneme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsonantPhonemeDeleteManyArgs>(args?: SelectSubset<T, ConsonantPhonemeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsonantPhonemes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsonantPhonemeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConsonantPhonemes
     * const consonantPhoneme = await prisma.consonantPhoneme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsonantPhonemeUpdateManyArgs>(args: SelectSubset<T, ConsonantPhonemeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsonantPhonemes and returns the data updated in the database.
     * @param {ConsonantPhonemeUpdateManyAndReturnArgs} args - Arguments to update many ConsonantPhonemes.
     * @example
     * // Update many ConsonantPhonemes
     * const consonantPhoneme = await prisma.consonantPhoneme.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ConsonantPhonemes and only return the `id`
     * const consonantPhonemeWithIdOnly = await prisma.consonantPhoneme.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConsonantPhonemeUpdateManyAndReturnArgs>(args: SelectSubset<T, ConsonantPhonemeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsonantPhonemePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ConsonantPhoneme.
     * @param {ConsonantPhonemeUpsertArgs} args - Arguments to update or create a ConsonantPhoneme.
     * @example
     * // Update or create a ConsonantPhoneme
     * const consonantPhoneme = await prisma.consonantPhoneme.upsert({
     *   create: {
     *     // ... data to create a ConsonantPhoneme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConsonantPhoneme we want to update
     *   }
     * })
     */
    upsert<T extends ConsonantPhonemeUpsertArgs>(args: SelectSubset<T, ConsonantPhonemeUpsertArgs<ExtArgs>>): Prisma__ConsonantPhonemeClient<$Result.GetResult<Prisma.$ConsonantPhonemePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ConsonantPhonemes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsonantPhonemeCountArgs} args - Arguments to filter ConsonantPhonemes to count.
     * @example
     * // Count the number of ConsonantPhonemes
     * const count = await prisma.consonantPhoneme.count({
     *   where: {
     *     // ... the filter for the ConsonantPhonemes we want to count
     *   }
     * })
    **/
    count<T extends ConsonantPhonemeCountArgs>(
      args?: Subset<T, ConsonantPhonemeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsonantPhonemeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConsonantPhoneme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsonantPhonemeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsonantPhonemeAggregateArgs>(args: Subset<T, ConsonantPhonemeAggregateArgs>): Prisma.PrismaPromise<GetConsonantPhonemeAggregateType<T>>

    /**
     * Group by ConsonantPhoneme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsonantPhonemeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsonantPhonemeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsonantPhonemeGroupByArgs['orderBy'] }
        : { orderBy?: ConsonantPhonemeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsonantPhonemeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsonantPhonemeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConsonantPhoneme model
   */
  readonly fields: ConsonantPhonemeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConsonantPhoneme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsonantPhonemeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usages<T extends ConsonantPhoneme$usagesArgs<ExtArgs> = {}>(args?: Subset<T, ConsonantPhoneme$usagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsonantPhonemeUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    words<T extends ConsonantPhoneme$wordsArgs<ExtArgs> = {}>(args?: Subset<T, ConsonantPhoneme$wordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConsonantPhoneme model
   */
  interface ConsonantPhonemeFieldRefs {
    readonly id: FieldRef<"ConsonantPhoneme", 'Int'>
    readonly name: FieldRef<"ConsonantPhoneme", 'String'>
    readonly description: FieldRef<"ConsonantPhoneme", 'String'>
    readonly order: FieldRef<"ConsonantPhoneme", 'Int'>
    readonly category: FieldRef<"ConsonantPhoneme", 'String'>
    readonly createdAt: FieldRef<"ConsonantPhoneme", 'DateTime'>
    readonly updatedAt: FieldRef<"ConsonantPhoneme", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ConsonantPhoneme findUnique
   */
  export type ConsonantPhonemeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhoneme
     */
    select?: ConsonantPhonemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhoneme
     */
    omit?: ConsonantPhonemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeInclude<ExtArgs> | null
    /**
     * Filter, which ConsonantPhoneme to fetch.
     */
    where: ConsonantPhonemeWhereUniqueInput
  }

  /**
   * ConsonantPhoneme findUniqueOrThrow
   */
  export type ConsonantPhonemeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhoneme
     */
    select?: ConsonantPhonemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhoneme
     */
    omit?: ConsonantPhonemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeInclude<ExtArgs> | null
    /**
     * Filter, which ConsonantPhoneme to fetch.
     */
    where: ConsonantPhonemeWhereUniqueInput
  }

  /**
   * ConsonantPhoneme findFirst
   */
  export type ConsonantPhonemeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhoneme
     */
    select?: ConsonantPhonemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhoneme
     */
    omit?: ConsonantPhonemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeInclude<ExtArgs> | null
    /**
     * Filter, which ConsonantPhoneme to fetch.
     */
    where?: ConsonantPhonemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsonantPhonemes to fetch.
     */
    orderBy?: ConsonantPhonemeOrderByWithRelationInput | ConsonantPhonemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsonantPhonemes.
     */
    cursor?: ConsonantPhonemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsonantPhonemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsonantPhonemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsonantPhonemes.
     */
    distinct?: ConsonantPhonemeScalarFieldEnum | ConsonantPhonemeScalarFieldEnum[]
  }

  /**
   * ConsonantPhoneme findFirstOrThrow
   */
  export type ConsonantPhonemeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhoneme
     */
    select?: ConsonantPhonemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhoneme
     */
    omit?: ConsonantPhonemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeInclude<ExtArgs> | null
    /**
     * Filter, which ConsonantPhoneme to fetch.
     */
    where?: ConsonantPhonemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsonantPhonemes to fetch.
     */
    orderBy?: ConsonantPhonemeOrderByWithRelationInput | ConsonantPhonemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsonantPhonemes.
     */
    cursor?: ConsonantPhonemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsonantPhonemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsonantPhonemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsonantPhonemes.
     */
    distinct?: ConsonantPhonemeScalarFieldEnum | ConsonantPhonemeScalarFieldEnum[]
  }

  /**
   * ConsonantPhoneme findMany
   */
  export type ConsonantPhonemeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhoneme
     */
    select?: ConsonantPhonemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhoneme
     */
    omit?: ConsonantPhonemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeInclude<ExtArgs> | null
    /**
     * Filter, which ConsonantPhonemes to fetch.
     */
    where?: ConsonantPhonemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsonantPhonemes to fetch.
     */
    orderBy?: ConsonantPhonemeOrderByWithRelationInput | ConsonantPhonemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConsonantPhonemes.
     */
    cursor?: ConsonantPhonemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsonantPhonemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsonantPhonemes.
     */
    skip?: number
    distinct?: ConsonantPhonemeScalarFieldEnum | ConsonantPhonemeScalarFieldEnum[]
  }

  /**
   * ConsonantPhoneme create
   */
  export type ConsonantPhonemeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhoneme
     */
    select?: ConsonantPhonemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhoneme
     */
    omit?: ConsonantPhonemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeInclude<ExtArgs> | null
    /**
     * The data needed to create a ConsonantPhoneme.
     */
    data: XOR<ConsonantPhonemeCreateInput, ConsonantPhonemeUncheckedCreateInput>
  }

  /**
   * ConsonantPhoneme createMany
   */
  export type ConsonantPhonemeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConsonantPhonemes.
     */
    data: ConsonantPhonemeCreateManyInput | ConsonantPhonemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConsonantPhoneme createManyAndReturn
   */
  export type ConsonantPhonemeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhoneme
     */
    select?: ConsonantPhonemeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhoneme
     */
    omit?: ConsonantPhonemeOmit<ExtArgs> | null
    /**
     * The data used to create many ConsonantPhonemes.
     */
    data: ConsonantPhonemeCreateManyInput | ConsonantPhonemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConsonantPhoneme update
   */
  export type ConsonantPhonemeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhoneme
     */
    select?: ConsonantPhonemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhoneme
     */
    omit?: ConsonantPhonemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeInclude<ExtArgs> | null
    /**
     * The data needed to update a ConsonantPhoneme.
     */
    data: XOR<ConsonantPhonemeUpdateInput, ConsonantPhonemeUncheckedUpdateInput>
    /**
     * Choose, which ConsonantPhoneme to update.
     */
    where: ConsonantPhonemeWhereUniqueInput
  }

  /**
   * ConsonantPhoneme updateMany
   */
  export type ConsonantPhonemeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConsonantPhonemes.
     */
    data: XOR<ConsonantPhonemeUpdateManyMutationInput, ConsonantPhonemeUncheckedUpdateManyInput>
    /**
     * Filter which ConsonantPhonemes to update
     */
    where?: ConsonantPhonemeWhereInput
    /**
     * Limit how many ConsonantPhonemes to update.
     */
    limit?: number
  }

  /**
   * ConsonantPhoneme updateManyAndReturn
   */
  export type ConsonantPhonemeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhoneme
     */
    select?: ConsonantPhonemeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhoneme
     */
    omit?: ConsonantPhonemeOmit<ExtArgs> | null
    /**
     * The data used to update ConsonantPhonemes.
     */
    data: XOR<ConsonantPhonemeUpdateManyMutationInput, ConsonantPhonemeUncheckedUpdateManyInput>
    /**
     * Filter which ConsonantPhonemes to update
     */
    where?: ConsonantPhonemeWhereInput
    /**
     * Limit how many ConsonantPhonemes to update.
     */
    limit?: number
  }

  /**
   * ConsonantPhoneme upsert
   */
  export type ConsonantPhonemeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhoneme
     */
    select?: ConsonantPhonemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhoneme
     */
    omit?: ConsonantPhonemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeInclude<ExtArgs> | null
    /**
     * The filter to search for the ConsonantPhoneme to update in case it exists.
     */
    where: ConsonantPhonemeWhereUniqueInput
    /**
     * In case the ConsonantPhoneme found by the `where` argument doesn't exist, create a new ConsonantPhoneme with this data.
     */
    create: XOR<ConsonantPhonemeCreateInput, ConsonantPhonemeUncheckedCreateInput>
    /**
     * In case the ConsonantPhoneme was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsonantPhonemeUpdateInput, ConsonantPhonemeUncheckedUpdateInput>
  }

  /**
   * ConsonantPhoneme delete
   */
  export type ConsonantPhonemeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhoneme
     */
    select?: ConsonantPhonemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhoneme
     */
    omit?: ConsonantPhonemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeInclude<ExtArgs> | null
    /**
     * Filter which ConsonantPhoneme to delete.
     */
    where: ConsonantPhonemeWhereUniqueInput
  }

  /**
   * ConsonantPhoneme deleteMany
   */
  export type ConsonantPhonemeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsonantPhonemes to delete
     */
    where?: ConsonantPhonemeWhereInput
    /**
     * Limit how many ConsonantPhonemes to delete.
     */
    limit?: number
  }

  /**
   * ConsonantPhoneme.usages
   */
  export type ConsonantPhoneme$usagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhonemeUsage
     */
    select?: ConsonantPhonemeUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhonemeUsage
     */
    omit?: ConsonantPhonemeUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeUsageInclude<ExtArgs> | null
    where?: ConsonantPhonemeUsageWhereInput
    orderBy?: ConsonantPhonemeUsageOrderByWithRelationInput | ConsonantPhonemeUsageOrderByWithRelationInput[]
    cursor?: ConsonantPhonemeUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsonantPhonemeUsageScalarFieldEnum | ConsonantPhonemeUsageScalarFieldEnum[]
  }

  /**
   * ConsonantPhoneme.words
   */
  export type ConsonantPhoneme$wordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Word
     */
    select?: WordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Word
     */
    omit?: WordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WordInclude<ExtArgs> | null
    where?: WordWhereInput
    orderBy?: WordOrderByWithRelationInput | WordOrderByWithRelationInput[]
    cursor?: WordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WordScalarFieldEnum | WordScalarFieldEnum[]
  }

  /**
   * ConsonantPhoneme without action
   */
  export type ConsonantPhonemeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhoneme
     */
    select?: ConsonantPhonemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhoneme
     */
    omit?: ConsonantPhonemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeInclude<ExtArgs> | null
  }


  /**
   * Model ConsonantPhonemeUsage
   */

  export type AggregateConsonantPhonemeUsage = {
    _count: ConsonantPhonemeUsageCountAggregateOutputType | null
    _avg: ConsonantPhonemeUsageAvgAggregateOutputType | null
    _sum: ConsonantPhonemeUsageSumAggregateOutputType | null
    _min: ConsonantPhonemeUsageMinAggregateOutputType | null
    _max: ConsonantPhonemeUsageMaxAggregateOutputType | null
  }

  export type ConsonantPhonemeUsageAvgAggregateOutputType = {
    id: number | null
    consonantPhonemeId: number | null
    usageId: number | null
    order: number | null
  }

  export type ConsonantPhonemeUsageSumAggregateOutputType = {
    id: number | null
    consonantPhonemeId: number | null
    usageId: number | null
    order: number | null
  }

  export type ConsonantPhonemeUsageMinAggregateOutputType = {
    id: number | null
    consonantPhonemeId: number | null
    usageId: number | null
    order: number | null
  }

  export type ConsonantPhonemeUsageMaxAggregateOutputType = {
    id: number | null
    consonantPhonemeId: number | null
    usageId: number | null
    order: number | null
  }

  export type ConsonantPhonemeUsageCountAggregateOutputType = {
    id: number
    consonantPhonemeId: number
    usageId: number
    order: number
    _all: number
  }


  export type ConsonantPhonemeUsageAvgAggregateInputType = {
    id?: true
    consonantPhonemeId?: true
    usageId?: true
    order?: true
  }

  export type ConsonantPhonemeUsageSumAggregateInputType = {
    id?: true
    consonantPhonemeId?: true
    usageId?: true
    order?: true
  }

  export type ConsonantPhonemeUsageMinAggregateInputType = {
    id?: true
    consonantPhonemeId?: true
    usageId?: true
    order?: true
  }

  export type ConsonantPhonemeUsageMaxAggregateInputType = {
    id?: true
    consonantPhonemeId?: true
    usageId?: true
    order?: true
  }

  export type ConsonantPhonemeUsageCountAggregateInputType = {
    id?: true
    consonantPhonemeId?: true
    usageId?: true
    order?: true
    _all?: true
  }

  export type ConsonantPhonemeUsageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsonantPhonemeUsage to aggregate.
     */
    where?: ConsonantPhonemeUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsonantPhonemeUsages to fetch.
     */
    orderBy?: ConsonantPhonemeUsageOrderByWithRelationInput | ConsonantPhonemeUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsonantPhonemeUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsonantPhonemeUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsonantPhonemeUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConsonantPhonemeUsages
    **/
    _count?: true | ConsonantPhonemeUsageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConsonantPhonemeUsageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConsonantPhonemeUsageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsonantPhonemeUsageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsonantPhonemeUsageMaxAggregateInputType
  }

  export type GetConsonantPhonemeUsageAggregateType<T extends ConsonantPhonemeUsageAggregateArgs> = {
        [P in keyof T & keyof AggregateConsonantPhonemeUsage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsonantPhonemeUsage[P]>
      : GetScalarType<T[P], AggregateConsonantPhonemeUsage[P]>
  }




  export type ConsonantPhonemeUsageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsonantPhonemeUsageWhereInput
    orderBy?: ConsonantPhonemeUsageOrderByWithAggregationInput | ConsonantPhonemeUsageOrderByWithAggregationInput[]
    by: ConsonantPhonemeUsageScalarFieldEnum[] | ConsonantPhonemeUsageScalarFieldEnum
    having?: ConsonantPhonemeUsageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsonantPhonemeUsageCountAggregateInputType | true
    _avg?: ConsonantPhonemeUsageAvgAggregateInputType
    _sum?: ConsonantPhonemeUsageSumAggregateInputType
    _min?: ConsonantPhonemeUsageMinAggregateInputType
    _max?: ConsonantPhonemeUsageMaxAggregateInputType
  }

  export type ConsonantPhonemeUsageGroupByOutputType = {
    id: number
    consonantPhonemeId: number
    usageId: number
    order: number | null
    _count: ConsonantPhonemeUsageCountAggregateOutputType | null
    _avg: ConsonantPhonemeUsageAvgAggregateOutputType | null
    _sum: ConsonantPhonemeUsageSumAggregateOutputType | null
    _min: ConsonantPhonemeUsageMinAggregateOutputType | null
    _max: ConsonantPhonemeUsageMaxAggregateOutputType | null
  }

  type GetConsonantPhonemeUsageGroupByPayload<T extends ConsonantPhonemeUsageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsonantPhonemeUsageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsonantPhonemeUsageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsonantPhonemeUsageGroupByOutputType[P]>
            : GetScalarType<T[P], ConsonantPhonemeUsageGroupByOutputType[P]>
        }
      >
    >


  export type ConsonantPhonemeUsageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    consonantPhonemeId?: boolean
    usageId?: boolean
    order?: boolean
    consonantPhoneme?: boolean | ConsonantPhonemeDefaultArgs<ExtArgs>
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consonantPhonemeUsage"]>

  export type ConsonantPhonemeUsageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    consonantPhonemeId?: boolean
    usageId?: boolean
    order?: boolean
    consonantPhoneme?: boolean | ConsonantPhonemeDefaultArgs<ExtArgs>
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consonantPhonemeUsage"]>

  export type ConsonantPhonemeUsageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    consonantPhonemeId?: boolean
    usageId?: boolean
    order?: boolean
    consonantPhoneme?: boolean | ConsonantPhonemeDefaultArgs<ExtArgs>
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consonantPhonemeUsage"]>

  export type ConsonantPhonemeUsageSelectScalar = {
    id?: boolean
    consonantPhonemeId?: boolean
    usageId?: boolean
    order?: boolean
  }

  export type ConsonantPhonemeUsageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "consonantPhonemeId" | "usageId" | "order", ExtArgs["result"]["consonantPhonemeUsage"]>
  export type ConsonantPhonemeUsageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consonantPhoneme?: boolean | ConsonantPhonemeDefaultArgs<ExtArgs>
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }
  export type ConsonantPhonemeUsageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consonantPhoneme?: boolean | ConsonantPhonemeDefaultArgs<ExtArgs>
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }
  export type ConsonantPhonemeUsageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consonantPhoneme?: boolean | ConsonantPhonemeDefaultArgs<ExtArgs>
    wordUsage?: boolean | WordUsageDefaultArgs<ExtArgs>
  }

  export type $ConsonantPhonemeUsagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConsonantPhonemeUsage"
    objects: {
      consonantPhoneme: Prisma.$ConsonantPhonemePayload<ExtArgs>
      wordUsage: Prisma.$WordUsagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      consonantPhonemeId: number
      usageId: number
      order: number | null
    }, ExtArgs["result"]["consonantPhonemeUsage"]>
    composites: {}
  }

  type ConsonantPhonemeUsageGetPayload<S extends boolean | null | undefined | ConsonantPhonemeUsageDefaultArgs> = $Result.GetResult<Prisma.$ConsonantPhonemeUsagePayload, S>

  type ConsonantPhonemeUsageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConsonantPhonemeUsageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConsonantPhonemeUsageCountAggregateInputType | true
    }

  export interface ConsonantPhonemeUsageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConsonantPhonemeUsage'], meta: { name: 'ConsonantPhonemeUsage' } }
    /**
     * Find zero or one ConsonantPhonemeUsage that matches the filter.
     * @param {ConsonantPhonemeUsageFindUniqueArgs} args - Arguments to find a ConsonantPhonemeUsage
     * @example
     * // Get one ConsonantPhonemeUsage
     * const consonantPhonemeUsage = await prisma.consonantPhonemeUsage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsonantPhonemeUsageFindUniqueArgs>(args: SelectSubset<T, ConsonantPhonemeUsageFindUniqueArgs<ExtArgs>>): Prisma__ConsonantPhonemeUsageClient<$Result.GetResult<Prisma.$ConsonantPhonemeUsagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ConsonantPhonemeUsage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConsonantPhonemeUsageFindUniqueOrThrowArgs} args - Arguments to find a ConsonantPhonemeUsage
     * @example
     * // Get one ConsonantPhonemeUsage
     * const consonantPhonemeUsage = await prisma.consonantPhonemeUsage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsonantPhonemeUsageFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsonantPhonemeUsageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsonantPhonemeUsageClient<$Result.GetResult<Prisma.$ConsonantPhonemeUsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConsonantPhonemeUsage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsonantPhonemeUsageFindFirstArgs} args - Arguments to find a ConsonantPhonemeUsage
     * @example
     * // Get one ConsonantPhonemeUsage
     * const consonantPhonemeUsage = await prisma.consonantPhonemeUsage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsonantPhonemeUsageFindFirstArgs>(args?: SelectSubset<T, ConsonantPhonemeUsageFindFirstArgs<ExtArgs>>): Prisma__ConsonantPhonemeUsageClient<$Result.GetResult<Prisma.$ConsonantPhonemeUsagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConsonantPhonemeUsage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsonantPhonemeUsageFindFirstOrThrowArgs} args - Arguments to find a ConsonantPhonemeUsage
     * @example
     * // Get one ConsonantPhonemeUsage
     * const consonantPhonemeUsage = await prisma.consonantPhonemeUsage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsonantPhonemeUsageFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsonantPhonemeUsageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsonantPhonemeUsageClient<$Result.GetResult<Prisma.$ConsonantPhonemeUsagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ConsonantPhonemeUsages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsonantPhonemeUsageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConsonantPhonemeUsages
     * const consonantPhonemeUsages = await prisma.consonantPhonemeUsage.findMany()
     * 
     * // Get first 10 ConsonantPhonemeUsages
     * const consonantPhonemeUsages = await prisma.consonantPhonemeUsage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consonantPhonemeUsageWithIdOnly = await prisma.consonantPhonemeUsage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsonantPhonemeUsageFindManyArgs>(args?: SelectSubset<T, ConsonantPhonemeUsageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsonantPhonemeUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ConsonantPhonemeUsage.
     * @param {ConsonantPhonemeUsageCreateArgs} args - Arguments to create a ConsonantPhonemeUsage.
     * @example
     * // Create one ConsonantPhonemeUsage
     * const ConsonantPhonemeUsage = await prisma.consonantPhonemeUsage.create({
     *   data: {
     *     // ... data to create a ConsonantPhonemeUsage
     *   }
     * })
     * 
     */
    create<T extends ConsonantPhonemeUsageCreateArgs>(args: SelectSubset<T, ConsonantPhonemeUsageCreateArgs<ExtArgs>>): Prisma__ConsonantPhonemeUsageClient<$Result.GetResult<Prisma.$ConsonantPhonemeUsagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ConsonantPhonemeUsages.
     * @param {ConsonantPhonemeUsageCreateManyArgs} args - Arguments to create many ConsonantPhonemeUsages.
     * @example
     * // Create many ConsonantPhonemeUsages
     * const consonantPhonemeUsage = await prisma.consonantPhonemeUsage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsonantPhonemeUsageCreateManyArgs>(args?: SelectSubset<T, ConsonantPhonemeUsageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ConsonantPhonemeUsages and returns the data saved in the database.
     * @param {ConsonantPhonemeUsageCreateManyAndReturnArgs} args - Arguments to create many ConsonantPhonemeUsages.
     * @example
     * // Create many ConsonantPhonemeUsages
     * const consonantPhonemeUsage = await prisma.consonantPhonemeUsage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ConsonantPhonemeUsages and only return the `id`
     * const consonantPhonemeUsageWithIdOnly = await prisma.consonantPhonemeUsage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsonantPhonemeUsageCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsonantPhonemeUsageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsonantPhonemeUsagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ConsonantPhonemeUsage.
     * @param {ConsonantPhonemeUsageDeleteArgs} args - Arguments to delete one ConsonantPhonemeUsage.
     * @example
     * // Delete one ConsonantPhonemeUsage
     * const ConsonantPhonemeUsage = await prisma.consonantPhonemeUsage.delete({
     *   where: {
     *     // ... filter to delete one ConsonantPhonemeUsage
     *   }
     * })
     * 
     */
    delete<T extends ConsonantPhonemeUsageDeleteArgs>(args: SelectSubset<T, ConsonantPhonemeUsageDeleteArgs<ExtArgs>>): Prisma__ConsonantPhonemeUsageClient<$Result.GetResult<Prisma.$ConsonantPhonemeUsagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ConsonantPhonemeUsage.
     * @param {ConsonantPhonemeUsageUpdateArgs} args - Arguments to update one ConsonantPhonemeUsage.
     * @example
     * // Update one ConsonantPhonemeUsage
     * const consonantPhonemeUsage = await prisma.consonantPhonemeUsage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsonantPhonemeUsageUpdateArgs>(args: SelectSubset<T, ConsonantPhonemeUsageUpdateArgs<ExtArgs>>): Prisma__ConsonantPhonemeUsageClient<$Result.GetResult<Prisma.$ConsonantPhonemeUsagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ConsonantPhonemeUsages.
     * @param {ConsonantPhonemeUsageDeleteManyArgs} args - Arguments to filter ConsonantPhonemeUsages to delete.
     * @example
     * // Delete a few ConsonantPhonemeUsages
     * const { count } = await prisma.consonantPhonemeUsage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsonantPhonemeUsageDeleteManyArgs>(args?: SelectSubset<T, ConsonantPhonemeUsageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsonantPhonemeUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsonantPhonemeUsageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConsonantPhonemeUsages
     * const consonantPhonemeUsage = await prisma.consonantPhonemeUsage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsonantPhonemeUsageUpdateManyArgs>(args: SelectSubset<T, ConsonantPhonemeUsageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsonantPhonemeUsages and returns the data updated in the database.
     * @param {ConsonantPhonemeUsageUpdateManyAndReturnArgs} args - Arguments to update many ConsonantPhonemeUsages.
     * @example
     * // Update many ConsonantPhonemeUsages
     * const consonantPhonemeUsage = await prisma.consonantPhonemeUsage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ConsonantPhonemeUsages and only return the `id`
     * const consonantPhonemeUsageWithIdOnly = await prisma.consonantPhonemeUsage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConsonantPhonemeUsageUpdateManyAndReturnArgs>(args: SelectSubset<T, ConsonantPhonemeUsageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsonantPhonemeUsagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ConsonantPhonemeUsage.
     * @param {ConsonantPhonemeUsageUpsertArgs} args - Arguments to update or create a ConsonantPhonemeUsage.
     * @example
     * // Update or create a ConsonantPhonemeUsage
     * const consonantPhonemeUsage = await prisma.consonantPhonemeUsage.upsert({
     *   create: {
     *     // ... data to create a ConsonantPhonemeUsage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConsonantPhonemeUsage we want to update
     *   }
     * })
     */
    upsert<T extends ConsonantPhonemeUsageUpsertArgs>(args: SelectSubset<T, ConsonantPhonemeUsageUpsertArgs<ExtArgs>>): Prisma__ConsonantPhonemeUsageClient<$Result.GetResult<Prisma.$ConsonantPhonemeUsagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ConsonantPhonemeUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsonantPhonemeUsageCountArgs} args - Arguments to filter ConsonantPhonemeUsages to count.
     * @example
     * // Count the number of ConsonantPhonemeUsages
     * const count = await prisma.consonantPhonemeUsage.count({
     *   where: {
     *     // ... the filter for the ConsonantPhonemeUsages we want to count
     *   }
     * })
    **/
    count<T extends ConsonantPhonemeUsageCountArgs>(
      args?: Subset<T, ConsonantPhonemeUsageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsonantPhonemeUsageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConsonantPhonemeUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsonantPhonemeUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsonantPhonemeUsageAggregateArgs>(args: Subset<T, ConsonantPhonemeUsageAggregateArgs>): Prisma.PrismaPromise<GetConsonantPhonemeUsageAggregateType<T>>

    /**
     * Group by ConsonantPhonemeUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsonantPhonemeUsageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsonantPhonemeUsageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsonantPhonemeUsageGroupByArgs['orderBy'] }
        : { orderBy?: ConsonantPhonemeUsageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsonantPhonemeUsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsonantPhonemeUsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConsonantPhonemeUsage model
   */
  readonly fields: ConsonantPhonemeUsageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConsonantPhonemeUsage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsonantPhonemeUsageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consonantPhoneme<T extends ConsonantPhonemeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConsonantPhonemeDefaultArgs<ExtArgs>>): Prisma__ConsonantPhonemeClient<$Result.GetResult<Prisma.$ConsonantPhonemePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    wordUsage<T extends WordUsageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WordUsageDefaultArgs<ExtArgs>>): Prisma__WordUsageClient<$Result.GetResult<Prisma.$WordUsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConsonantPhonemeUsage model
   */
  interface ConsonantPhonemeUsageFieldRefs {
    readonly id: FieldRef<"ConsonantPhonemeUsage", 'Int'>
    readonly consonantPhonemeId: FieldRef<"ConsonantPhonemeUsage", 'Int'>
    readonly usageId: FieldRef<"ConsonantPhonemeUsage", 'Int'>
    readonly order: FieldRef<"ConsonantPhonemeUsage", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ConsonantPhonemeUsage findUnique
   */
  export type ConsonantPhonemeUsageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhonemeUsage
     */
    select?: ConsonantPhonemeUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhonemeUsage
     */
    omit?: ConsonantPhonemeUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeUsageInclude<ExtArgs> | null
    /**
     * Filter, which ConsonantPhonemeUsage to fetch.
     */
    where: ConsonantPhonemeUsageWhereUniqueInput
  }

  /**
   * ConsonantPhonemeUsage findUniqueOrThrow
   */
  export type ConsonantPhonemeUsageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhonemeUsage
     */
    select?: ConsonantPhonemeUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhonemeUsage
     */
    omit?: ConsonantPhonemeUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeUsageInclude<ExtArgs> | null
    /**
     * Filter, which ConsonantPhonemeUsage to fetch.
     */
    where: ConsonantPhonemeUsageWhereUniqueInput
  }

  /**
   * ConsonantPhonemeUsage findFirst
   */
  export type ConsonantPhonemeUsageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhonemeUsage
     */
    select?: ConsonantPhonemeUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhonemeUsage
     */
    omit?: ConsonantPhonemeUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeUsageInclude<ExtArgs> | null
    /**
     * Filter, which ConsonantPhonemeUsage to fetch.
     */
    where?: ConsonantPhonemeUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsonantPhonemeUsages to fetch.
     */
    orderBy?: ConsonantPhonemeUsageOrderByWithRelationInput | ConsonantPhonemeUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsonantPhonemeUsages.
     */
    cursor?: ConsonantPhonemeUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsonantPhonemeUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsonantPhonemeUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsonantPhonemeUsages.
     */
    distinct?: ConsonantPhonemeUsageScalarFieldEnum | ConsonantPhonemeUsageScalarFieldEnum[]
  }

  /**
   * ConsonantPhonemeUsage findFirstOrThrow
   */
  export type ConsonantPhonemeUsageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhonemeUsage
     */
    select?: ConsonantPhonemeUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhonemeUsage
     */
    omit?: ConsonantPhonemeUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeUsageInclude<ExtArgs> | null
    /**
     * Filter, which ConsonantPhonemeUsage to fetch.
     */
    where?: ConsonantPhonemeUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsonantPhonemeUsages to fetch.
     */
    orderBy?: ConsonantPhonemeUsageOrderByWithRelationInput | ConsonantPhonemeUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsonantPhonemeUsages.
     */
    cursor?: ConsonantPhonemeUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsonantPhonemeUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsonantPhonemeUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsonantPhonemeUsages.
     */
    distinct?: ConsonantPhonemeUsageScalarFieldEnum | ConsonantPhonemeUsageScalarFieldEnum[]
  }

  /**
   * ConsonantPhonemeUsage findMany
   */
  export type ConsonantPhonemeUsageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhonemeUsage
     */
    select?: ConsonantPhonemeUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhonemeUsage
     */
    omit?: ConsonantPhonemeUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeUsageInclude<ExtArgs> | null
    /**
     * Filter, which ConsonantPhonemeUsages to fetch.
     */
    where?: ConsonantPhonemeUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsonantPhonemeUsages to fetch.
     */
    orderBy?: ConsonantPhonemeUsageOrderByWithRelationInput | ConsonantPhonemeUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConsonantPhonemeUsages.
     */
    cursor?: ConsonantPhonemeUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsonantPhonemeUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsonantPhonemeUsages.
     */
    skip?: number
    distinct?: ConsonantPhonemeUsageScalarFieldEnum | ConsonantPhonemeUsageScalarFieldEnum[]
  }

  /**
   * ConsonantPhonemeUsage create
   */
  export type ConsonantPhonemeUsageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhonemeUsage
     */
    select?: ConsonantPhonemeUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhonemeUsage
     */
    omit?: ConsonantPhonemeUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeUsageInclude<ExtArgs> | null
    /**
     * The data needed to create a ConsonantPhonemeUsage.
     */
    data: XOR<ConsonantPhonemeUsageCreateInput, ConsonantPhonemeUsageUncheckedCreateInput>
  }

  /**
   * ConsonantPhonemeUsage createMany
   */
  export type ConsonantPhonemeUsageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConsonantPhonemeUsages.
     */
    data: ConsonantPhonemeUsageCreateManyInput | ConsonantPhonemeUsageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConsonantPhonemeUsage createManyAndReturn
   */
  export type ConsonantPhonemeUsageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhonemeUsage
     */
    select?: ConsonantPhonemeUsageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhonemeUsage
     */
    omit?: ConsonantPhonemeUsageOmit<ExtArgs> | null
    /**
     * The data used to create many ConsonantPhonemeUsages.
     */
    data: ConsonantPhonemeUsageCreateManyInput | ConsonantPhonemeUsageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeUsageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConsonantPhonemeUsage update
   */
  export type ConsonantPhonemeUsageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhonemeUsage
     */
    select?: ConsonantPhonemeUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhonemeUsage
     */
    omit?: ConsonantPhonemeUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeUsageInclude<ExtArgs> | null
    /**
     * The data needed to update a ConsonantPhonemeUsage.
     */
    data: XOR<ConsonantPhonemeUsageUpdateInput, ConsonantPhonemeUsageUncheckedUpdateInput>
    /**
     * Choose, which ConsonantPhonemeUsage to update.
     */
    where: ConsonantPhonemeUsageWhereUniqueInput
  }

  /**
   * ConsonantPhonemeUsage updateMany
   */
  export type ConsonantPhonemeUsageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConsonantPhonemeUsages.
     */
    data: XOR<ConsonantPhonemeUsageUpdateManyMutationInput, ConsonantPhonemeUsageUncheckedUpdateManyInput>
    /**
     * Filter which ConsonantPhonemeUsages to update
     */
    where?: ConsonantPhonemeUsageWhereInput
    /**
     * Limit how many ConsonantPhonemeUsages to update.
     */
    limit?: number
  }

  /**
   * ConsonantPhonemeUsage updateManyAndReturn
   */
  export type ConsonantPhonemeUsageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhonemeUsage
     */
    select?: ConsonantPhonemeUsageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhonemeUsage
     */
    omit?: ConsonantPhonemeUsageOmit<ExtArgs> | null
    /**
     * The data used to update ConsonantPhonemeUsages.
     */
    data: XOR<ConsonantPhonemeUsageUpdateManyMutationInput, ConsonantPhonemeUsageUncheckedUpdateManyInput>
    /**
     * Filter which ConsonantPhonemeUsages to update
     */
    where?: ConsonantPhonemeUsageWhereInput
    /**
     * Limit how many ConsonantPhonemeUsages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeUsageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConsonantPhonemeUsage upsert
   */
  export type ConsonantPhonemeUsageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhonemeUsage
     */
    select?: ConsonantPhonemeUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhonemeUsage
     */
    omit?: ConsonantPhonemeUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeUsageInclude<ExtArgs> | null
    /**
     * The filter to search for the ConsonantPhonemeUsage to update in case it exists.
     */
    where: ConsonantPhonemeUsageWhereUniqueInput
    /**
     * In case the ConsonantPhonemeUsage found by the `where` argument doesn't exist, create a new ConsonantPhonemeUsage with this data.
     */
    create: XOR<ConsonantPhonemeUsageCreateInput, ConsonantPhonemeUsageUncheckedCreateInput>
    /**
     * In case the ConsonantPhonemeUsage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsonantPhonemeUsageUpdateInput, ConsonantPhonemeUsageUncheckedUpdateInput>
  }

  /**
   * ConsonantPhonemeUsage delete
   */
  export type ConsonantPhonemeUsageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhonemeUsage
     */
    select?: ConsonantPhonemeUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhonemeUsage
     */
    omit?: ConsonantPhonemeUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeUsageInclude<ExtArgs> | null
    /**
     * Filter which ConsonantPhonemeUsage to delete.
     */
    where: ConsonantPhonemeUsageWhereUniqueInput
  }

  /**
   * ConsonantPhonemeUsage deleteMany
   */
  export type ConsonantPhonemeUsageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsonantPhonemeUsages to delete
     */
    where?: ConsonantPhonemeUsageWhereInput
    /**
     * Limit how many ConsonantPhonemeUsages to delete.
     */
    limit?: number
  }

  /**
   * ConsonantPhonemeUsage without action
   */
  export type ConsonantPhonemeUsageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsonantPhonemeUsage
     */
    select?: ConsonantPhonemeUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsonantPhonemeUsage
     */
    omit?: ConsonantPhonemeUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsonantPhonemeUsageInclude<ExtArgs> | null
  }


  /**
   * Model OrthoWord
   */

  export type AggregateOrthoWord = {
    _count: OrthoWordCountAggregateOutputType | null
    _avg: OrthoWordAvgAggregateOutputType | null
    _sum: OrthoWordSumAggregateOutputType | null
    _min: OrthoWordMinAggregateOutputType | null
    _max: OrthoWordMaxAggregateOutputType | null
  }

  export type OrthoWordAvgAggregateOutputType = {
    id: number | null
    freqSubtlexUs: number | null
  }

  export type OrthoWordSumAggregateOutputType = {
    id: number | null
    freqSubtlexUs: number | null
  }

  export type OrthoWordMinAggregateOutputType = {
    id: number | null
    word: string | null
    freqSubtlexUs: number | null
  }

  export type OrthoWordMaxAggregateOutputType = {
    id: number | null
    word: string | null
    freqSubtlexUs: number | null
  }

  export type OrthoWordCountAggregateOutputType = {
    id: number
    word: number
    freqSubtlexUs: number
    _all: number
  }


  export type OrthoWordAvgAggregateInputType = {
    id?: true
    freqSubtlexUs?: true
  }

  export type OrthoWordSumAggregateInputType = {
    id?: true
    freqSubtlexUs?: true
  }

  export type OrthoWordMinAggregateInputType = {
    id?: true
    word?: true
    freqSubtlexUs?: true
  }

  export type OrthoWordMaxAggregateInputType = {
    id?: true
    word?: true
    freqSubtlexUs?: true
  }

  export type OrthoWordCountAggregateInputType = {
    id?: true
    word?: true
    freqSubtlexUs?: true
    _all?: true
  }

  export type OrthoWordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrthoWord to aggregate.
     */
    where?: OrthoWordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrthoWords to fetch.
     */
    orderBy?: OrthoWordOrderByWithRelationInput | OrthoWordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrthoWordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrthoWords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrthoWords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrthoWords
    **/
    _count?: true | OrthoWordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrthoWordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrthoWordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrthoWordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrthoWordMaxAggregateInputType
  }

  export type GetOrthoWordAggregateType<T extends OrthoWordAggregateArgs> = {
        [P in keyof T & keyof AggregateOrthoWord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrthoWord[P]>
      : GetScalarType<T[P], AggregateOrthoWord[P]>
  }




  export type OrthoWordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrthoWordWhereInput
    orderBy?: OrthoWordOrderByWithAggregationInput | OrthoWordOrderByWithAggregationInput[]
    by: OrthoWordScalarFieldEnum[] | OrthoWordScalarFieldEnum
    having?: OrthoWordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrthoWordCountAggregateInputType | true
    _avg?: OrthoWordAvgAggregateInputType
    _sum?: OrthoWordSumAggregateInputType
    _min?: OrthoWordMinAggregateInputType
    _max?: OrthoWordMaxAggregateInputType
  }

  export type OrthoWordGroupByOutputType = {
    id: number
    word: string
    freqSubtlexUs: number | null
    _count: OrthoWordCountAggregateOutputType | null
    _avg: OrthoWordAvgAggregateOutputType | null
    _sum: OrthoWordSumAggregateOutputType | null
    _min: OrthoWordMinAggregateOutputType | null
    _max: OrthoWordMaxAggregateOutputType | null
  }

  type GetOrthoWordGroupByPayload<T extends OrthoWordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrthoWordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrthoWordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrthoWordGroupByOutputType[P]>
            : GetScalarType<T[P], OrthoWordGroupByOutputType[P]>
        }
      >
    >


  export type OrthoWordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    word?: boolean
    freqSubtlexUs?: boolean
    pronsCmuDict?: boolean | OrthoWord$pronsCmuDictArgs<ExtArgs>
    _count?: boolean | OrthoWordCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orthoWord"]>

  export type OrthoWordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    word?: boolean
    freqSubtlexUs?: boolean
  }, ExtArgs["result"]["orthoWord"]>

  export type OrthoWordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    word?: boolean
    freqSubtlexUs?: boolean
  }, ExtArgs["result"]["orthoWord"]>

  export type OrthoWordSelectScalar = {
    id?: boolean
    word?: boolean
    freqSubtlexUs?: boolean
  }

  export type OrthoWordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "word" | "freqSubtlexUs", ExtArgs["result"]["orthoWord"]>
  export type OrthoWordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pronsCmuDict?: boolean | OrthoWord$pronsCmuDictArgs<ExtArgs>
    _count?: boolean | OrthoWordCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrthoWordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OrthoWordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OrthoWordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrthoWord"
    objects: {
      pronsCmuDict: Prisma.$PronCmuDictPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      word: string
      freqSubtlexUs: number | null
    }, ExtArgs["result"]["orthoWord"]>
    composites: {}
  }

  type OrthoWordGetPayload<S extends boolean | null | undefined | OrthoWordDefaultArgs> = $Result.GetResult<Prisma.$OrthoWordPayload, S>

  type OrthoWordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrthoWordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrthoWordCountAggregateInputType | true
    }

  export interface OrthoWordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrthoWord'], meta: { name: 'OrthoWord' } }
    /**
     * Find zero or one OrthoWord that matches the filter.
     * @param {OrthoWordFindUniqueArgs} args - Arguments to find a OrthoWord
     * @example
     * // Get one OrthoWord
     * const orthoWord = await prisma.orthoWord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrthoWordFindUniqueArgs>(args: SelectSubset<T, OrthoWordFindUniqueArgs<ExtArgs>>): Prisma__OrthoWordClient<$Result.GetResult<Prisma.$OrthoWordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrthoWord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrthoWordFindUniqueOrThrowArgs} args - Arguments to find a OrthoWord
     * @example
     * // Get one OrthoWord
     * const orthoWord = await prisma.orthoWord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrthoWordFindUniqueOrThrowArgs>(args: SelectSubset<T, OrthoWordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrthoWordClient<$Result.GetResult<Prisma.$OrthoWordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrthoWord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrthoWordFindFirstArgs} args - Arguments to find a OrthoWord
     * @example
     * // Get one OrthoWord
     * const orthoWord = await prisma.orthoWord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrthoWordFindFirstArgs>(args?: SelectSubset<T, OrthoWordFindFirstArgs<ExtArgs>>): Prisma__OrthoWordClient<$Result.GetResult<Prisma.$OrthoWordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrthoWord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrthoWordFindFirstOrThrowArgs} args - Arguments to find a OrthoWord
     * @example
     * // Get one OrthoWord
     * const orthoWord = await prisma.orthoWord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrthoWordFindFirstOrThrowArgs>(args?: SelectSubset<T, OrthoWordFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrthoWordClient<$Result.GetResult<Prisma.$OrthoWordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrthoWords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrthoWordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrthoWords
     * const orthoWords = await prisma.orthoWord.findMany()
     * 
     * // Get first 10 OrthoWords
     * const orthoWords = await prisma.orthoWord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orthoWordWithIdOnly = await prisma.orthoWord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrthoWordFindManyArgs>(args?: SelectSubset<T, OrthoWordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrthoWordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrthoWord.
     * @param {OrthoWordCreateArgs} args - Arguments to create a OrthoWord.
     * @example
     * // Create one OrthoWord
     * const OrthoWord = await prisma.orthoWord.create({
     *   data: {
     *     // ... data to create a OrthoWord
     *   }
     * })
     * 
     */
    create<T extends OrthoWordCreateArgs>(args: SelectSubset<T, OrthoWordCreateArgs<ExtArgs>>): Prisma__OrthoWordClient<$Result.GetResult<Prisma.$OrthoWordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrthoWords.
     * @param {OrthoWordCreateManyArgs} args - Arguments to create many OrthoWords.
     * @example
     * // Create many OrthoWords
     * const orthoWord = await prisma.orthoWord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrthoWordCreateManyArgs>(args?: SelectSubset<T, OrthoWordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrthoWords and returns the data saved in the database.
     * @param {OrthoWordCreateManyAndReturnArgs} args - Arguments to create many OrthoWords.
     * @example
     * // Create many OrthoWords
     * const orthoWord = await prisma.orthoWord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrthoWords and only return the `id`
     * const orthoWordWithIdOnly = await prisma.orthoWord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrthoWordCreateManyAndReturnArgs>(args?: SelectSubset<T, OrthoWordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrthoWordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrthoWord.
     * @param {OrthoWordDeleteArgs} args - Arguments to delete one OrthoWord.
     * @example
     * // Delete one OrthoWord
     * const OrthoWord = await prisma.orthoWord.delete({
     *   where: {
     *     // ... filter to delete one OrthoWord
     *   }
     * })
     * 
     */
    delete<T extends OrthoWordDeleteArgs>(args: SelectSubset<T, OrthoWordDeleteArgs<ExtArgs>>): Prisma__OrthoWordClient<$Result.GetResult<Prisma.$OrthoWordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrthoWord.
     * @param {OrthoWordUpdateArgs} args - Arguments to update one OrthoWord.
     * @example
     * // Update one OrthoWord
     * const orthoWord = await prisma.orthoWord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrthoWordUpdateArgs>(args: SelectSubset<T, OrthoWordUpdateArgs<ExtArgs>>): Prisma__OrthoWordClient<$Result.GetResult<Prisma.$OrthoWordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrthoWords.
     * @param {OrthoWordDeleteManyArgs} args - Arguments to filter OrthoWords to delete.
     * @example
     * // Delete a few OrthoWords
     * const { count } = await prisma.orthoWord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrthoWordDeleteManyArgs>(args?: SelectSubset<T, OrthoWordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrthoWords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrthoWordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrthoWords
     * const orthoWord = await prisma.orthoWord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrthoWordUpdateManyArgs>(args: SelectSubset<T, OrthoWordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrthoWords and returns the data updated in the database.
     * @param {OrthoWordUpdateManyAndReturnArgs} args - Arguments to update many OrthoWords.
     * @example
     * // Update many OrthoWords
     * const orthoWord = await prisma.orthoWord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrthoWords and only return the `id`
     * const orthoWordWithIdOnly = await prisma.orthoWord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrthoWordUpdateManyAndReturnArgs>(args: SelectSubset<T, OrthoWordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrthoWordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrthoWord.
     * @param {OrthoWordUpsertArgs} args - Arguments to update or create a OrthoWord.
     * @example
     * // Update or create a OrthoWord
     * const orthoWord = await prisma.orthoWord.upsert({
     *   create: {
     *     // ... data to create a OrthoWord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrthoWord we want to update
     *   }
     * })
     */
    upsert<T extends OrthoWordUpsertArgs>(args: SelectSubset<T, OrthoWordUpsertArgs<ExtArgs>>): Prisma__OrthoWordClient<$Result.GetResult<Prisma.$OrthoWordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrthoWords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrthoWordCountArgs} args - Arguments to filter OrthoWords to count.
     * @example
     * // Count the number of OrthoWords
     * const count = await prisma.orthoWord.count({
     *   where: {
     *     // ... the filter for the OrthoWords we want to count
     *   }
     * })
    **/
    count<T extends OrthoWordCountArgs>(
      args?: Subset<T, OrthoWordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrthoWordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrthoWord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrthoWordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrthoWordAggregateArgs>(args: Subset<T, OrthoWordAggregateArgs>): Prisma.PrismaPromise<GetOrthoWordAggregateType<T>>

    /**
     * Group by OrthoWord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrthoWordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrthoWordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrthoWordGroupByArgs['orderBy'] }
        : { orderBy?: OrthoWordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrthoWordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrthoWordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrthoWord model
   */
  readonly fields: OrthoWordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrthoWord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrthoWordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pronsCmuDict<T extends OrthoWord$pronsCmuDictArgs<ExtArgs> = {}>(args?: Subset<T, OrthoWord$pronsCmuDictArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PronCmuDictPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrthoWord model
   */
  interface OrthoWordFieldRefs {
    readonly id: FieldRef<"OrthoWord", 'Int'>
    readonly word: FieldRef<"OrthoWord", 'String'>
    readonly freqSubtlexUs: FieldRef<"OrthoWord", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * OrthoWord findUnique
   */
  export type OrthoWordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrthoWord
     */
    select?: OrthoWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrthoWord
     */
    omit?: OrthoWordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrthoWordInclude<ExtArgs> | null
    /**
     * Filter, which OrthoWord to fetch.
     */
    where: OrthoWordWhereUniqueInput
  }

  /**
   * OrthoWord findUniqueOrThrow
   */
  export type OrthoWordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrthoWord
     */
    select?: OrthoWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrthoWord
     */
    omit?: OrthoWordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrthoWordInclude<ExtArgs> | null
    /**
     * Filter, which OrthoWord to fetch.
     */
    where: OrthoWordWhereUniqueInput
  }

  /**
   * OrthoWord findFirst
   */
  export type OrthoWordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrthoWord
     */
    select?: OrthoWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrthoWord
     */
    omit?: OrthoWordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrthoWordInclude<ExtArgs> | null
    /**
     * Filter, which OrthoWord to fetch.
     */
    where?: OrthoWordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrthoWords to fetch.
     */
    orderBy?: OrthoWordOrderByWithRelationInput | OrthoWordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrthoWords.
     */
    cursor?: OrthoWordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrthoWords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrthoWords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrthoWords.
     */
    distinct?: OrthoWordScalarFieldEnum | OrthoWordScalarFieldEnum[]
  }

  /**
   * OrthoWord findFirstOrThrow
   */
  export type OrthoWordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrthoWord
     */
    select?: OrthoWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrthoWord
     */
    omit?: OrthoWordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrthoWordInclude<ExtArgs> | null
    /**
     * Filter, which OrthoWord to fetch.
     */
    where?: OrthoWordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrthoWords to fetch.
     */
    orderBy?: OrthoWordOrderByWithRelationInput | OrthoWordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrthoWords.
     */
    cursor?: OrthoWordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrthoWords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrthoWords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrthoWords.
     */
    distinct?: OrthoWordScalarFieldEnum | OrthoWordScalarFieldEnum[]
  }

  /**
   * OrthoWord findMany
   */
  export type OrthoWordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrthoWord
     */
    select?: OrthoWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrthoWord
     */
    omit?: OrthoWordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrthoWordInclude<ExtArgs> | null
    /**
     * Filter, which OrthoWords to fetch.
     */
    where?: OrthoWordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrthoWords to fetch.
     */
    orderBy?: OrthoWordOrderByWithRelationInput | OrthoWordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrthoWords.
     */
    cursor?: OrthoWordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrthoWords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrthoWords.
     */
    skip?: number
    distinct?: OrthoWordScalarFieldEnum | OrthoWordScalarFieldEnum[]
  }

  /**
   * OrthoWord create
   */
  export type OrthoWordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrthoWord
     */
    select?: OrthoWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrthoWord
     */
    omit?: OrthoWordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrthoWordInclude<ExtArgs> | null
    /**
     * The data needed to create a OrthoWord.
     */
    data: XOR<OrthoWordCreateInput, OrthoWordUncheckedCreateInput>
  }

  /**
   * OrthoWord createMany
   */
  export type OrthoWordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrthoWords.
     */
    data: OrthoWordCreateManyInput | OrthoWordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrthoWord createManyAndReturn
   */
  export type OrthoWordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrthoWord
     */
    select?: OrthoWordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrthoWord
     */
    omit?: OrthoWordOmit<ExtArgs> | null
    /**
     * The data used to create many OrthoWords.
     */
    data: OrthoWordCreateManyInput | OrthoWordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrthoWord update
   */
  export type OrthoWordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrthoWord
     */
    select?: OrthoWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrthoWord
     */
    omit?: OrthoWordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrthoWordInclude<ExtArgs> | null
    /**
     * The data needed to update a OrthoWord.
     */
    data: XOR<OrthoWordUpdateInput, OrthoWordUncheckedUpdateInput>
    /**
     * Choose, which OrthoWord to update.
     */
    where: OrthoWordWhereUniqueInput
  }

  /**
   * OrthoWord updateMany
   */
  export type OrthoWordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrthoWords.
     */
    data: XOR<OrthoWordUpdateManyMutationInput, OrthoWordUncheckedUpdateManyInput>
    /**
     * Filter which OrthoWords to update
     */
    where?: OrthoWordWhereInput
    /**
     * Limit how many OrthoWords to update.
     */
    limit?: number
  }

  /**
   * OrthoWord updateManyAndReturn
   */
  export type OrthoWordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrthoWord
     */
    select?: OrthoWordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrthoWord
     */
    omit?: OrthoWordOmit<ExtArgs> | null
    /**
     * The data used to update OrthoWords.
     */
    data: XOR<OrthoWordUpdateManyMutationInput, OrthoWordUncheckedUpdateManyInput>
    /**
     * Filter which OrthoWords to update
     */
    where?: OrthoWordWhereInput
    /**
     * Limit how many OrthoWords to update.
     */
    limit?: number
  }

  /**
   * OrthoWord upsert
   */
  export type OrthoWordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrthoWord
     */
    select?: OrthoWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrthoWord
     */
    omit?: OrthoWordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrthoWordInclude<ExtArgs> | null
    /**
     * The filter to search for the OrthoWord to update in case it exists.
     */
    where: OrthoWordWhereUniqueInput
    /**
     * In case the OrthoWord found by the `where` argument doesn't exist, create a new OrthoWord with this data.
     */
    create: XOR<OrthoWordCreateInput, OrthoWordUncheckedCreateInput>
    /**
     * In case the OrthoWord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrthoWordUpdateInput, OrthoWordUncheckedUpdateInput>
  }

  /**
   * OrthoWord delete
   */
  export type OrthoWordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrthoWord
     */
    select?: OrthoWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrthoWord
     */
    omit?: OrthoWordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrthoWordInclude<ExtArgs> | null
    /**
     * Filter which OrthoWord to delete.
     */
    where: OrthoWordWhereUniqueInput
  }

  /**
   * OrthoWord deleteMany
   */
  export type OrthoWordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrthoWords to delete
     */
    where?: OrthoWordWhereInput
    /**
     * Limit how many OrthoWords to delete.
     */
    limit?: number
  }

  /**
   * OrthoWord.pronsCmuDict
   */
  export type OrthoWord$pronsCmuDictArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PronCmuDict
     */
    select?: PronCmuDictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PronCmuDict
     */
    omit?: PronCmuDictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronCmuDictInclude<ExtArgs> | null
    where?: PronCmuDictWhereInput
    orderBy?: PronCmuDictOrderByWithRelationInput | PronCmuDictOrderByWithRelationInput[]
    cursor?: PronCmuDictWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PronCmuDictScalarFieldEnum | PronCmuDictScalarFieldEnum[]
  }

  /**
   * OrthoWord without action
   */
  export type OrthoWordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrthoWord
     */
    select?: OrthoWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrthoWord
     */
    omit?: OrthoWordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrthoWordInclude<ExtArgs> | null
  }


  /**
   * Model PronCmuDict
   */

  export type AggregatePronCmuDict = {
    _count: PronCmuDictCountAggregateOutputType | null
    _avg: PronCmuDictAvgAggregateOutputType | null
    _sum: PronCmuDictSumAggregateOutputType | null
    _min: PronCmuDictMinAggregateOutputType | null
    _max: PronCmuDictMaxAggregateOutputType | null
  }

  export type PronCmuDictAvgAggregateOutputType = {
    id: number | null
    orthoWordId: number | null
  }

  export type PronCmuDictSumAggregateOutputType = {
    id: number | null
    orthoWordId: number | null
  }

  export type PronCmuDictMinAggregateOutputType = {
    id: number | null
    orthoWordId: number | null
    pronCmuDict: string | null
  }

  export type PronCmuDictMaxAggregateOutputType = {
    id: number | null
    orthoWordId: number | null
    pronCmuDict: string | null
  }

  export type PronCmuDictCountAggregateOutputType = {
    id: number
    orthoWordId: number
    pronCmuDict: number
    _all: number
  }


  export type PronCmuDictAvgAggregateInputType = {
    id?: true
    orthoWordId?: true
  }

  export type PronCmuDictSumAggregateInputType = {
    id?: true
    orthoWordId?: true
  }

  export type PronCmuDictMinAggregateInputType = {
    id?: true
    orthoWordId?: true
    pronCmuDict?: true
  }

  export type PronCmuDictMaxAggregateInputType = {
    id?: true
    orthoWordId?: true
    pronCmuDict?: true
  }

  export type PronCmuDictCountAggregateInputType = {
    id?: true
    orthoWordId?: true
    pronCmuDict?: true
    _all?: true
  }

  export type PronCmuDictAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PronCmuDict to aggregate.
     */
    where?: PronCmuDictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PronCmuDicts to fetch.
     */
    orderBy?: PronCmuDictOrderByWithRelationInput | PronCmuDictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PronCmuDictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PronCmuDicts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PronCmuDicts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PronCmuDicts
    **/
    _count?: true | PronCmuDictCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PronCmuDictAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PronCmuDictSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PronCmuDictMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PronCmuDictMaxAggregateInputType
  }

  export type GetPronCmuDictAggregateType<T extends PronCmuDictAggregateArgs> = {
        [P in keyof T & keyof AggregatePronCmuDict]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePronCmuDict[P]>
      : GetScalarType<T[P], AggregatePronCmuDict[P]>
  }




  export type PronCmuDictGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PronCmuDictWhereInput
    orderBy?: PronCmuDictOrderByWithAggregationInput | PronCmuDictOrderByWithAggregationInput[]
    by: PronCmuDictScalarFieldEnum[] | PronCmuDictScalarFieldEnum
    having?: PronCmuDictScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PronCmuDictCountAggregateInputType | true
    _avg?: PronCmuDictAvgAggregateInputType
    _sum?: PronCmuDictSumAggregateInputType
    _min?: PronCmuDictMinAggregateInputType
    _max?: PronCmuDictMaxAggregateInputType
  }

  export type PronCmuDictGroupByOutputType = {
    id: number
    orthoWordId: number
    pronCmuDict: string
    _count: PronCmuDictCountAggregateOutputType | null
    _avg: PronCmuDictAvgAggregateOutputType | null
    _sum: PronCmuDictSumAggregateOutputType | null
    _min: PronCmuDictMinAggregateOutputType | null
    _max: PronCmuDictMaxAggregateOutputType | null
  }

  type GetPronCmuDictGroupByPayload<T extends PronCmuDictGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PronCmuDictGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PronCmuDictGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PronCmuDictGroupByOutputType[P]>
            : GetScalarType<T[P], PronCmuDictGroupByOutputType[P]>
        }
      >
    >


  export type PronCmuDictSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orthoWordId?: boolean
    pronCmuDict?: boolean
    orthoWord?: boolean | OrthoWordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pronCmuDict"]>

  export type PronCmuDictSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orthoWordId?: boolean
    pronCmuDict?: boolean
    orthoWord?: boolean | OrthoWordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pronCmuDict"]>

  export type PronCmuDictSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orthoWordId?: boolean
    pronCmuDict?: boolean
    orthoWord?: boolean | OrthoWordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pronCmuDict"]>

  export type PronCmuDictSelectScalar = {
    id?: boolean
    orthoWordId?: boolean
    pronCmuDict?: boolean
  }

  export type PronCmuDictOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orthoWordId" | "pronCmuDict", ExtArgs["result"]["pronCmuDict"]>
  export type PronCmuDictInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orthoWord?: boolean | OrthoWordDefaultArgs<ExtArgs>
  }
  export type PronCmuDictIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orthoWord?: boolean | OrthoWordDefaultArgs<ExtArgs>
  }
  export type PronCmuDictIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orthoWord?: boolean | OrthoWordDefaultArgs<ExtArgs>
  }

  export type $PronCmuDictPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PronCmuDict"
    objects: {
      orthoWord: Prisma.$OrthoWordPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orthoWordId: number
      pronCmuDict: string
    }, ExtArgs["result"]["pronCmuDict"]>
    composites: {}
  }

  type PronCmuDictGetPayload<S extends boolean | null | undefined | PronCmuDictDefaultArgs> = $Result.GetResult<Prisma.$PronCmuDictPayload, S>

  type PronCmuDictCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PronCmuDictFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PronCmuDictCountAggregateInputType | true
    }

  export interface PronCmuDictDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PronCmuDict'], meta: { name: 'PronCmuDict' } }
    /**
     * Find zero or one PronCmuDict that matches the filter.
     * @param {PronCmuDictFindUniqueArgs} args - Arguments to find a PronCmuDict
     * @example
     * // Get one PronCmuDict
     * const pronCmuDict = await prisma.pronCmuDict.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PronCmuDictFindUniqueArgs>(args: SelectSubset<T, PronCmuDictFindUniqueArgs<ExtArgs>>): Prisma__PronCmuDictClient<$Result.GetResult<Prisma.$PronCmuDictPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PronCmuDict that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PronCmuDictFindUniqueOrThrowArgs} args - Arguments to find a PronCmuDict
     * @example
     * // Get one PronCmuDict
     * const pronCmuDict = await prisma.pronCmuDict.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PronCmuDictFindUniqueOrThrowArgs>(args: SelectSubset<T, PronCmuDictFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PronCmuDictClient<$Result.GetResult<Prisma.$PronCmuDictPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PronCmuDict that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PronCmuDictFindFirstArgs} args - Arguments to find a PronCmuDict
     * @example
     * // Get one PronCmuDict
     * const pronCmuDict = await prisma.pronCmuDict.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PronCmuDictFindFirstArgs>(args?: SelectSubset<T, PronCmuDictFindFirstArgs<ExtArgs>>): Prisma__PronCmuDictClient<$Result.GetResult<Prisma.$PronCmuDictPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PronCmuDict that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PronCmuDictFindFirstOrThrowArgs} args - Arguments to find a PronCmuDict
     * @example
     * // Get one PronCmuDict
     * const pronCmuDict = await prisma.pronCmuDict.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PronCmuDictFindFirstOrThrowArgs>(args?: SelectSubset<T, PronCmuDictFindFirstOrThrowArgs<ExtArgs>>): Prisma__PronCmuDictClient<$Result.GetResult<Prisma.$PronCmuDictPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PronCmuDicts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PronCmuDictFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PronCmuDicts
     * const pronCmuDicts = await prisma.pronCmuDict.findMany()
     * 
     * // Get first 10 PronCmuDicts
     * const pronCmuDicts = await prisma.pronCmuDict.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pronCmuDictWithIdOnly = await prisma.pronCmuDict.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PronCmuDictFindManyArgs>(args?: SelectSubset<T, PronCmuDictFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PronCmuDictPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PronCmuDict.
     * @param {PronCmuDictCreateArgs} args - Arguments to create a PronCmuDict.
     * @example
     * // Create one PronCmuDict
     * const PronCmuDict = await prisma.pronCmuDict.create({
     *   data: {
     *     // ... data to create a PronCmuDict
     *   }
     * })
     * 
     */
    create<T extends PronCmuDictCreateArgs>(args: SelectSubset<T, PronCmuDictCreateArgs<ExtArgs>>): Prisma__PronCmuDictClient<$Result.GetResult<Prisma.$PronCmuDictPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PronCmuDicts.
     * @param {PronCmuDictCreateManyArgs} args - Arguments to create many PronCmuDicts.
     * @example
     * // Create many PronCmuDicts
     * const pronCmuDict = await prisma.pronCmuDict.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PronCmuDictCreateManyArgs>(args?: SelectSubset<T, PronCmuDictCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PronCmuDicts and returns the data saved in the database.
     * @param {PronCmuDictCreateManyAndReturnArgs} args - Arguments to create many PronCmuDicts.
     * @example
     * // Create many PronCmuDicts
     * const pronCmuDict = await prisma.pronCmuDict.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PronCmuDicts and only return the `id`
     * const pronCmuDictWithIdOnly = await prisma.pronCmuDict.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PronCmuDictCreateManyAndReturnArgs>(args?: SelectSubset<T, PronCmuDictCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PronCmuDictPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PronCmuDict.
     * @param {PronCmuDictDeleteArgs} args - Arguments to delete one PronCmuDict.
     * @example
     * // Delete one PronCmuDict
     * const PronCmuDict = await prisma.pronCmuDict.delete({
     *   where: {
     *     // ... filter to delete one PronCmuDict
     *   }
     * })
     * 
     */
    delete<T extends PronCmuDictDeleteArgs>(args: SelectSubset<T, PronCmuDictDeleteArgs<ExtArgs>>): Prisma__PronCmuDictClient<$Result.GetResult<Prisma.$PronCmuDictPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PronCmuDict.
     * @param {PronCmuDictUpdateArgs} args - Arguments to update one PronCmuDict.
     * @example
     * // Update one PronCmuDict
     * const pronCmuDict = await prisma.pronCmuDict.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PronCmuDictUpdateArgs>(args: SelectSubset<T, PronCmuDictUpdateArgs<ExtArgs>>): Prisma__PronCmuDictClient<$Result.GetResult<Prisma.$PronCmuDictPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PronCmuDicts.
     * @param {PronCmuDictDeleteManyArgs} args - Arguments to filter PronCmuDicts to delete.
     * @example
     * // Delete a few PronCmuDicts
     * const { count } = await prisma.pronCmuDict.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PronCmuDictDeleteManyArgs>(args?: SelectSubset<T, PronCmuDictDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PronCmuDicts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PronCmuDictUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PronCmuDicts
     * const pronCmuDict = await prisma.pronCmuDict.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PronCmuDictUpdateManyArgs>(args: SelectSubset<T, PronCmuDictUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PronCmuDicts and returns the data updated in the database.
     * @param {PronCmuDictUpdateManyAndReturnArgs} args - Arguments to update many PronCmuDicts.
     * @example
     * // Update many PronCmuDicts
     * const pronCmuDict = await prisma.pronCmuDict.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PronCmuDicts and only return the `id`
     * const pronCmuDictWithIdOnly = await prisma.pronCmuDict.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PronCmuDictUpdateManyAndReturnArgs>(args: SelectSubset<T, PronCmuDictUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PronCmuDictPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PronCmuDict.
     * @param {PronCmuDictUpsertArgs} args - Arguments to update or create a PronCmuDict.
     * @example
     * // Update or create a PronCmuDict
     * const pronCmuDict = await prisma.pronCmuDict.upsert({
     *   create: {
     *     // ... data to create a PronCmuDict
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PronCmuDict we want to update
     *   }
     * })
     */
    upsert<T extends PronCmuDictUpsertArgs>(args: SelectSubset<T, PronCmuDictUpsertArgs<ExtArgs>>): Prisma__PronCmuDictClient<$Result.GetResult<Prisma.$PronCmuDictPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PronCmuDicts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PronCmuDictCountArgs} args - Arguments to filter PronCmuDicts to count.
     * @example
     * // Count the number of PronCmuDicts
     * const count = await prisma.pronCmuDict.count({
     *   where: {
     *     // ... the filter for the PronCmuDicts we want to count
     *   }
     * })
    **/
    count<T extends PronCmuDictCountArgs>(
      args?: Subset<T, PronCmuDictCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PronCmuDictCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PronCmuDict.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PronCmuDictAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PronCmuDictAggregateArgs>(args: Subset<T, PronCmuDictAggregateArgs>): Prisma.PrismaPromise<GetPronCmuDictAggregateType<T>>

    /**
     * Group by PronCmuDict.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PronCmuDictGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PronCmuDictGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PronCmuDictGroupByArgs['orderBy'] }
        : { orderBy?: PronCmuDictGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PronCmuDictGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPronCmuDictGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PronCmuDict model
   */
  readonly fields: PronCmuDictFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PronCmuDict.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PronCmuDictClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orthoWord<T extends OrthoWordDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrthoWordDefaultArgs<ExtArgs>>): Prisma__OrthoWordClient<$Result.GetResult<Prisma.$OrthoWordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PronCmuDict model
   */
  interface PronCmuDictFieldRefs {
    readonly id: FieldRef<"PronCmuDict", 'Int'>
    readonly orthoWordId: FieldRef<"PronCmuDict", 'Int'>
    readonly pronCmuDict: FieldRef<"PronCmuDict", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PronCmuDict findUnique
   */
  export type PronCmuDictFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PronCmuDict
     */
    select?: PronCmuDictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PronCmuDict
     */
    omit?: PronCmuDictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronCmuDictInclude<ExtArgs> | null
    /**
     * Filter, which PronCmuDict to fetch.
     */
    where: PronCmuDictWhereUniqueInput
  }

  /**
   * PronCmuDict findUniqueOrThrow
   */
  export type PronCmuDictFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PronCmuDict
     */
    select?: PronCmuDictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PronCmuDict
     */
    omit?: PronCmuDictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronCmuDictInclude<ExtArgs> | null
    /**
     * Filter, which PronCmuDict to fetch.
     */
    where: PronCmuDictWhereUniqueInput
  }

  /**
   * PronCmuDict findFirst
   */
  export type PronCmuDictFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PronCmuDict
     */
    select?: PronCmuDictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PronCmuDict
     */
    omit?: PronCmuDictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronCmuDictInclude<ExtArgs> | null
    /**
     * Filter, which PronCmuDict to fetch.
     */
    where?: PronCmuDictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PronCmuDicts to fetch.
     */
    orderBy?: PronCmuDictOrderByWithRelationInput | PronCmuDictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PronCmuDicts.
     */
    cursor?: PronCmuDictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PronCmuDicts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PronCmuDicts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PronCmuDicts.
     */
    distinct?: PronCmuDictScalarFieldEnum | PronCmuDictScalarFieldEnum[]
  }

  /**
   * PronCmuDict findFirstOrThrow
   */
  export type PronCmuDictFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PronCmuDict
     */
    select?: PronCmuDictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PronCmuDict
     */
    omit?: PronCmuDictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronCmuDictInclude<ExtArgs> | null
    /**
     * Filter, which PronCmuDict to fetch.
     */
    where?: PronCmuDictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PronCmuDicts to fetch.
     */
    orderBy?: PronCmuDictOrderByWithRelationInput | PronCmuDictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PronCmuDicts.
     */
    cursor?: PronCmuDictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PronCmuDicts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PronCmuDicts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PronCmuDicts.
     */
    distinct?: PronCmuDictScalarFieldEnum | PronCmuDictScalarFieldEnum[]
  }

  /**
   * PronCmuDict findMany
   */
  export type PronCmuDictFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PronCmuDict
     */
    select?: PronCmuDictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PronCmuDict
     */
    omit?: PronCmuDictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronCmuDictInclude<ExtArgs> | null
    /**
     * Filter, which PronCmuDicts to fetch.
     */
    where?: PronCmuDictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PronCmuDicts to fetch.
     */
    orderBy?: PronCmuDictOrderByWithRelationInput | PronCmuDictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PronCmuDicts.
     */
    cursor?: PronCmuDictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PronCmuDicts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PronCmuDicts.
     */
    skip?: number
    distinct?: PronCmuDictScalarFieldEnum | PronCmuDictScalarFieldEnum[]
  }

  /**
   * PronCmuDict create
   */
  export type PronCmuDictCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PronCmuDict
     */
    select?: PronCmuDictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PronCmuDict
     */
    omit?: PronCmuDictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronCmuDictInclude<ExtArgs> | null
    /**
     * The data needed to create a PronCmuDict.
     */
    data: XOR<PronCmuDictCreateInput, PronCmuDictUncheckedCreateInput>
  }

  /**
   * PronCmuDict createMany
   */
  export type PronCmuDictCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PronCmuDicts.
     */
    data: PronCmuDictCreateManyInput | PronCmuDictCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PronCmuDict createManyAndReturn
   */
  export type PronCmuDictCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PronCmuDict
     */
    select?: PronCmuDictSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PronCmuDict
     */
    omit?: PronCmuDictOmit<ExtArgs> | null
    /**
     * The data used to create many PronCmuDicts.
     */
    data: PronCmuDictCreateManyInput | PronCmuDictCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronCmuDictIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PronCmuDict update
   */
  export type PronCmuDictUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PronCmuDict
     */
    select?: PronCmuDictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PronCmuDict
     */
    omit?: PronCmuDictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronCmuDictInclude<ExtArgs> | null
    /**
     * The data needed to update a PronCmuDict.
     */
    data: XOR<PronCmuDictUpdateInput, PronCmuDictUncheckedUpdateInput>
    /**
     * Choose, which PronCmuDict to update.
     */
    where: PronCmuDictWhereUniqueInput
  }

  /**
   * PronCmuDict updateMany
   */
  export type PronCmuDictUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PronCmuDicts.
     */
    data: XOR<PronCmuDictUpdateManyMutationInput, PronCmuDictUncheckedUpdateManyInput>
    /**
     * Filter which PronCmuDicts to update
     */
    where?: PronCmuDictWhereInput
    /**
     * Limit how many PronCmuDicts to update.
     */
    limit?: number
  }

  /**
   * PronCmuDict updateManyAndReturn
   */
  export type PronCmuDictUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PronCmuDict
     */
    select?: PronCmuDictSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PronCmuDict
     */
    omit?: PronCmuDictOmit<ExtArgs> | null
    /**
     * The data used to update PronCmuDicts.
     */
    data: XOR<PronCmuDictUpdateManyMutationInput, PronCmuDictUncheckedUpdateManyInput>
    /**
     * Filter which PronCmuDicts to update
     */
    where?: PronCmuDictWhereInput
    /**
     * Limit how many PronCmuDicts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronCmuDictIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PronCmuDict upsert
   */
  export type PronCmuDictUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PronCmuDict
     */
    select?: PronCmuDictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PronCmuDict
     */
    omit?: PronCmuDictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronCmuDictInclude<ExtArgs> | null
    /**
     * The filter to search for the PronCmuDict to update in case it exists.
     */
    where: PronCmuDictWhereUniqueInput
    /**
     * In case the PronCmuDict found by the `where` argument doesn't exist, create a new PronCmuDict with this data.
     */
    create: XOR<PronCmuDictCreateInput, PronCmuDictUncheckedCreateInput>
    /**
     * In case the PronCmuDict was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PronCmuDictUpdateInput, PronCmuDictUncheckedUpdateInput>
  }

  /**
   * PronCmuDict delete
   */
  export type PronCmuDictDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PronCmuDict
     */
    select?: PronCmuDictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PronCmuDict
     */
    omit?: PronCmuDictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronCmuDictInclude<ExtArgs> | null
    /**
     * Filter which PronCmuDict to delete.
     */
    where: PronCmuDictWhereUniqueInput
  }

  /**
   * PronCmuDict deleteMany
   */
  export type PronCmuDictDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PronCmuDicts to delete
     */
    where?: PronCmuDictWhereInput
    /**
     * Limit how many PronCmuDicts to delete.
     */
    limit?: number
  }

  /**
   * PronCmuDict without action
   */
  export type PronCmuDictDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PronCmuDict
     */
    select?: PronCmuDictSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PronCmuDict
     */
    omit?: PronCmuDictOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PronCmuDictInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    createdAt: 'createdAt',
    auth0Id: 'auth0Id',
    name: 'name',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AudioScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    duration: 'duration',
    updatedAt: 'updatedAt',
    url: 'url'
  };

  export type AudioScalarFieldEnum = (typeof AudioScalarFieldEnum)[keyof typeof AudioScalarFieldEnum]


  export const WordScalarFieldEnum: {
    id: 'id',
    audioId: 'audioId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    word: 'word'
  };

  export type WordScalarFieldEnum = (typeof WordScalarFieldEnum)[keyof typeof WordScalarFieldEnum]


  export const IssueScalarFieldEnum: {
    id: 'id',
    name: 'name',
    featureId: 'featureId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type IssueScalarFieldEnum = (typeof IssueScalarFieldEnum)[keyof typeof IssueScalarFieldEnum]


  export const FeatureScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    order: 'order'
  };

  export type FeatureScalarFieldEnum = (typeof FeatureScalarFieldEnum)[keyof typeof FeatureScalarFieldEnum]


  export const DictionaryEntryScalarFieldEnum: {
    id: 'id',
    word: 'word',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    notes: 'notes'
  };

  export type DictionaryEntryScalarFieldEnum = (typeof DictionaryEntryScalarFieldEnum)[keyof typeof DictionaryEntryScalarFieldEnum]


  export const WordUsageScalarFieldEnum: {
    id: 'id',
    entryId: 'entryId',
    partOfSpeech: 'partOfSpeech',
    meaning: 'meaning'
  };

  export type WordUsageScalarFieldEnum = (typeof WordUsageScalarFieldEnum)[keyof typeof WordUsageScalarFieldEnum]


  export const PronunciationScalarFieldEnum: {
    id: 'id',
    usageId: 'usageId',
    phonemic: 'phonemic',
    broadIPA: 'broadIPA',
    narrowIPA: 'narrowIPA',
    audioUrl: 'audioUrl',
    speaker: 'speaker',
    dialect: 'dialect',
    isPrimary: 'isPrimary',
    notes: 'notes',
    order: 'order'
  };

  export type PronunciationScalarFieldEnum = (typeof PronunciationScalarFieldEnum)[keyof typeof PronunciationScalarFieldEnum]


  export const WordVariationScalarFieldEnum: {
    id: 'id',
    entryId: 'entryId',
    form: 'form',
    type: 'type',
    isRegular: 'isRegular',
    notes: 'notes'
  };

  export type WordVariationScalarFieldEnum = (typeof WordVariationScalarFieldEnum)[keyof typeof WordVariationScalarFieldEnum]


  export const SpellingPatternScalarFieldEnum: {
    id: 'id',
    usageId: 'usageId',
    pattern: 'pattern',
    type: 'type',
    description: 'description',
    order: 'order'
  };

  export type SpellingPatternScalarFieldEnum = (typeof SpellingPatternScalarFieldEnum)[keyof typeof SpellingPatternScalarFieldEnum]


  export const LexicalSetScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    order: 'order',
    category: 'category',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LexicalSetScalarFieldEnum = (typeof LexicalSetScalarFieldEnum)[keyof typeof LexicalSetScalarFieldEnum]


  export const LexicalSetUsageScalarFieldEnum: {
    id: 'id',
    lexicalSetId: 'lexicalSetId',
    usageId: 'usageId',
    order: 'order'
  };

  export type LexicalSetUsageScalarFieldEnum = (typeof LexicalSetUsageScalarFieldEnum)[keyof typeof LexicalSetUsageScalarFieldEnum]


  export const ExampleScalarFieldEnum: {
    id: 'id',
    usageId: 'usageId',
    sentence: 'sentence',
    context: 'context',
    difficulty: 'difficulty',
    tags: 'tags'
  };

  export type ExampleScalarFieldEnum = (typeof ExampleScalarFieldEnum)[keyof typeof ExampleScalarFieldEnum]


  export const ConsonantPhonemeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    order: 'order',
    category: 'category',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ConsonantPhonemeScalarFieldEnum = (typeof ConsonantPhonemeScalarFieldEnum)[keyof typeof ConsonantPhonemeScalarFieldEnum]


  export const ConsonantPhonemeUsageScalarFieldEnum: {
    id: 'id',
    consonantPhonemeId: 'consonantPhonemeId',
    usageId: 'usageId',
    order: 'order'
  };

  export type ConsonantPhonemeUsageScalarFieldEnum = (typeof ConsonantPhonemeUsageScalarFieldEnum)[keyof typeof ConsonantPhonemeUsageScalarFieldEnum]


  export const OrthoWordScalarFieldEnum: {
    id: 'id',
    word: 'word',
    freqSubtlexUs: 'freqSubtlexUs'
  };

  export type OrthoWordScalarFieldEnum = (typeof OrthoWordScalarFieldEnum)[keyof typeof OrthoWordScalarFieldEnum]


  export const PronCmuDictScalarFieldEnum: {
    id: 'id',
    orthoWordId: 'orthoWordId',
    pronCmuDict: 'pronCmuDict'
  };

  export type PronCmuDictScalarFieldEnum = (typeof PronCmuDictScalarFieldEnum)[keyof typeof PronCmuDictScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    auth0Id?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    role?: StringNullableFilter<"User"> | string | null
    audios?: AudioListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    auth0Id?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    audios?: AudioOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    auth0Id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    name?: StringNullableFilter<"User"> | string | null
    role?: StringNullableFilter<"User"> | string | null
    audios?: AudioListRelationFilter
  }, "id" | "email" | "auth0Id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    auth0Id?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    auth0Id?: StringNullableWithAggregatesFilter<"User"> | string | null
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type AudioWhereInput = {
    AND?: AudioWhereInput | AudioWhereInput[]
    OR?: AudioWhereInput[]
    NOT?: AudioWhereInput | AudioWhereInput[]
    id?: IntFilter<"Audio"> | number
    createdAt?: DateTimeFilter<"Audio"> | Date | string
    duration?: FloatFilter<"Audio"> | number
    updatedAt?: DateTimeFilter<"Audio"> | Date | string
    url?: StringFilter<"Audio"> | string
    words?: WordListRelationFilter
    users?: UserListRelationFilter
  }

  export type AudioOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    duration?: SortOrder
    updatedAt?: SortOrder
    url?: SortOrder
    words?: WordOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
  }

  export type AudioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AudioWhereInput | AudioWhereInput[]
    OR?: AudioWhereInput[]
    NOT?: AudioWhereInput | AudioWhereInput[]
    createdAt?: DateTimeFilter<"Audio"> | Date | string
    duration?: FloatFilter<"Audio"> | number
    updatedAt?: DateTimeFilter<"Audio"> | Date | string
    url?: StringFilter<"Audio"> | string
    words?: WordListRelationFilter
    users?: UserListRelationFilter
  }, "id">

  export type AudioOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    duration?: SortOrder
    updatedAt?: SortOrder
    url?: SortOrder
    _count?: AudioCountOrderByAggregateInput
    _avg?: AudioAvgOrderByAggregateInput
    _max?: AudioMaxOrderByAggregateInput
    _min?: AudioMinOrderByAggregateInput
    _sum?: AudioSumOrderByAggregateInput
  }

  export type AudioScalarWhereWithAggregatesInput = {
    AND?: AudioScalarWhereWithAggregatesInput | AudioScalarWhereWithAggregatesInput[]
    OR?: AudioScalarWhereWithAggregatesInput[]
    NOT?: AudioScalarWhereWithAggregatesInput | AudioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Audio"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Audio"> | Date | string
    duration?: FloatWithAggregatesFilter<"Audio"> | number
    updatedAt?: DateTimeWithAggregatesFilter<"Audio"> | Date | string
    url?: StringWithAggregatesFilter<"Audio"> | string
  }

  export type WordWhereInput = {
    AND?: WordWhereInput | WordWhereInput[]
    OR?: WordWhereInput[]
    NOT?: WordWhereInput | WordWhereInput[]
    id?: IntFilter<"Word"> | number
    audioId?: IntNullableFilter<"Word"> | number | null
    createdAt?: DateTimeFilter<"Word"> | Date | string
    updatedAt?: DateTimeFilter<"Word"> | Date | string
    word?: StringFilter<"Word"> | string
    audio?: XOR<AudioNullableScalarRelationFilter, AudioWhereInput> | null
    issues?: IssueListRelationFilter
    consonants?: ConsonantPhonemeListRelationFilter
    pronunciation?: LexicalSetListRelationFilter
  }

  export type WordOrderByWithRelationInput = {
    id?: SortOrder
    audioId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    word?: SortOrder
    audio?: AudioOrderByWithRelationInput
    issues?: IssueOrderByRelationAggregateInput
    consonants?: ConsonantPhonemeOrderByRelationAggregateInput
    pronunciation?: LexicalSetOrderByRelationAggregateInput
  }

  export type WordWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    word?: string
    AND?: WordWhereInput | WordWhereInput[]
    OR?: WordWhereInput[]
    NOT?: WordWhereInput | WordWhereInput[]
    audioId?: IntNullableFilter<"Word"> | number | null
    createdAt?: DateTimeFilter<"Word"> | Date | string
    updatedAt?: DateTimeFilter<"Word"> | Date | string
    audio?: XOR<AudioNullableScalarRelationFilter, AudioWhereInput> | null
    issues?: IssueListRelationFilter
    consonants?: ConsonantPhonemeListRelationFilter
    pronunciation?: LexicalSetListRelationFilter
  }, "id" | "word">

  export type WordOrderByWithAggregationInput = {
    id?: SortOrder
    audioId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    word?: SortOrder
    _count?: WordCountOrderByAggregateInput
    _avg?: WordAvgOrderByAggregateInput
    _max?: WordMaxOrderByAggregateInput
    _min?: WordMinOrderByAggregateInput
    _sum?: WordSumOrderByAggregateInput
  }

  export type WordScalarWhereWithAggregatesInput = {
    AND?: WordScalarWhereWithAggregatesInput | WordScalarWhereWithAggregatesInput[]
    OR?: WordScalarWhereWithAggregatesInput[]
    NOT?: WordScalarWhereWithAggregatesInput | WordScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Word"> | number
    audioId?: IntNullableWithAggregatesFilter<"Word"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Word"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Word"> | Date | string
    word?: StringWithAggregatesFilter<"Word"> | string
  }

  export type IssueWhereInput = {
    AND?: IssueWhereInput | IssueWhereInput[]
    OR?: IssueWhereInput[]
    NOT?: IssueWhereInput | IssueWhereInput[]
    id?: IntFilter<"Issue"> | number
    name?: StringFilter<"Issue"> | string
    featureId?: IntFilter<"Issue"> | number
    createdAt?: DateTimeFilter<"Issue"> | Date | string
    updatedAt?: DateTimeFilter<"Issue"> | Date | string
    feature?: XOR<FeatureScalarRelationFilter, FeatureWhereInput>
    words?: WordListRelationFilter
  }

  export type IssueOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    featureId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    feature?: FeatureOrderByWithRelationInput
    words?: WordOrderByRelationAggregateInput
  }

  export type IssueWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: IssueWhereInput | IssueWhereInput[]
    OR?: IssueWhereInput[]
    NOT?: IssueWhereInput | IssueWhereInput[]
    name?: StringFilter<"Issue"> | string
    featureId?: IntFilter<"Issue"> | number
    createdAt?: DateTimeFilter<"Issue"> | Date | string
    updatedAt?: DateTimeFilter<"Issue"> | Date | string
    feature?: XOR<FeatureScalarRelationFilter, FeatureWhereInput>
    words?: WordListRelationFilter
  }, "id">

  export type IssueOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    featureId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: IssueCountOrderByAggregateInput
    _avg?: IssueAvgOrderByAggregateInput
    _max?: IssueMaxOrderByAggregateInput
    _min?: IssueMinOrderByAggregateInput
    _sum?: IssueSumOrderByAggregateInput
  }

  export type IssueScalarWhereWithAggregatesInput = {
    AND?: IssueScalarWhereWithAggregatesInput | IssueScalarWhereWithAggregatesInput[]
    OR?: IssueScalarWhereWithAggregatesInput[]
    NOT?: IssueScalarWhereWithAggregatesInput | IssueScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Issue"> | number
    name?: StringWithAggregatesFilter<"Issue"> | string
    featureId?: IntWithAggregatesFilter<"Issue"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Issue"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Issue"> | Date | string
  }

  export type FeatureWhereInput = {
    AND?: FeatureWhereInput | FeatureWhereInput[]
    OR?: FeatureWhereInput[]
    NOT?: FeatureWhereInput | FeatureWhereInput[]
    id?: IntFilter<"Feature"> | number
    name?: StringFilter<"Feature"> | string
    type?: StringNullableFilter<"Feature"> | string | null
    order?: IntNullableFilter<"Feature"> | number | null
    issues?: IssueListRelationFilter
  }

  export type FeatureOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    issues?: IssueOrderByRelationAggregateInput
  }

  export type FeatureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeatureWhereInput | FeatureWhereInput[]
    OR?: FeatureWhereInput[]
    NOT?: FeatureWhereInput | FeatureWhereInput[]
    name?: StringFilter<"Feature"> | string
    type?: StringNullableFilter<"Feature"> | string | null
    order?: IntNullableFilter<"Feature"> | number | null
    issues?: IssueListRelationFilter
  }, "id">

  export type FeatureOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    _count?: FeatureCountOrderByAggregateInput
    _avg?: FeatureAvgOrderByAggregateInput
    _max?: FeatureMaxOrderByAggregateInput
    _min?: FeatureMinOrderByAggregateInput
    _sum?: FeatureSumOrderByAggregateInput
  }

  export type FeatureScalarWhereWithAggregatesInput = {
    AND?: FeatureScalarWhereWithAggregatesInput | FeatureScalarWhereWithAggregatesInput[]
    OR?: FeatureScalarWhereWithAggregatesInput[]
    NOT?: FeatureScalarWhereWithAggregatesInput | FeatureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Feature"> | number
    name?: StringWithAggregatesFilter<"Feature"> | string
    type?: StringNullableWithAggregatesFilter<"Feature"> | string | null
    order?: IntNullableWithAggregatesFilter<"Feature"> | number | null
  }

  export type DictionaryEntryWhereInput = {
    AND?: DictionaryEntryWhereInput | DictionaryEntryWhereInput[]
    OR?: DictionaryEntryWhereInput[]
    NOT?: DictionaryEntryWhereInput | DictionaryEntryWhereInput[]
    id?: IntFilter<"DictionaryEntry"> | number
    word?: StringFilter<"DictionaryEntry"> | string
    createdAt?: DateTimeFilter<"DictionaryEntry"> | Date | string
    updatedAt?: DateTimeFilter<"DictionaryEntry"> | Date | string
    notes?: StringNullableFilter<"DictionaryEntry"> | string | null
    usages?: WordUsageListRelationFilter
    variations?: WordVariationListRelationFilter
  }

  export type DictionaryEntryOrderByWithRelationInput = {
    id?: SortOrder
    word?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    usages?: WordUsageOrderByRelationAggregateInput
    variations?: WordVariationOrderByRelationAggregateInput
  }

  export type DictionaryEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    word?: string
    AND?: DictionaryEntryWhereInput | DictionaryEntryWhereInput[]
    OR?: DictionaryEntryWhereInput[]
    NOT?: DictionaryEntryWhereInput | DictionaryEntryWhereInput[]
    createdAt?: DateTimeFilter<"DictionaryEntry"> | Date | string
    updatedAt?: DateTimeFilter<"DictionaryEntry"> | Date | string
    notes?: StringNullableFilter<"DictionaryEntry"> | string | null
    usages?: WordUsageListRelationFilter
    variations?: WordVariationListRelationFilter
  }, "id" | "word">

  export type DictionaryEntryOrderByWithAggregationInput = {
    id?: SortOrder
    word?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: DictionaryEntryCountOrderByAggregateInput
    _avg?: DictionaryEntryAvgOrderByAggregateInput
    _max?: DictionaryEntryMaxOrderByAggregateInput
    _min?: DictionaryEntryMinOrderByAggregateInput
    _sum?: DictionaryEntrySumOrderByAggregateInput
  }

  export type DictionaryEntryScalarWhereWithAggregatesInput = {
    AND?: DictionaryEntryScalarWhereWithAggregatesInput | DictionaryEntryScalarWhereWithAggregatesInput[]
    OR?: DictionaryEntryScalarWhereWithAggregatesInput[]
    NOT?: DictionaryEntryScalarWhereWithAggregatesInput | DictionaryEntryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DictionaryEntry"> | number
    word?: StringWithAggregatesFilter<"DictionaryEntry"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DictionaryEntry"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DictionaryEntry"> | Date | string
    notes?: StringNullableWithAggregatesFilter<"DictionaryEntry"> | string | null
  }

  export type WordUsageWhereInput = {
    AND?: WordUsageWhereInput | WordUsageWhereInput[]
    OR?: WordUsageWhereInput[]
    NOT?: WordUsageWhereInput | WordUsageWhereInput[]
    id?: IntFilter<"WordUsage"> | number
    entryId?: IntFilter<"WordUsage"> | number
    partOfSpeech?: StringFilter<"WordUsage"> | string
    meaning?: StringFilter<"WordUsage"> | string
    consonantPhonemes?: ConsonantPhonemeUsageListRelationFilter
    examples?: ExampleListRelationFilter
    lexicalSets?: LexicalSetUsageListRelationFilter
    pronunciations?: PronunciationListRelationFilter
    spellingPatterns?: SpellingPatternListRelationFilter
    entry?: XOR<DictionaryEntryScalarRelationFilter, DictionaryEntryWhereInput>
  }

  export type WordUsageOrderByWithRelationInput = {
    id?: SortOrder
    entryId?: SortOrder
    partOfSpeech?: SortOrder
    meaning?: SortOrder
    consonantPhonemes?: ConsonantPhonemeUsageOrderByRelationAggregateInput
    examples?: ExampleOrderByRelationAggregateInput
    lexicalSets?: LexicalSetUsageOrderByRelationAggregateInput
    pronunciations?: PronunciationOrderByRelationAggregateInput
    spellingPatterns?: SpellingPatternOrderByRelationAggregateInput
    entry?: DictionaryEntryOrderByWithRelationInput
  }

  export type WordUsageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WordUsageWhereInput | WordUsageWhereInput[]
    OR?: WordUsageWhereInput[]
    NOT?: WordUsageWhereInput | WordUsageWhereInput[]
    entryId?: IntFilter<"WordUsage"> | number
    partOfSpeech?: StringFilter<"WordUsage"> | string
    meaning?: StringFilter<"WordUsage"> | string
    consonantPhonemes?: ConsonantPhonemeUsageListRelationFilter
    examples?: ExampleListRelationFilter
    lexicalSets?: LexicalSetUsageListRelationFilter
    pronunciations?: PronunciationListRelationFilter
    spellingPatterns?: SpellingPatternListRelationFilter
    entry?: XOR<DictionaryEntryScalarRelationFilter, DictionaryEntryWhereInput>
  }, "id">

  export type WordUsageOrderByWithAggregationInput = {
    id?: SortOrder
    entryId?: SortOrder
    partOfSpeech?: SortOrder
    meaning?: SortOrder
    _count?: WordUsageCountOrderByAggregateInput
    _avg?: WordUsageAvgOrderByAggregateInput
    _max?: WordUsageMaxOrderByAggregateInput
    _min?: WordUsageMinOrderByAggregateInput
    _sum?: WordUsageSumOrderByAggregateInput
  }

  export type WordUsageScalarWhereWithAggregatesInput = {
    AND?: WordUsageScalarWhereWithAggregatesInput | WordUsageScalarWhereWithAggregatesInput[]
    OR?: WordUsageScalarWhereWithAggregatesInput[]
    NOT?: WordUsageScalarWhereWithAggregatesInput | WordUsageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WordUsage"> | number
    entryId?: IntWithAggregatesFilter<"WordUsage"> | number
    partOfSpeech?: StringWithAggregatesFilter<"WordUsage"> | string
    meaning?: StringWithAggregatesFilter<"WordUsage"> | string
  }

  export type PronunciationWhereInput = {
    AND?: PronunciationWhereInput | PronunciationWhereInput[]
    OR?: PronunciationWhereInput[]
    NOT?: PronunciationWhereInput | PronunciationWhereInput[]
    id?: IntFilter<"Pronunciation"> | number
    usageId?: IntFilter<"Pronunciation"> | number
    phonemic?: StringNullableFilter<"Pronunciation"> | string | null
    broadIPA?: StringNullableFilter<"Pronunciation"> | string | null
    narrowIPA?: StringNullableFilter<"Pronunciation"> | string | null
    audioUrl?: StringNullableFilter<"Pronunciation"> | string | null
    speaker?: StringNullableFilter<"Pronunciation"> | string | null
    dialect?: StringNullableFilter<"Pronunciation"> | string | null
    isPrimary?: BoolFilter<"Pronunciation"> | boolean
    notes?: StringNullableFilter<"Pronunciation"> | string | null
    order?: IntNullableFilter<"Pronunciation"> | number | null
    wordUsage?: XOR<WordUsageScalarRelationFilter, WordUsageWhereInput>
  }

  export type PronunciationOrderByWithRelationInput = {
    id?: SortOrder
    usageId?: SortOrder
    phonemic?: SortOrderInput | SortOrder
    broadIPA?: SortOrderInput | SortOrder
    narrowIPA?: SortOrderInput | SortOrder
    audioUrl?: SortOrderInput | SortOrder
    speaker?: SortOrderInput | SortOrder
    dialect?: SortOrderInput | SortOrder
    isPrimary?: SortOrder
    notes?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    wordUsage?: WordUsageOrderByWithRelationInput
  }

  export type PronunciationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PronunciationWhereInput | PronunciationWhereInput[]
    OR?: PronunciationWhereInput[]
    NOT?: PronunciationWhereInput | PronunciationWhereInput[]
    usageId?: IntFilter<"Pronunciation"> | number
    phonemic?: StringNullableFilter<"Pronunciation"> | string | null
    broadIPA?: StringNullableFilter<"Pronunciation"> | string | null
    narrowIPA?: StringNullableFilter<"Pronunciation"> | string | null
    audioUrl?: StringNullableFilter<"Pronunciation"> | string | null
    speaker?: StringNullableFilter<"Pronunciation"> | string | null
    dialect?: StringNullableFilter<"Pronunciation"> | string | null
    isPrimary?: BoolFilter<"Pronunciation"> | boolean
    notes?: StringNullableFilter<"Pronunciation"> | string | null
    order?: IntNullableFilter<"Pronunciation"> | number | null
    wordUsage?: XOR<WordUsageScalarRelationFilter, WordUsageWhereInput>
  }, "id">

  export type PronunciationOrderByWithAggregationInput = {
    id?: SortOrder
    usageId?: SortOrder
    phonemic?: SortOrderInput | SortOrder
    broadIPA?: SortOrderInput | SortOrder
    narrowIPA?: SortOrderInput | SortOrder
    audioUrl?: SortOrderInput | SortOrder
    speaker?: SortOrderInput | SortOrder
    dialect?: SortOrderInput | SortOrder
    isPrimary?: SortOrder
    notes?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    _count?: PronunciationCountOrderByAggregateInput
    _avg?: PronunciationAvgOrderByAggregateInput
    _max?: PronunciationMaxOrderByAggregateInput
    _min?: PronunciationMinOrderByAggregateInput
    _sum?: PronunciationSumOrderByAggregateInput
  }

  export type PronunciationScalarWhereWithAggregatesInput = {
    AND?: PronunciationScalarWhereWithAggregatesInput | PronunciationScalarWhereWithAggregatesInput[]
    OR?: PronunciationScalarWhereWithAggregatesInput[]
    NOT?: PronunciationScalarWhereWithAggregatesInput | PronunciationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pronunciation"> | number
    usageId?: IntWithAggregatesFilter<"Pronunciation"> | number
    phonemic?: StringNullableWithAggregatesFilter<"Pronunciation"> | string | null
    broadIPA?: StringNullableWithAggregatesFilter<"Pronunciation"> | string | null
    narrowIPA?: StringNullableWithAggregatesFilter<"Pronunciation"> | string | null
    audioUrl?: StringNullableWithAggregatesFilter<"Pronunciation"> | string | null
    speaker?: StringNullableWithAggregatesFilter<"Pronunciation"> | string | null
    dialect?: StringNullableWithAggregatesFilter<"Pronunciation"> | string | null
    isPrimary?: BoolWithAggregatesFilter<"Pronunciation"> | boolean
    notes?: StringNullableWithAggregatesFilter<"Pronunciation"> | string | null
    order?: IntNullableWithAggregatesFilter<"Pronunciation"> | number | null
  }

  export type WordVariationWhereInput = {
    AND?: WordVariationWhereInput | WordVariationWhereInput[]
    OR?: WordVariationWhereInput[]
    NOT?: WordVariationWhereInput | WordVariationWhereInput[]
    id?: IntFilter<"WordVariation"> | number
    entryId?: IntFilter<"WordVariation"> | number
    form?: StringFilter<"WordVariation"> | string
    type?: StringFilter<"WordVariation"> | string
    isRegular?: BoolFilter<"WordVariation"> | boolean
    notes?: StringNullableFilter<"WordVariation"> | string | null
    entry?: XOR<DictionaryEntryScalarRelationFilter, DictionaryEntryWhereInput>
  }

  export type WordVariationOrderByWithRelationInput = {
    id?: SortOrder
    entryId?: SortOrder
    form?: SortOrder
    type?: SortOrder
    isRegular?: SortOrder
    notes?: SortOrderInput | SortOrder
    entry?: DictionaryEntryOrderByWithRelationInput
  }

  export type WordVariationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WordVariationWhereInput | WordVariationWhereInput[]
    OR?: WordVariationWhereInput[]
    NOT?: WordVariationWhereInput | WordVariationWhereInput[]
    entryId?: IntFilter<"WordVariation"> | number
    form?: StringFilter<"WordVariation"> | string
    type?: StringFilter<"WordVariation"> | string
    isRegular?: BoolFilter<"WordVariation"> | boolean
    notes?: StringNullableFilter<"WordVariation"> | string | null
    entry?: XOR<DictionaryEntryScalarRelationFilter, DictionaryEntryWhereInput>
  }, "id">

  export type WordVariationOrderByWithAggregationInput = {
    id?: SortOrder
    entryId?: SortOrder
    form?: SortOrder
    type?: SortOrder
    isRegular?: SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: WordVariationCountOrderByAggregateInput
    _avg?: WordVariationAvgOrderByAggregateInput
    _max?: WordVariationMaxOrderByAggregateInput
    _min?: WordVariationMinOrderByAggregateInput
    _sum?: WordVariationSumOrderByAggregateInput
  }

  export type WordVariationScalarWhereWithAggregatesInput = {
    AND?: WordVariationScalarWhereWithAggregatesInput | WordVariationScalarWhereWithAggregatesInput[]
    OR?: WordVariationScalarWhereWithAggregatesInput[]
    NOT?: WordVariationScalarWhereWithAggregatesInput | WordVariationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WordVariation"> | number
    entryId?: IntWithAggregatesFilter<"WordVariation"> | number
    form?: StringWithAggregatesFilter<"WordVariation"> | string
    type?: StringWithAggregatesFilter<"WordVariation"> | string
    isRegular?: BoolWithAggregatesFilter<"WordVariation"> | boolean
    notes?: StringNullableWithAggregatesFilter<"WordVariation"> | string | null
  }

  export type SpellingPatternWhereInput = {
    AND?: SpellingPatternWhereInput | SpellingPatternWhereInput[]
    OR?: SpellingPatternWhereInput[]
    NOT?: SpellingPatternWhereInput | SpellingPatternWhereInput[]
    id?: IntFilter<"SpellingPattern"> | number
    usageId?: IntFilter<"SpellingPattern"> | number
    pattern?: StringFilter<"SpellingPattern"> | string
    type?: StringFilter<"SpellingPattern"> | string
    description?: StringNullableFilter<"SpellingPattern"> | string | null
    order?: IntNullableFilter<"SpellingPattern"> | number | null
    wordUsage?: XOR<WordUsageScalarRelationFilter, WordUsageWhereInput>
  }

  export type SpellingPatternOrderByWithRelationInput = {
    id?: SortOrder
    usageId?: SortOrder
    pattern?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    wordUsage?: WordUsageOrderByWithRelationInput
  }

  export type SpellingPatternWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SpellingPatternWhereInput | SpellingPatternWhereInput[]
    OR?: SpellingPatternWhereInput[]
    NOT?: SpellingPatternWhereInput | SpellingPatternWhereInput[]
    usageId?: IntFilter<"SpellingPattern"> | number
    pattern?: StringFilter<"SpellingPattern"> | string
    type?: StringFilter<"SpellingPattern"> | string
    description?: StringNullableFilter<"SpellingPattern"> | string | null
    order?: IntNullableFilter<"SpellingPattern"> | number | null
    wordUsage?: XOR<WordUsageScalarRelationFilter, WordUsageWhereInput>
  }, "id">

  export type SpellingPatternOrderByWithAggregationInput = {
    id?: SortOrder
    usageId?: SortOrder
    pattern?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    _count?: SpellingPatternCountOrderByAggregateInput
    _avg?: SpellingPatternAvgOrderByAggregateInput
    _max?: SpellingPatternMaxOrderByAggregateInput
    _min?: SpellingPatternMinOrderByAggregateInput
    _sum?: SpellingPatternSumOrderByAggregateInput
  }

  export type SpellingPatternScalarWhereWithAggregatesInput = {
    AND?: SpellingPatternScalarWhereWithAggregatesInput | SpellingPatternScalarWhereWithAggregatesInput[]
    OR?: SpellingPatternScalarWhereWithAggregatesInput[]
    NOT?: SpellingPatternScalarWhereWithAggregatesInput | SpellingPatternScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SpellingPattern"> | number
    usageId?: IntWithAggregatesFilter<"SpellingPattern"> | number
    pattern?: StringWithAggregatesFilter<"SpellingPattern"> | string
    type?: StringWithAggregatesFilter<"SpellingPattern"> | string
    description?: StringNullableWithAggregatesFilter<"SpellingPattern"> | string | null
    order?: IntNullableWithAggregatesFilter<"SpellingPattern"> | number | null
  }

  export type LexicalSetWhereInput = {
    AND?: LexicalSetWhereInput | LexicalSetWhereInput[]
    OR?: LexicalSetWhereInput[]
    NOT?: LexicalSetWhereInput | LexicalSetWhereInput[]
    id?: IntFilter<"LexicalSet"> | number
    name?: StringFilter<"LexicalSet"> | string
    description?: StringNullableFilter<"LexicalSet"> | string | null
    order?: IntNullableFilter<"LexicalSet"> | number | null
    category?: StringNullableFilter<"LexicalSet"> | string | null
    createdAt?: DateTimeFilter<"LexicalSet"> | Date | string
    updatedAt?: DateTimeFilter<"LexicalSet"> | Date | string
    usages?: LexicalSetUsageListRelationFilter
    words?: WordListRelationFilter
  }

  export type LexicalSetOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usages?: LexicalSetUsageOrderByRelationAggregateInput
    words?: WordOrderByRelationAggregateInput
  }

  export type LexicalSetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: LexicalSetWhereInput | LexicalSetWhereInput[]
    OR?: LexicalSetWhereInput[]
    NOT?: LexicalSetWhereInput | LexicalSetWhereInput[]
    description?: StringNullableFilter<"LexicalSet"> | string | null
    order?: IntNullableFilter<"LexicalSet"> | number | null
    category?: StringNullableFilter<"LexicalSet"> | string | null
    createdAt?: DateTimeFilter<"LexicalSet"> | Date | string
    updatedAt?: DateTimeFilter<"LexicalSet"> | Date | string
    usages?: LexicalSetUsageListRelationFilter
    words?: WordListRelationFilter
  }, "id" | "name">

  export type LexicalSetOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LexicalSetCountOrderByAggregateInput
    _avg?: LexicalSetAvgOrderByAggregateInput
    _max?: LexicalSetMaxOrderByAggregateInput
    _min?: LexicalSetMinOrderByAggregateInput
    _sum?: LexicalSetSumOrderByAggregateInput
  }

  export type LexicalSetScalarWhereWithAggregatesInput = {
    AND?: LexicalSetScalarWhereWithAggregatesInput | LexicalSetScalarWhereWithAggregatesInput[]
    OR?: LexicalSetScalarWhereWithAggregatesInput[]
    NOT?: LexicalSetScalarWhereWithAggregatesInput | LexicalSetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LexicalSet"> | number
    name?: StringWithAggregatesFilter<"LexicalSet"> | string
    description?: StringNullableWithAggregatesFilter<"LexicalSet"> | string | null
    order?: IntNullableWithAggregatesFilter<"LexicalSet"> | number | null
    category?: StringNullableWithAggregatesFilter<"LexicalSet"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"LexicalSet"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LexicalSet"> | Date | string
  }

  export type LexicalSetUsageWhereInput = {
    AND?: LexicalSetUsageWhereInput | LexicalSetUsageWhereInput[]
    OR?: LexicalSetUsageWhereInput[]
    NOT?: LexicalSetUsageWhereInput | LexicalSetUsageWhereInput[]
    id?: IntFilter<"LexicalSetUsage"> | number
    lexicalSetId?: IntFilter<"LexicalSetUsage"> | number
    usageId?: IntFilter<"LexicalSetUsage"> | number
    order?: IntNullableFilter<"LexicalSetUsage"> | number | null
    lexicalSet?: XOR<LexicalSetScalarRelationFilter, LexicalSetWhereInput>
    wordUsage?: XOR<WordUsageScalarRelationFilter, WordUsageWhereInput>
  }

  export type LexicalSetUsageOrderByWithRelationInput = {
    id?: SortOrder
    lexicalSetId?: SortOrder
    usageId?: SortOrder
    order?: SortOrderInput | SortOrder
    lexicalSet?: LexicalSetOrderByWithRelationInput
    wordUsage?: WordUsageOrderByWithRelationInput
  }

  export type LexicalSetUsageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    lexicalSetId_usageId?: LexicalSetUsageLexicalSetIdUsageIdCompoundUniqueInput
    AND?: LexicalSetUsageWhereInput | LexicalSetUsageWhereInput[]
    OR?: LexicalSetUsageWhereInput[]
    NOT?: LexicalSetUsageWhereInput | LexicalSetUsageWhereInput[]
    lexicalSetId?: IntFilter<"LexicalSetUsage"> | number
    usageId?: IntFilter<"LexicalSetUsage"> | number
    order?: IntNullableFilter<"LexicalSetUsage"> | number | null
    lexicalSet?: XOR<LexicalSetScalarRelationFilter, LexicalSetWhereInput>
    wordUsage?: XOR<WordUsageScalarRelationFilter, WordUsageWhereInput>
  }, "id" | "lexicalSetId_usageId">

  export type LexicalSetUsageOrderByWithAggregationInput = {
    id?: SortOrder
    lexicalSetId?: SortOrder
    usageId?: SortOrder
    order?: SortOrderInput | SortOrder
    _count?: LexicalSetUsageCountOrderByAggregateInput
    _avg?: LexicalSetUsageAvgOrderByAggregateInput
    _max?: LexicalSetUsageMaxOrderByAggregateInput
    _min?: LexicalSetUsageMinOrderByAggregateInput
    _sum?: LexicalSetUsageSumOrderByAggregateInput
  }

  export type LexicalSetUsageScalarWhereWithAggregatesInput = {
    AND?: LexicalSetUsageScalarWhereWithAggregatesInput | LexicalSetUsageScalarWhereWithAggregatesInput[]
    OR?: LexicalSetUsageScalarWhereWithAggregatesInput[]
    NOT?: LexicalSetUsageScalarWhereWithAggregatesInput | LexicalSetUsageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LexicalSetUsage"> | number
    lexicalSetId?: IntWithAggregatesFilter<"LexicalSetUsage"> | number
    usageId?: IntWithAggregatesFilter<"LexicalSetUsage"> | number
    order?: IntNullableWithAggregatesFilter<"LexicalSetUsage"> | number | null
  }

  export type ExampleWhereInput = {
    AND?: ExampleWhereInput | ExampleWhereInput[]
    OR?: ExampleWhereInput[]
    NOT?: ExampleWhereInput | ExampleWhereInput[]
    id?: IntFilter<"Example"> | number
    usageId?: IntFilter<"Example"> | number
    sentence?: StringFilter<"Example"> | string
    context?: StringNullableFilter<"Example"> | string | null
    difficulty?: StringNullableFilter<"Example"> | string | null
    tags?: StringNullableListFilter<"Example">
    wordUsage?: XOR<WordUsageScalarRelationFilter, WordUsageWhereInput>
  }

  export type ExampleOrderByWithRelationInput = {
    id?: SortOrder
    usageId?: SortOrder
    sentence?: SortOrder
    context?: SortOrderInput | SortOrder
    difficulty?: SortOrderInput | SortOrder
    tags?: SortOrder
    wordUsage?: WordUsageOrderByWithRelationInput
  }

  export type ExampleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ExampleWhereInput | ExampleWhereInput[]
    OR?: ExampleWhereInput[]
    NOT?: ExampleWhereInput | ExampleWhereInput[]
    usageId?: IntFilter<"Example"> | number
    sentence?: StringFilter<"Example"> | string
    context?: StringNullableFilter<"Example"> | string | null
    difficulty?: StringNullableFilter<"Example"> | string | null
    tags?: StringNullableListFilter<"Example">
    wordUsage?: XOR<WordUsageScalarRelationFilter, WordUsageWhereInput>
  }, "id">

  export type ExampleOrderByWithAggregationInput = {
    id?: SortOrder
    usageId?: SortOrder
    sentence?: SortOrder
    context?: SortOrderInput | SortOrder
    difficulty?: SortOrderInput | SortOrder
    tags?: SortOrder
    _count?: ExampleCountOrderByAggregateInput
    _avg?: ExampleAvgOrderByAggregateInput
    _max?: ExampleMaxOrderByAggregateInput
    _min?: ExampleMinOrderByAggregateInput
    _sum?: ExampleSumOrderByAggregateInput
  }

  export type ExampleScalarWhereWithAggregatesInput = {
    AND?: ExampleScalarWhereWithAggregatesInput | ExampleScalarWhereWithAggregatesInput[]
    OR?: ExampleScalarWhereWithAggregatesInput[]
    NOT?: ExampleScalarWhereWithAggregatesInput | ExampleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Example"> | number
    usageId?: IntWithAggregatesFilter<"Example"> | number
    sentence?: StringWithAggregatesFilter<"Example"> | string
    context?: StringNullableWithAggregatesFilter<"Example"> | string | null
    difficulty?: StringNullableWithAggregatesFilter<"Example"> | string | null
    tags?: StringNullableListFilter<"Example">
  }

  export type ConsonantPhonemeWhereInput = {
    AND?: ConsonantPhonemeWhereInput | ConsonantPhonemeWhereInput[]
    OR?: ConsonantPhonemeWhereInput[]
    NOT?: ConsonantPhonemeWhereInput | ConsonantPhonemeWhereInput[]
    id?: IntFilter<"ConsonantPhoneme"> | number
    name?: StringFilter<"ConsonantPhoneme"> | string
    description?: StringNullableFilter<"ConsonantPhoneme"> | string | null
    order?: IntNullableFilter<"ConsonantPhoneme"> | number | null
    category?: StringNullableFilter<"ConsonantPhoneme"> | string | null
    createdAt?: DateTimeFilter<"ConsonantPhoneme"> | Date | string
    updatedAt?: DateTimeFilter<"ConsonantPhoneme"> | Date | string
    usages?: ConsonantPhonemeUsageListRelationFilter
    words?: WordListRelationFilter
  }

  export type ConsonantPhonemeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usages?: ConsonantPhonemeUsageOrderByRelationAggregateInput
    words?: WordOrderByRelationAggregateInput
  }

  export type ConsonantPhonemeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: ConsonantPhonemeWhereInput | ConsonantPhonemeWhereInput[]
    OR?: ConsonantPhonemeWhereInput[]
    NOT?: ConsonantPhonemeWhereInput | ConsonantPhonemeWhereInput[]
    description?: StringNullableFilter<"ConsonantPhoneme"> | string | null
    order?: IntNullableFilter<"ConsonantPhoneme"> | number | null
    category?: StringNullableFilter<"ConsonantPhoneme"> | string | null
    createdAt?: DateTimeFilter<"ConsonantPhoneme"> | Date | string
    updatedAt?: DateTimeFilter<"ConsonantPhoneme"> | Date | string
    usages?: ConsonantPhonemeUsageListRelationFilter
    words?: WordListRelationFilter
  }, "id" | "name">

  export type ConsonantPhonemeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ConsonantPhonemeCountOrderByAggregateInput
    _avg?: ConsonantPhonemeAvgOrderByAggregateInput
    _max?: ConsonantPhonemeMaxOrderByAggregateInput
    _min?: ConsonantPhonemeMinOrderByAggregateInput
    _sum?: ConsonantPhonemeSumOrderByAggregateInput
  }

  export type ConsonantPhonemeScalarWhereWithAggregatesInput = {
    AND?: ConsonantPhonemeScalarWhereWithAggregatesInput | ConsonantPhonemeScalarWhereWithAggregatesInput[]
    OR?: ConsonantPhonemeScalarWhereWithAggregatesInput[]
    NOT?: ConsonantPhonemeScalarWhereWithAggregatesInput | ConsonantPhonemeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ConsonantPhoneme"> | number
    name?: StringWithAggregatesFilter<"ConsonantPhoneme"> | string
    description?: StringNullableWithAggregatesFilter<"ConsonantPhoneme"> | string | null
    order?: IntNullableWithAggregatesFilter<"ConsonantPhoneme"> | number | null
    category?: StringNullableWithAggregatesFilter<"ConsonantPhoneme"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ConsonantPhoneme"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ConsonantPhoneme"> | Date | string
  }

  export type ConsonantPhonemeUsageWhereInput = {
    AND?: ConsonantPhonemeUsageWhereInput | ConsonantPhonemeUsageWhereInput[]
    OR?: ConsonantPhonemeUsageWhereInput[]
    NOT?: ConsonantPhonemeUsageWhereInput | ConsonantPhonemeUsageWhereInput[]
    id?: IntFilter<"ConsonantPhonemeUsage"> | number
    consonantPhonemeId?: IntFilter<"ConsonantPhonemeUsage"> | number
    usageId?: IntFilter<"ConsonantPhonemeUsage"> | number
    order?: IntNullableFilter<"ConsonantPhonemeUsage"> | number | null
    consonantPhoneme?: XOR<ConsonantPhonemeScalarRelationFilter, ConsonantPhonemeWhereInput>
    wordUsage?: XOR<WordUsageScalarRelationFilter, WordUsageWhereInput>
  }

  export type ConsonantPhonemeUsageOrderByWithRelationInput = {
    id?: SortOrder
    consonantPhonemeId?: SortOrder
    usageId?: SortOrder
    order?: SortOrderInput | SortOrder
    consonantPhoneme?: ConsonantPhonemeOrderByWithRelationInput
    wordUsage?: WordUsageOrderByWithRelationInput
  }

  export type ConsonantPhonemeUsageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    consonantPhonemeId_usageId?: ConsonantPhonemeUsageConsonantPhonemeIdUsageIdCompoundUniqueInput
    AND?: ConsonantPhonemeUsageWhereInput | ConsonantPhonemeUsageWhereInput[]
    OR?: ConsonantPhonemeUsageWhereInput[]
    NOT?: ConsonantPhonemeUsageWhereInput | ConsonantPhonemeUsageWhereInput[]
    consonantPhonemeId?: IntFilter<"ConsonantPhonemeUsage"> | number
    usageId?: IntFilter<"ConsonantPhonemeUsage"> | number
    order?: IntNullableFilter<"ConsonantPhonemeUsage"> | number | null
    consonantPhoneme?: XOR<ConsonantPhonemeScalarRelationFilter, ConsonantPhonemeWhereInput>
    wordUsage?: XOR<WordUsageScalarRelationFilter, WordUsageWhereInput>
  }, "id" | "consonantPhonemeId_usageId">

  export type ConsonantPhonemeUsageOrderByWithAggregationInput = {
    id?: SortOrder
    consonantPhonemeId?: SortOrder
    usageId?: SortOrder
    order?: SortOrderInput | SortOrder
    _count?: ConsonantPhonemeUsageCountOrderByAggregateInput
    _avg?: ConsonantPhonemeUsageAvgOrderByAggregateInput
    _max?: ConsonantPhonemeUsageMaxOrderByAggregateInput
    _min?: ConsonantPhonemeUsageMinOrderByAggregateInput
    _sum?: ConsonantPhonemeUsageSumOrderByAggregateInput
  }

  export type ConsonantPhonemeUsageScalarWhereWithAggregatesInput = {
    AND?: ConsonantPhonemeUsageScalarWhereWithAggregatesInput | ConsonantPhonemeUsageScalarWhereWithAggregatesInput[]
    OR?: ConsonantPhonemeUsageScalarWhereWithAggregatesInput[]
    NOT?: ConsonantPhonemeUsageScalarWhereWithAggregatesInput | ConsonantPhonemeUsageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ConsonantPhonemeUsage"> | number
    consonantPhonemeId?: IntWithAggregatesFilter<"ConsonantPhonemeUsage"> | number
    usageId?: IntWithAggregatesFilter<"ConsonantPhonemeUsage"> | number
    order?: IntNullableWithAggregatesFilter<"ConsonantPhonemeUsage"> | number | null
  }

  export type OrthoWordWhereInput = {
    AND?: OrthoWordWhereInput | OrthoWordWhereInput[]
    OR?: OrthoWordWhereInput[]
    NOT?: OrthoWordWhereInput | OrthoWordWhereInput[]
    id?: IntFilter<"OrthoWord"> | number
    word?: StringFilter<"OrthoWord"> | string
    freqSubtlexUs?: IntNullableFilter<"OrthoWord"> | number | null
    pronsCmuDict?: PronCmuDictListRelationFilter
  }

  export type OrthoWordOrderByWithRelationInput = {
    id?: SortOrder
    word?: SortOrder
    freqSubtlexUs?: SortOrderInput | SortOrder
    pronsCmuDict?: PronCmuDictOrderByRelationAggregateInput
  }

  export type OrthoWordWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    word?: string
    AND?: OrthoWordWhereInput | OrthoWordWhereInput[]
    OR?: OrthoWordWhereInput[]
    NOT?: OrthoWordWhereInput | OrthoWordWhereInput[]
    freqSubtlexUs?: IntNullableFilter<"OrthoWord"> | number | null
    pronsCmuDict?: PronCmuDictListRelationFilter
  }, "id" | "word">

  export type OrthoWordOrderByWithAggregationInput = {
    id?: SortOrder
    word?: SortOrder
    freqSubtlexUs?: SortOrderInput | SortOrder
    _count?: OrthoWordCountOrderByAggregateInput
    _avg?: OrthoWordAvgOrderByAggregateInput
    _max?: OrthoWordMaxOrderByAggregateInput
    _min?: OrthoWordMinOrderByAggregateInput
    _sum?: OrthoWordSumOrderByAggregateInput
  }

  export type OrthoWordScalarWhereWithAggregatesInput = {
    AND?: OrthoWordScalarWhereWithAggregatesInput | OrthoWordScalarWhereWithAggregatesInput[]
    OR?: OrthoWordScalarWhereWithAggregatesInput[]
    NOT?: OrthoWordScalarWhereWithAggregatesInput | OrthoWordScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OrthoWord"> | number
    word?: StringWithAggregatesFilter<"OrthoWord"> | string
    freqSubtlexUs?: IntNullableWithAggregatesFilter<"OrthoWord"> | number | null
  }

  export type PronCmuDictWhereInput = {
    AND?: PronCmuDictWhereInput | PronCmuDictWhereInput[]
    OR?: PronCmuDictWhereInput[]
    NOT?: PronCmuDictWhereInput | PronCmuDictWhereInput[]
    id?: IntFilter<"PronCmuDict"> | number
    orthoWordId?: IntFilter<"PronCmuDict"> | number
    pronCmuDict?: StringFilter<"PronCmuDict"> | string
    orthoWord?: XOR<OrthoWordScalarRelationFilter, OrthoWordWhereInput>
  }

  export type PronCmuDictOrderByWithRelationInput = {
    id?: SortOrder
    orthoWordId?: SortOrder
    pronCmuDict?: SortOrder
    orthoWord?: OrthoWordOrderByWithRelationInput
  }

  export type PronCmuDictWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    orthoWordId_pronCmuDict?: PronCmuDictOrthoWordIdPronCmuDictCompoundUniqueInput
    AND?: PronCmuDictWhereInput | PronCmuDictWhereInput[]
    OR?: PronCmuDictWhereInput[]
    NOT?: PronCmuDictWhereInput | PronCmuDictWhereInput[]
    orthoWordId?: IntFilter<"PronCmuDict"> | number
    pronCmuDict?: StringFilter<"PronCmuDict"> | string
    orthoWord?: XOR<OrthoWordScalarRelationFilter, OrthoWordWhereInput>
  }, "id" | "orthoWordId_pronCmuDict">

  export type PronCmuDictOrderByWithAggregationInput = {
    id?: SortOrder
    orthoWordId?: SortOrder
    pronCmuDict?: SortOrder
    _count?: PronCmuDictCountOrderByAggregateInput
    _avg?: PronCmuDictAvgOrderByAggregateInput
    _max?: PronCmuDictMaxOrderByAggregateInput
    _min?: PronCmuDictMinOrderByAggregateInput
    _sum?: PronCmuDictSumOrderByAggregateInput
  }

  export type PronCmuDictScalarWhereWithAggregatesInput = {
    AND?: PronCmuDictScalarWhereWithAggregatesInput | PronCmuDictScalarWhereWithAggregatesInput[]
    OR?: PronCmuDictScalarWhereWithAggregatesInput[]
    NOT?: PronCmuDictScalarWhereWithAggregatesInput | PronCmuDictScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PronCmuDict"> | number
    orthoWordId?: IntWithAggregatesFilter<"PronCmuDict"> | number
    pronCmuDict?: StringWithAggregatesFilter<"PronCmuDict"> | string
  }

  export type UserCreateInput = {
    email: string
    createdAt?: Date | string
    auth0Id?: string | null
    name?: string | null
    role?: string | null
    audios?: AudioCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    createdAt?: Date | string
    auth0Id?: string | null
    name?: string | null
    role?: string | null
    audios?: AudioUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auth0Id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    audios?: AudioUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auth0Id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    audios?: AudioUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    createdAt?: Date | string
    auth0Id?: string | null
    name?: string | null
    role?: string | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auth0Id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auth0Id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AudioCreateInput = {
    createdAt?: Date | string
    duration: number
    updatedAt?: Date | string
    url: string
    words?: WordCreateNestedManyWithoutAudioInput
    users?: UserCreateNestedManyWithoutAudiosInput
  }

  export type AudioUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    duration: number
    updatedAt?: Date | string
    url: string
    words?: WordUncheckedCreateNestedManyWithoutAudioInput
    users?: UserUncheckedCreateNestedManyWithoutAudiosInput
  }

  export type AudioUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    words?: WordUpdateManyWithoutAudioNestedInput
    users?: UserUpdateManyWithoutAudiosNestedInput
  }

  export type AudioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    words?: WordUncheckedUpdateManyWithoutAudioNestedInput
    users?: UserUncheckedUpdateManyWithoutAudiosNestedInput
  }

  export type AudioCreateManyInput = {
    id?: number
    createdAt?: Date | string
    duration: number
    updatedAt?: Date | string
    url: string
  }

  export type AudioUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type AudioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type WordCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    word: string
    audio?: AudioCreateNestedOneWithoutWordsInput
    issues?: IssueCreateNestedManyWithoutWordsInput
    consonants?: ConsonantPhonemeCreateNestedManyWithoutWordsInput
    pronunciation?: LexicalSetCreateNestedManyWithoutWordsInput
  }

  export type WordUncheckedCreateInput = {
    id?: number
    audioId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    word: string
    issues?: IssueUncheckedCreateNestedManyWithoutWordsInput
    consonants?: ConsonantPhonemeUncheckedCreateNestedManyWithoutWordsInput
    pronunciation?: LexicalSetUncheckedCreateNestedManyWithoutWordsInput
  }

  export type WordUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    word?: StringFieldUpdateOperationsInput | string
    audio?: AudioUpdateOneWithoutWordsNestedInput
    issues?: IssueUpdateManyWithoutWordsNestedInput
    consonants?: ConsonantPhonemeUpdateManyWithoutWordsNestedInput
    pronunciation?: LexicalSetUpdateManyWithoutWordsNestedInput
  }

  export type WordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    audioId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    word?: StringFieldUpdateOperationsInput | string
    issues?: IssueUncheckedUpdateManyWithoutWordsNestedInput
    consonants?: ConsonantPhonemeUncheckedUpdateManyWithoutWordsNestedInput
    pronunciation?: LexicalSetUncheckedUpdateManyWithoutWordsNestedInput
  }

  export type WordCreateManyInput = {
    id?: number
    audioId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    word: string
  }

  export type WordUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    word?: StringFieldUpdateOperationsInput | string
  }

  export type WordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    audioId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    word?: StringFieldUpdateOperationsInput | string
  }

  export type IssueCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    feature: FeatureCreateNestedOneWithoutIssuesInput
    words?: WordCreateNestedManyWithoutIssuesInput
  }

  export type IssueUncheckedCreateInput = {
    id?: number
    name: string
    featureId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    words?: WordUncheckedCreateNestedManyWithoutIssuesInput
  }

  export type IssueUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feature?: FeatureUpdateOneRequiredWithoutIssuesNestedInput
    words?: WordUpdateManyWithoutIssuesNestedInput
  }

  export type IssueUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    featureId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    words?: WordUncheckedUpdateManyWithoutIssuesNestedInput
  }

  export type IssueCreateManyInput = {
    id?: number
    name: string
    featureId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IssueUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IssueUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    featureId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeatureCreateInput = {
    name: string
    type?: string | null
    order?: number | null
    issues?: IssueCreateNestedManyWithoutFeatureInput
  }

  export type FeatureUncheckedCreateInput = {
    id?: number
    name: string
    type?: string | null
    order?: number | null
    issues?: IssueUncheckedCreateNestedManyWithoutFeatureInput
  }

  export type FeatureUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    issues?: IssueUpdateManyWithoutFeatureNestedInput
  }

  export type FeatureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    issues?: IssueUncheckedUpdateManyWithoutFeatureNestedInput
  }

  export type FeatureCreateManyInput = {
    id?: number
    name: string
    type?: string | null
    order?: number | null
  }

  export type FeatureUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FeatureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DictionaryEntryCreateInput = {
    word: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    usages?: WordUsageCreateNestedManyWithoutEntryInput
    variations?: WordVariationCreateNestedManyWithoutEntryInput
  }

  export type DictionaryEntryUncheckedCreateInput = {
    id?: number
    word: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    usages?: WordUsageUncheckedCreateNestedManyWithoutEntryInput
    variations?: WordVariationUncheckedCreateNestedManyWithoutEntryInput
  }

  export type DictionaryEntryUpdateInput = {
    word?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    usages?: WordUsageUpdateManyWithoutEntryNestedInput
    variations?: WordVariationUpdateManyWithoutEntryNestedInput
  }

  export type DictionaryEntryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    word?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    usages?: WordUsageUncheckedUpdateManyWithoutEntryNestedInput
    variations?: WordVariationUncheckedUpdateManyWithoutEntryNestedInput
  }

  export type DictionaryEntryCreateManyInput = {
    id?: number
    word: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
  }

  export type DictionaryEntryUpdateManyMutationInput = {
    word?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DictionaryEntryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    word?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WordUsageCreateInput = {
    partOfSpeech: string
    meaning: string
    consonantPhonemes?: ConsonantPhonemeUsageCreateNestedManyWithoutWordUsageInput
    examples?: ExampleCreateNestedManyWithoutWordUsageInput
    lexicalSets?: LexicalSetUsageCreateNestedManyWithoutWordUsageInput
    pronunciations?: PronunciationCreateNestedManyWithoutWordUsageInput
    spellingPatterns?: SpellingPatternCreateNestedManyWithoutWordUsageInput
    entry: DictionaryEntryCreateNestedOneWithoutUsagesInput
  }

  export type WordUsageUncheckedCreateInput = {
    id?: number
    entryId: number
    partOfSpeech: string
    meaning: string
    consonantPhonemes?: ConsonantPhonemeUsageUncheckedCreateNestedManyWithoutWordUsageInput
    examples?: ExampleUncheckedCreateNestedManyWithoutWordUsageInput
    lexicalSets?: LexicalSetUsageUncheckedCreateNestedManyWithoutWordUsageInput
    pronunciations?: PronunciationUncheckedCreateNestedManyWithoutWordUsageInput
    spellingPatterns?: SpellingPatternUncheckedCreateNestedManyWithoutWordUsageInput
  }

  export type WordUsageUpdateInput = {
    partOfSpeech?: StringFieldUpdateOperationsInput | string
    meaning?: StringFieldUpdateOperationsInput | string
    consonantPhonemes?: ConsonantPhonemeUsageUpdateManyWithoutWordUsageNestedInput
    examples?: ExampleUpdateManyWithoutWordUsageNestedInput
    lexicalSets?: LexicalSetUsageUpdateManyWithoutWordUsageNestedInput
    pronunciations?: PronunciationUpdateManyWithoutWordUsageNestedInput
    spellingPatterns?: SpellingPatternUpdateManyWithoutWordUsageNestedInput
    entry?: DictionaryEntryUpdateOneRequiredWithoutUsagesNestedInput
  }

  export type WordUsageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    entryId?: IntFieldUpdateOperationsInput | number
    partOfSpeech?: StringFieldUpdateOperationsInput | string
    meaning?: StringFieldUpdateOperationsInput | string
    consonantPhonemes?: ConsonantPhonemeUsageUncheckedUpdateManyWithoutWordUsageNestedInput
    examples?: ExampleUncheckedUpdateManyWithoutWordUsageNestedInput
    lexicalSets?: LexicalSetUsageUncheckedUpdateManyWithoutWordUsageNestedInput
    pronunciations?: PronunciationUncheckedUpdateManyWithoutWordUsageNestedInput
    spellingPatterns?: SpellingPatternUncheckedUpdateManyWithoutWordUsageNestedInput
  }

  export type WordUsageCreateManyInput = {
    id?: number
    entryId: number
    partOfSpeech: string
    meaning: string
  }

  export type WordUsageUpdateManyMutationInput = {
    partOfSpeech?: StringFieldUpdateOperationsInput | string
    meaning?: StringFieldUpdateOperationsInput | string
  }

  export type WordUsageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    entryId?: IntFieldUpdateOperationsInput | number
    partOfSpeech?: StringFieldUpdateOperationsInput | string
    meaning?: StringFieldUpdateOperationsInput | string
  }

  export type PronunciationCreateInput = {
    phonemic?: string | null
    broadIPA?: string | null
    narrowIPA?: string | null
    audioUrl?: string | null
    speaker?: string | null
    dialect?: string | null
    isPrimary?: boolean
    notes?: string | null
    order?: number | null
    wordUsage: WordUsageCreateNestedOneWithoutPronunciationsInput
  }

  export type PronunciationUncheckedCreateInput = {
    id?: number
    usageId: number
    phonemic?: string | null
    broadIPA?: string | null
    narrowIPA?: string | null
    audioUrl?: string | null
    speaker?: string | null
    dialect?: string | null
    isPrimary?: boolean
    notes?: string | null
    order?: number | null
  }

  export type PronunciationUpdateInput = {
    phonemic?: NullableStringFieldUpdateOperationsInput | string | null
    broadIPA?: NullableStringFieldUpdateOperationsInput | string | null
    narrowIPA?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    speaker?: NullableStringFieldUpdateOperationsInput | string | null
    dialect?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    wordUsage?: WordUsageUpdateOneRequiredWithoutPronunciationsNestedInput
  }

  export type PronunciationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usageId?: IntFieldUpdateOperationsInput | number
    phonemic?: NullableStringFieldUpdateOperationsInput | string | null
    broadIPA?: NullableStringFieldUpdateOperationsInput | string | null
    narrowIPA?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    speaker?: NullableStringFieldUpdateOperationsInput | string | null
    dialect?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PronunciationCreateManyInput = {
    id?: number
    usageId: number
    phonemic?: string | null
    broadIPA?: string | null
    narrowIPA?: string | null
    audioUrl?: string | null
    speaker?: string | null
    dialect?: string | null
    isPrimary?: boolean
    notes?: string | null
    order?: number | null
  }

  export type PronunciationUpdateManyMutationInput = {
    phonemic?: NullableStringFieldUpdateOperationsInput | string | null
    broadIPA?: NullableStringFieldUpdateOperationsInput | string | null
    narrowIPA?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    speaker?: NullableStringFieldUpdateOperationsInput | string | null
    dialect?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PronunciationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usageId?: IntFieldUpdateOperationsInput | number
    phonemic?: NullableStringFieldUpdateOperationsInput | string | null
    broadIPA?: NullableStringFieldUpdateOperationsInput | string | null
    narrowIPA?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    speaker?: NullableStringFieldUpdateOperationsInput | string | null
    dialect?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WordVariationCreateInput = {
    form: string
    type: string
    isRegular: boolean
    notes?: string | null
    entry: DictionaryEntryCreateNestedOneWithoutVariationsInput
  }

  export type WordVariationUncheckedCreateInput = {
    id?: number
    entryId: number
    form: string
    type: string
    isRegular: boolean
    notes?: string | null
  }

  export type WordVariationUpdateInput = {
    form?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRegular?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    entry?: DictionaryEntryUpdateOneRequiredWithoutVariationsNestedInput
  }

  export type WordVariationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    entryId?: IntFieldUpdateOperationsInput | number
    form?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRegular?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WordVariationCreateManyInput = {
    id?: number
    entryId: number
    form: string
    type: string
    isRegular: boolean
    notes?: string | null
  }

  export type WordVariationUpdateManyMutationInput = {
    form?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRegular?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WordVariationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    entryId?: IntFieldUpdateOperationsInput | number
    form?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRegular?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SpellingPatternCreateInput = {
    pattern: string
    type: string
    description?: string | null
    order?: number | null
    wordUsage: WordUsageCreateNestedOneWithoutSpellingPatternsInput
  }

  export type SpellingPatternUncheckedCreateInput = {
    id?: number
    usageId: number
    pattern: string
    type: string
    description?: string | null
    order?: number | null
  }

  export type SpellingPatternUpdateInput = {
    pattern?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    wordUsage?: WordUsageUpdateOneRequiredWithoutSpellingPatternsNestedInput
  }

  export type SpellingPatternUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usageId?: IntFieldUpdateOperationsInput | number
    pattern?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpellingPatternCreateManyInput = {
    id?: number
    usageId: number
    pattern: string
    type: string
    description?: string | null
    order?: number | null
  }

  export type SpellingPatternUpdateManyMutationInput = {
    pattern?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpellingPatternUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usageId?: IntFieldUpdateOperationsInput | number
    pattern?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LexicalSetCreateInput = {
    name: string
    description?: string | null
    order?: number | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usages?: LexicalSetUsageCreateNestedManyWithoutLexicalSetInput
    words?: WordCreateNestedManyWithoutPronunciationInput
  }

  export type LexicalSetUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    order?: number | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usages?: LexicalSetUsageUncheckedCreateNestedManyWithoutLexicalSetInput
    words?: WordUncheckedCreateNestedManyWithoutPronunciationInput
  }

  export type LexicalSetUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usages?: LexicalSetUsageUpdateManyWithoutLexicalSetNestedInput
    words?: WordUpdateManyWithoutPronunciationNestedInput
  }

  export type LexicalSetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usages?: LexicalSetUsageUncheckedUpdateManyWithoutLexicalSetNestedInput
    words?: WordUncheckedUpdateManyWithoutPronunciationNestedInput
  }

  export type LexicalSetCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    order?: number | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LexicalSetUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LexicalSetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LexicalSetUsageCreateInput = {
    order?: number | null
    lexicalSet: LexicalSetCreateNestedOneWithoutUsagesInput
    wordUsage: WordUsageCreateNestedOneWithoutLexicalSetsInput
  }

  export type LexicalSetUsageUncheckedCreateInput = {
    id?: number
    lexicalSetId: number
    usageId: number
    order?: number | null
  }

  export type LexicalSetUsageUpdateInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    lexicalSet?: LexicalSetUpdateOneRequiredWithoutUsagesNestedInput
    wordUsage?: WordUsageUpdateOneRequiredWithoutLexicalSetsNestedInput
  }

  export type LexicalSetUsageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    lexicalSetId?: IntFieldUpdateOperationsInput | number
    usageId?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LexicalSetUsageCreateManyInput = {
    id?: number
    lexicalSetId: number
    usageId: number
    order?: number | null
  }

  export type LexicalSetUsageUpdateManyMutationInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LexicalSetUsageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    lexicalSetId?: IntFieldUpdateOperationsInput | number
    usageId?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExampleCreateInput = {
    sentence: string
    context?: string | null
    difficulty?: string | null
    tags?: ExampleCreatetagsInput | string[]
    wordUsage: WordUsageCreateNestedOneWithoutExamplesInput
  }

  export type ExampleUncheckedCreateInput = {
    id?: number
    usageId: number
    sentence: string
    context?: string | null
    difficulty?: string | null
    tags?: ExampleCreatetagsInput | string[]
  }

  export type ExampleUpdateInput = {
    sentence?: StringFieldUpdateOperationsInput | string
    context?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExampleUpdatetagsInput | string[]
    wordUsage?: WordUsageUpdateOneRequiredWithoutExamplesNestedInput
  }

  export type ExampleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usageId?: IntFieldUpdateOperationsInput | number
    sentence?: StringFieldUpdateOperationsInput | string
    context?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExampleUpdatetagsInput | string[]
  }

  export type ExampleCreateManyInput = {
    id?: number
    usageId: number
    sentence: string
    context?: string | null
    difficulty?: string | null
    tags?: ExampleCreatetagsInput | string[]
  }

  export type ExampleUpdateManyMutationInput = {
    sentence?: StringFieldUpdateOperationsInput | string
    context?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExampleUpdatetagsInput | string[]
  }

  export type ExampleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usageId?: IntFieldUpdateOperationsInput | number
    sentence?: StringFieldUpdateOperationsInput | string
    context?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExampleUpdatetagsInput | string[]
  }

  export type ConsonantPhonemeCreateInput = {
    name: string
    description?: string | null
    order?: number | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usages?: ConsonantPhonemeUsageCreateNestedManyWithoutConsonantPhonemeInput
    words?: WordCreateNestedManyWithoutConsonantsInput
  }

  export type ConsonantPhonemeUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    order?: number | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usages?: ConsonantPhonemeUsageUncheckedCreateNestedManyWithoutConsonantPhonemeInput
    words?: WordUncheckedCreateNestedManyWithoutConsonantsInput
  }

  export type ConsonantPhonemeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usages?: ConsonantPhonemeUsageUpdateManyWithoutConsonantPhonemeNestedInput
    words?: WordUpdateManyWithoutConsonantsNestedInput
  }

  export type ConsonantPhonemeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usages?: ConsonantPhonemeUsageUncheckedUpdateManyWithoutConsonantPhonemeNestedInput
    words?: WordUncheckedUpdateManyWithoutConsonantsNestedInput
  }

  export type ConsonantPhonemeCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    order?: number | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsonantPhonemeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsonantPhonemeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsonantPhonemeUsageCreateInput = {
    order?: number | null
    consonantPhoneme: ConsonantPhonemeCreateNestedOneWithoutUsagesInput
    wordUsage: WordUsageCreateNestedOneWithoutConsonantPhonemesInput
  }

  export type ConsonantPhonemeUsageUncheckedCreateInput = {
    id?: number
    consonantPhonemeId: number
    usageId: number
    order?: number | null
  }

  export type ConsonantPhonemeUsageUpdateInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    consonantPhoneme?: ConsonantPhonemeUpdateOneRequiredWithoutUsagesNestedInput
    wordUsage?: WordUsageUpdateOneRequiredWithoutConsonantPhonemesNestedInput
  }

  export type ConsonantPhonemeUsageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    consonantPhonemeId?: IntFieldUpdateOperationsInput | number
    usageId?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ConsonantPhonemeUsageCreateManyInput = {
    id?: number
    consonantPhonemeId: number
    usageId: number
    order?: number | null
  }

  export type ConsonantPhonemeUsageUpdateManyMutationInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ConsonantPhonemeUsageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    consonantPhonemeId?: IntFieldUpdateOperationsInput | number
    usageId?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrthoWordCreateInput = {
    word: string
    freqSubtlexUs?: number | null
    pronsCmuDict?: PronCmuDictCreateNestedManyWithoutOrthoWordInput
  }

  export type OrthoWordUncheckedCreateInput = {
    id?: number
    word: string
    freqSubtlexUs?: number | null
    pronsCmuDict?: PronCmuDictUncheckedCreateNestedManyWithoutOrthoWordInput
  }

  export type OrthoWordUpdateInput = {
    word?: StringFieldUpdateOperationsInput | string
    freqSubtlexUs?: NullableIntFieldUpdateOperationsInput | number | null
    pronsCmuDict?: PronCmuDictUpdateManyWithoutOrthoWordNestedInput
  }

  export type OrthoWordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    word?: StringFieldUpdateOperationsInput | string
    freqSubtlexUs?: NullableIntFieldUpdateOperationsInput | number | null
    pronsCmuDict?: PronCmuDictUncheckedUpdateManyWithoutOrthoWordNestedInput
  }

  export type OrthoWordCreateManyInput = {
    id?: number
    word: string
    freqSubtlexUs?: number | null
  }

  export type OrthoWordUpdateManyMutationInput = {
    word?: StringFieldUpdateOperationsInput | string
    freqSubtlexUs?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrthoWordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    word?: StringFieldUpdateOperationsInput | string
    freqSubtlexUs?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PronCmuDictCreateInput = {
    pronCmuDict: string
    orthoWord: OrthoWordCreateNestedOneWithoutPronsCmuDictInput
  }

  export type PronCmuDictUncheckedCreateInput = {
    id?: number
    orthoWordId: number
    pronCmuDict: string
  }

  export type PronCmuDictUpdateInput = {
    pronCmuDict?: StringFieldUpdateOperationsInput | string
    orthoWord?: OrthoWordUpdateOneRequiredWithoutPronsCmuDictNestedInput
  }

  export type PronCmuDictUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orthoWordId?: IntFieldUpdateOperationsInput | number
    pronCmuDict?: StringFieldUpdateOperationsInput | string
  }

  export type PronCmuDictCreateManyInput = {
    id?: number
    orthoWordId: number
    pronCmuDict: string
  }

  export type PronCmuDictUpdateManyMutationInput = {
    pronCmuDict?: StringFieldUpdateOperationsInput | string
  }

  export type PronCmuDictUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orthoWordId?: IntFieldUpdateOperationsInput | number
    pronCmuDict?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type AudioListRelationFilter = {
    every?: AudioWhereInput
    some?: AudioWhereInput
    none?: AudioWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AudioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    auth0Id?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    auth0Id?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    auth0Id?: SortOrder
    name?: SortOrder
    role?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type WordListRelationFilter = {
    every?: WordWhereInput
    some?: WordWhereInput
    none?: WordWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type WordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AudioCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    duration?: SortOrder
    updatedAt?: SortOrder
    url?: SortOrder
  }

  export type AudioAvgOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
  }

  export type AudioMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    duration?: SortOrder
    updatedAt?: SortOrder
    url?: SortOrder
  }

  export type AudioMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    duration?: SortOrder
    updatedAt?: SortOrder
    url?: SortOrder
  }

  export type AudioSumOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AudioNullableScalarRelationFilter = {
    is?: AudioWhereInput | null
    isNot?: AudioWhereInput | null
  }

  export type IssueListRelationFilter = {
    every?: IssueWhereInput
    some?: IssueWhereInput
    none?: IssueWhereInput
  }

  export type ConsonantPhonemeListRelationFilter = {
    every?: ConsonantPhonemeWhereInput
    some?: ConsonantPhonemeWhereInput
    none?: ConsonantPhonemeWhereInput
  }

  export type LexicalSetListRelationFilter = {
    every?: LexicalSetWhereInput
    some?: LexicalSetWhereInput
    none?: LexicalSetWhereInput
  }

  export type IssueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConsonantPhonemeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LexicalSetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WordCountOrderByAggregateInput = {
    id?: SortOrder
    audioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    word?: SortOrder
  }

  export type WordAvgOrderByAggregateInput = {
    id?: SortOrder
    audioId?: SortOrder
  }

  export type WordMaxOrderByAggregateInput = {
    id?: SortOrder
    audioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    word?: SortOrder
  }

  export type WordMinOrderByAggregateInput = {
    id?: SortOrder
    audioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    word?: SortOrder
  }

  export type WordSumOrderByAggregateInput = {
    id?: SortOrder
    audioId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FeatureScalarRelationFilter = {
    is?: FeatureWhereInput
    isNot?: FeatureWhereInput
  }

  export type IssueCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    featureId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IssueAvgOrderByAggregateInput = {
    id?: SortOrder
    featureId?: SortOrder
  }

  export type IssueMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    featureId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IssueMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    featureId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IssueSumOrderByAggregateInput = {
    id?: SortOrder
    featureId?: SortOrder
  }

  export type FeatureCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    order?: SortOrder
  }

  export type FeatureAvgOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
  }

  export type FeatureMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    order?: SortOrder
  }

  export type FeatureMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    order?: SortOrder
  }

  export type FeatureSumOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
  }

  export type WordUsageListRelationFilter = {
    every?: WordUsageWhereInput
    some?: WordUsageWhereInput
    none?: WordUsageWhereInput
  }

  export type WordVariationListRelationFilter = {
    every?: WordVariationWhereInput
    some?: WordVariationWhereInput
    none?: WordVariationWhereInput
  }

  export type WordUsageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WordVariationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DictionaryEntryCountOrderByAggregateInput = {
    id?: SortOrder
    word?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrder
  }

  export type DictionaryEntryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DictionaryEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    word?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrder
  }

  export type DictionaryEntryMinOrderByAggregateInput = {
    id?: SortOrder
    word?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: SortOrder
  }

  export type DictionaryEntrySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ConsonantPhonemeUsageListRelationFilter = {
    every?: ConsonantPhonemeUsageWhereInput
    some?: ConsonantPhonemeUsageWhereInput
    none?: ConsonantPhonemeUsageWhereInput
  }

  export type ExampleListRelationFilter = {
    every?: ExampleWhereInput
    some?: ExampleWhereInput
    none?: ExampleWhereInput
  }

  export type LexicalSetUsageListRelationFilter = {
    every?: LexicalSetUsageWhereInput
    some?: LexicalSetUsageWhereInput
    none?: LexicalSetUsageWhereInput
  }

  export type PronunciationListRelationFilter = {
    every?: PronunciationWhereInput
    some?: PronunciationWhereInput
    none?: PronunciationWhereInput
  }

  export type SpellingPatternListRelationFilter = {
    every?: SpellingPatternWhereInput
    some?: SpellingPatternWhereInput
    none?: SpellingPatternWhereInput
  }

  export type DictionaryEntryScalarRelationFilter = {
    is?: DictionaryEntryWhereInput
    isNot?: DictionaryEntryWhereInput
  }

  export type ConsonantPhonemeUsageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExampleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LexicalSetUsageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PronunciationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpellingPatternOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WordUsageCountOrderByAggregateInput = {
    id?: SortOrder
    entryId?: SortOrder
    partOfSpeech?: SortOrder
    meaning?: SortOrder
  }

  export type WordUsageAvgOrderByAggregateInput = {
    id?: SortOrder
    entryId?: SortOrder
  }

  export type WordUsageMaxOrderByAggregateInput = {
    id?: SortOrder
    entryId?: SortOrder
    partOfSpeech?: SortOrder
    meaning?: SortOrder
  }

  export type WordUsageMinOrderByAggregateInput = {
    id?: SortOrder
    entryId?: SortOrder
    partOfSpeech?: SortOrder
    meaning?: SortOrder
  }

  export type WordUsageSumOrderByAggregateInput = {
    id?: SortOrder
    entryId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type WordUsageScalarRelationFilter = {
    is?: WordUsageWhereInput
    isNot?: WordUsageWhereInput
  }

  export type PronunciationCountOrderByAggregateInput = {
    id?: SortOrder
    usageId?: SortOrder
    phonemic?: SortOrder
    broadIPA?: SortOrder
    narrowIPA?: SortOrder
    audioUrl?: SortOrder
    speaker?: SortOrder
    dialect?: SortOrder
    isPrimary?: SortOrder
    notes?: SortOrder
    order?: SortOrder
  }

  export type PronunciationAvgOrderByAggregateInput = {
    id?: SortOrder
    usageId?: SortOrder
    order?: SortOrder
  }

  export type PronunciationMaxOrderByAggregateInput = {
    id?: SortOrder
    usageId?: SortOrder
    phonemic?: SortOrder
    broadIPA?: SortOrder
    narrowIPA?: SortOrder
    audioUrl?: SortOrder
    speaker?: SortOrder
    dialect?: SortOrder
    isPrimary?: SortOrder
    notes?: SortOrder
    order?: SortOrder
  }

  export type PronunciationMinOrderByAggregateInput = {
    id?: SortOrder
    usageId?: SortOrder
    phonemic?: SortOrder
    broadIPA?: SortOrder
    narrowIPA?: SortOrder
    audioUrl?: SortOrder
    speaker?: SortOrder
    dialect?: SortOrder
    isPrimary?: SortOrder
    notes?: SortOrder
    order?: SortOrder
  }

  export type PronunciationSumOrderByAggregateInput = {
    id?: SortOrder
    usageId?: SortOrder
    order?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type WordVariationCountOrderByAggregateInput = {
    id?: SortOrder
    entryId?: SortOrder
    form?: SortOrder
    type?: SortOrder
    isRegular?: SortOrder
    notes?: SortOrder
  }

  export type WordVariationAvgOrderByAggregateInput = {
    id?: SortOrder
    entryId?: SortOrder
  }

  export type WordVariationMaxOrderByAggregateInput = {
    id?: SortOrder
    entryId?: SortOrder
    form?: SortOrder
    type?: SortOrder
    isRegular?: SortOrder
    notes?: SortOrder
  }

  export type WordVariationMinOrderByAggregateInput = {
    id?: SortOrder
    entryId?: SortOrder
    form?: SortOrder
    type?: SortOrder
    isRegular?: SortOrder
    notes?: SortOrder
  }

  export type WordVariationSumOrderByAggregateInput = {
    id?: SortOrder
    entryId?: SortOrder
  }

  export type SpellingPatternCountOrderByAggregateInput = {
    id?: SortOrder
    usageId?: SortOrder
    pattern?: SortOrder
    type?: SortOrder
    description?: SortOrder
    order?: SortOrder
  }

  export type SpellingPatternAvgOrderByAggregateInput = {
    id?: SortOrder
    usageId?: SortOrder
    order?: SortOrder
  }

  export type SpellingPatternMaxOrderByAggregateInput = {
    id?: SortOrder
    usageId?: SortOrder
    pattern?: SortOrder
    type?: SortOrder
    description?: SortOrder
    order?: SortOrder
  }

  export type SpellingPatternMinOrderByAggregateInput = {
    id?: SortOrder
    usageId?: SortOrder
    pattern?: SortOrder
    type?: SortOrder
    description?: SortOrder
    order?: SortOrder
  }

  export type SpellingPatternSumOrderByAggregateInput = {
    id?: SortOrder
    usageId?: SortOrder
    order?: SortOrder
  }

  export type LexicalSetCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    order?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LexicalSetAvgOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
  }

  export type LexicalSetMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    order?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LexicalSetMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    order?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LexicalSetSumOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
  }

  export type LexicalSetScalarRelationFilter = {
    is?: LexicalSetWhereInput
    isNot?: LexicalSetWhereInput
  }

  export type LexicalSetUsageLexicalSetIdUsageIdCompoundUniqueInput = {
    lexicalSetId: number
    usageId: number
  }

  export type LexicalSetUsageCountOrderByAggregateInput = {
    id?: SortOrder
    lexicalSetId?: SortOrder
    usageId?: SortOrder
    order?: SortOrder
  }

  export type LexicalSetUsageAvgOrderByAggregateInput = {
    id?: SortOrder
    lexicalSetId?: SortOrder
    usageId?: SortOrder
    order?: SortOrder
  }

  export type LexicalSetUsageMaxOrderByAggregateInput = {
    id?: SortOrder
    lexicalSetId?: SortOrder
    usageId?: SortOrder
    order?: SortOrder
  }

  export type LexicalSetUsageMinOrderByAggregateInput = {
    id?: SortOrder
    lexicalSetId?: SortOrder
    usageId?: SortOrder
    order?: SortOrder
  }

  export type LexicalSetUsageSumOrderByAggregateInput = {
    id?: SortOrder
    lexicalSetId?: SortOrder
    usageId?: SortOrder
    order?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ExampleCountOrderByAggregateInput = {
    id?: SortOrder
    usageId?: SortOrder
    sentence?: SortOrder
    context?: SortOrder
    difficulty?: SortOrder
    tags?: SortOrder
  }

  export type ExampleAvgOrderByAggregateInput = {
    id?: SortOrder
    usageId?: SortOrder
  }

  export type ExampleMaxOrderByAggregateInput = {
    id?: SortOrder
    usageId?: SortOrder
    sentence?: SortOrder
    context?: SortOrder
    difficulty?: SortOrder
  }

  export type ExampleMinOrderByAggregateInput = {
    id?: SortOrder
    usageId?: SortOrder
    sentence?: SortOrder
    context?: SortOrder
    difficulty?: SortOrder
  }

  export type ExampleSumOrderByAggregateInput = {
    id?: SortOrder
    usageId?: SortOrder
  }

  export type ConsonantPhonemeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    order?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsonantPhonemeAvgOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
  }

  export type ConsonantPhonemeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    order?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsonantPhonemeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    order?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsonantPhonemeSumOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
  }

  export type ConsonantPhonemeScalarRelationFilter = {
    is?: ConsonantPhonemeWhereInput
    isNot?: ConsonantPhonemeWhereInput
  }

  export type ConsonantPhonemeUsageConsonantPhonemeIdUsageIdCompoundUniqueInput = {
    consonantPhonemeId: number
    usageId: number
  }

  export type ConsonantPhonemeUsageCountOrderByAggregateInput = {
    id?: SortOrder
    consonantPhonemeId?: SortOrder
    usageId?: SortOrder
    order?: SortOrder
  }

  export type ConsonantPhonemeUsageAvgOrderByAggregateInput = {
    id?: SortOrder
    consonantPhonemeId?: SortOrder
    usageId?: SortOrder
    order?: SortOrder
  }

  export type ConsonantPhonemeUsageMaxOrderByAggregateInput = {
    id?: SortOrder
    consonantPhonemeId?: SortOrder
    usageId?: SortOrder
    order?: SortOrder
  }

  export type ConsonantPhonemeUsageMinOrderByAggregateInput = {
    id?: SortOrder
    consonantPhonemeId?: SortOrder
    usageId?: SortOrder
    order?: SortOrder
  }

  export type ConsonantPhonemeUsageSumOrderByAggregateInput = {
    id?: SortOrder
    consonantPhonemeId?: SortOrder
    usageId?: SortOrder
    order?: SortOrder
  }

  export type PronCmuDictListRelationFilter = {
    every?: PronCmuDictWhereInput
    some?: PronCmuDictWhereInput
    none?: PronCmuDictWhereInput
  }

  export type PronCmuDictOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrthoWordCountOrderByAggregateInput = {
    id?: SortOrder
    word?: SortOrder
    freqSubtlexUs?: SortOrder
  }

  export type OrthoWordAvgOrderByAggregateInput = {
    id?: SortOrder
    freqSubtlexUs?: SortOrder
  }

  export type OrthoWordMaxOrderByAggregateInput = {
    id?: SortOrder
    word?: SortOrder
    freqSubtlexUs?: SortOrder
  }

  export type OrthoWordMinOrderByAggregateInput = {
    id?: SortOrder
    word?: SortOrder
    freqSubtlexUs?: SortOrder
  }

  export type OrthoWordSumOrderByAggregateInput = {
    id?: SortOrder
    freqSubtlexUs?: SortOrder
  }

  export type OrthoWordScalarRelationFilter = {
    is?: OrthoWordWhereInput
    isNot?: OrthoWordWhereInput
  }

  export type PronCmuDictOrthoWordIdPronCmuDictCompoundUniqueInput = {
    orthoWordId: number
    pronCmuDict: string
  }

  export type PronCmuDictCountOrderByAggregateInput = {
    id?: SortOrder
    orthoWordId?: SortOrder
    pronCmuDict?: SortOrder
  }

  export type PronCmuDictAvgOrderByAggregateInput = {
    id?: SortOrder
    orthoWordId?: SortOrder
  }

  export type PronCmuDictMaxOrderByAggregateInput = {
    id?: SortOrder
    orthoWordId?: SortOrder
    pronCmuDict?: SortOrder
  }

  export type PronCmuDictMinOrderByAggregateInput = {
    id?: SortOrder
    orthoWordId?: SortOrder
    pronCmuDict?: SortOrder
  }

  export type PronCmuDictSumOrderByAggregateInput = {
    id?: SortOrder
    orthoWordId?: SortOrder
  }

  export type AudioCreateNestedManyWithoutUsersInput = {
    create?: XOR<AudioCreateWithoutUsersInput, AudioUncheckedCreateWithoutUsersInput> | AudioCreateWithoutUsersInput[] | AudioUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AudioCreateOrConnectWithoutUsersInput | AudioCreateOrConnectWithoutUsersInput[]
    connect?: AudioWhereUniqueInput | AudioWhereUniqueInput[]
  }

  export type AudioUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<AudioCreateWithoutUsersInput, AudioUncheckedCreateWithoutUsersInput> | AudioCreateWithoutUsersInput[] | AudioUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AudioCreateOrConnectWithoutUsersInput | AudioCreateOrConnectWithoutUsersInput[]
    connect?: AudioWhereUniqueInput | AudioWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type AudioUpdateManyWithoutUsersNestedInput = {
    create?: XOR<AudioCreateWithoutUsersInput, AudioUncheckedCreateWithoutUsersInput> | AudioCreateWithoutUsersInput[] | AudioUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AudioCreateOrConnectWithoutUsersInput | AudioCreateOrConnectWithoutUsersInput[]
    upsert?: AudioUpsertWithWhereUniqueWithoutUsersInput | AudioUpsertWithWhereUniqueWithoutUsersInput[]
    set?: AudioWhereUniqueInput | AudioWhereUniqueInput[]
    disconnect?: AudioWhereUniqueInput | AudioWhereUniqueInput[]
    delete?: AudioWhereUniqueInput | AudioWhereUniqueInput[]
    connect?: AudioWhereUniqueInput | AudioWhereUniqueInput[]
    update?: AudioUpdateWithWhereUniqueWithoutUsersInput | AudioUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: AudioUpdateManyWithWhereWithoutUsersInput | AudioUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: AudioScalarWhereInput | AudioScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AudioUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<AudioCreateWithoutUsersInput, AudioUncheckedCreateWithoutUsersInput> | AudioCreateWithoutUsersInput[] | AudioUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AudioCreateOrConnectWithoutUsersInput | AudioCreateOrConnectWithoutUsersInput[]
    upsert?: AudioUpsertWithWhereUniqueWithoutUsersInput | AudioUpsertWithWhereUniqueWithoutUsersInput[]
    set?: AudioWhereUniqueInput | AudioWhereUniqueInput[]
    disconnect?: AudioWhereUniqueInput | AudioWhereUniqueInput[]
    delete?: AudioWhereUniqueInput | AudioWhereUniqueInput[]
    connect?: AudioWhereUniqueInput | AudioWhereUniqueInput[]
    update?: AudioUpdateWithWhereUniqueWithoutUsersInput | AudioUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: AudioUpdateManyWithWhereWithoutUsersInput | AudioUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: AudioScalarWhereInput | AudioScalarWhereInput[]
  }

  export type WordCreateNestedManyWithoutAudioInput = {
    create?: XOR<WordCreateWithoutAudioInput, WordUncheckedCreateWithoutAudioInput> | WordCreateWithoutAudioInput[] | WordUncheckedCreateWithoutAudioInput[]
    connectOrCreate?: WordCreateOrConnectWithoutAudioInput | WordCreateOrConnectWithoutAudioInput[]
    createMany?: WordCreateManyAudioInputEnvelope
    connect?: WordWhereUniqueInput | WordWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutAudiosInput = {
    create?: XOR<UserCreateWithoutAudiosInput, UserUncheckedCreateWithoutAudiosInput> | UserCreateWithoutAudiosInput[] | UserUncheckedCreateWithoutAudiosInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAudiosInput | UserCreateOrConnectWithoutAudiosInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type WordUncheckedCreateNestedManyWithoutAudioInput = {
    create?: XOR<WordCreateWithoutAudioInput, WordUncheckedCreateWithoutAudioInput> | WordCreateWithoutAudioInput[] | WordUncheckedCreateWithoutAudioInput[]
    connectOrCreate?: WordCreateOrConnectWithoutAudioInput | WordCreateOrConnectWithoutAudioInput[]
    createMany?: WordCreateManyAudioInputEnvelope
    connect?: WordWhereUniqueInput | WordWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutAudiosInput = {
    create?: XOR<UserCreateWithoutAudiosInput, UserUncheckedCreateWithoutAudiosInput> | UserCreateWithoutAudiosInput[] | UserUncheckedCreateWithoutAudiosInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAudiosInput | UserCreateOrConnectWithoutAudiosInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WordUpdateManyWithoutAudioNestedInput = {
    create?: XOR<WordCreateWithoutAudioInput, WordUncheckedCreateWithoutAudioInput> | WordCreateWithoutAudioInput[] | WordUncheckedCreateWithoutAudioInput[]
    connectOrCreate?: WordCreateOrConnectWithoutAudioInput | WordCreateOrConnectWithoutAudioInput[]
    upsert?: WordUpsertWithWhereUniqueWithoutAudioInput | WordUpsertWithWhereUniqueWithoutAudioInput[]
    createMany?: WordCreateManyAudioInputEnvelope
    set?: WordWhereUniqueInput | WordWhereUniqueInput[]
    disconnect?: WordWhereUniqueInput | WordWhereUniqueInput[]
    delete?: WordWhereUniqueInput | WordWhereUniqueInput[]
    connect?: WordWhereUniqueInput | WordWhereUniqueInput[]
    update?: WordUpdateWithWhereUniqueWithoutAudioInput | WordUpdateWithWhereUniqueWithoutAudioInput[]
    updateMany?: WordUpdateManyWithWhereWithoutAudioInput | WordUpdateManyWithWhereWithoutAudioInput[]
    deleteMany?: WordScalarWhereInput | WordScalarWhereInput[]
  }

  export type UserUpdateManyWithoutAudiosNestedInput = {
    create?: XOR<UserCreateWithoutAudiosInput, UserUncheckedCreateWithoutAudiosInput> | UserCreateWithoutAudiosInput[] | UserUncheckedCreateWithoutAudiosInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAudiosInput | UserCreateOrConnectWithoutAudiosInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAudiosInput | UserUpsertWithWhereUniqueWithoutAudiosInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAudiosInput | UserUpdateWithWhereUniqueWithoutAudiosInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAudiosInput | UserUpdateManyWithWhereWithoutAudiosInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type WordUncheckedUpdateManyWithoutAudioNestedInput = {
    create?: XOR<WordCreateWithoutAudioInput, WordUncheckedCreateWithoutAudioInput> | WordCreateWithoutAudioInput[] | WordUncheckedCreateWithoutAudioInput[]
    connectOrCreate?: WordCreateOrConnectWithoutAudioInput | WordCreateOrConnectWithoutAudioInput[]
    upsert?: WordUpsertWithWhereUniqueWithoutAudioInput | WordUpsertWithWhereUniqueWithoutAudioInput[]
    createMany?: WordCreateManyAudioInputEnvelope
    set?: WordWhereUniqueInput | WordWhereUniqueInput[]
    disconnect?: WordWhereUniqueInput | WordWhereUniqueInput[]
    delete?: WordWhereUniqueInput | WordWhereUniqueInput[]
    connect?: WordWhereUniqueInput | WordWhereUniqueInput[]
    update?: WordUpdateWithWhereUniqueWithoutAudioInput | WordUpdateWithWhereUniqueWithoutAudioInput[]
    updateMany?: WordUpdateManyWithWhereWithoutAudioInput | WordUpdateManyWithWhereWithoutAudioInput[]
    deleteMany?: WordScalarWhereInput | WordScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutAudiosNestedInput = {
    create?: XOR<UserCreateWithoutAudiosInput, UserUncheckedCreateWithoutAudiosInput> | UserCreateWithoutAudiosInput[] | UserUncheckedCreateWithoutAudiosInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAudiosInput | UserCreateOrConnectWithoutAudiosInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAudiosInput | UserUpsertWithWhereUniqueWithoutAudiosInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAudiosInput | UserUpdateWithWhereUniqueWithoutAudiosInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAudiosInput | UserUpdateManyWithWhereWithoutAudiosInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AudioCreateNestedOneWithoutWordsInput = {
    create?: XOR<AudioCreateWithoutWordsInput, AudioUncheckedCreateWithoutWordsInput>
    connectOrCreate?: AudioCreateOrConnectWithoutWordsInput
    connect?: AudioWhereUniqueInput
  }

  export type IssueCreateNestedManyWithoutWordsInput = {
    create?: XOR<IssueCreateWithoutWordsInput, IssueUncheckedCreateWithoutWordsInput> | IssueCreateWithoutWordsInput[] | IssueUncheckedCreateWithoutWordsInput[]
    connectOrCreate?: IssueCreateOrConnectWithoutWordsInput | IssueCreateOrConnectWithoutWordsInput[]
    connect?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
  }

  export type ConsonantPhonemeCreateNestedManyWithoutWordsInput = {
    create?: XOR<ConsonantPhonemeCreateWithoutWordsInput, ConsonantPhonemeUncheckedCreateWithoutWordsInput> | ConsonantPhonemeCreateWithoutWordsInput[] | ConsonantPhonemeUncheckedCreateWithoutWordsInput[]
    connectOrCreate?: ConsonantPhonemeCreateOrConnectWithoutWordsInput | ConsonantPhonemeCreateOrConnectWithoutWordsInput[]
    connect?: ConsonantPhonemeWhereUniqueInput | ConsonantPhonemeWhereUniqueInput[]
  }

  export type LexicalSetCreateNestedManyWithoutWordsInput = {
    create?: XOR<LexicalSetCreateWithoutWordsInput, LexicalSetUncheckedCreateWithoutWordsInput> | LexicalSetCreateWithoutWordsInput[] | LexicalSetUncheckedCreateWithoutWordsInput[]
    connectOrCreate?: LexicalSetCreateOrConnectWithoutWordsInput | LexicalSetCreateOrConnectWithoutWordsInput[]
    connect?: LexicalSetWhereUniqueInput | LexicalSetWhereUniqueInput[]
  }

  export type IssueUncheckedCreateNestedManyWithoutWordsInput = {
    create?: XOR<IssueCreateWithoutWordsInput, IssueUncheckedCreateWithoutWordsInput> | IssueCreateWithoutWordsInput[] | IssueUncheckedCreateWithoutWordsInput[]
    connectOrCreate?: IssueCreateOrConnectWithoutWordsInput | IssueCreateOrConnectWithoutWordsInput[]
    connect?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
  }

  export type ConsonantPhonemeUncheckedCreateNestedManyWithoutWordsInput = {
    create?: XOR<ConsonantPhonemeCreateWithoutWordsInput, ConsonantPhonemeUncheckedCreateWithoutWordsInput> | ConsonantPhonemeCreateWithoutWordsInput[] | ConsonantPhonemeUncheckedCreateWithoutWordsInput[]
    connectOrCreate?: ConsonantPhonemeCreateOrConnectWithoutWordsInput | ConsonantPhonemeCreateOrConnectWithoutWordsInput[]
    connect?: ConsonantPhonemeWhereUniqueInput | ConsonantPhonemeWhereUniqueInput[]
  }

  export type LexicalSetUncheckedCreateNestedManyWithoutWordsInput = {
    create?: XOR<LexicalSetCreateWithoutWordsInput, LexicalSetUncheckedCreateWithoutWordsInput> | LexicalSetCreateWithoutWordsInput[] | LexicalSetUncheckedCreateWithoutWordsInput[]
    connectOrCreate?: LexicalSetCreateOrConnectWithoutWordsInput | LexicalSetCreateOrConnectWithoutWordsInput[]
    connect?: LexicalSetWhereUniqueInput | LexicalSetWhereUniqueInput[]
  }

  export type AudioUpdateOneWithoutWordsNestedInput = {
    create?: XOR<AudioCreateWithoutWordsInput, AudioUncheckedCreateWithoutWordsInput>
    connectOrCreate?: AudioCreateOrConnectWithoutWordsInput
    upsert?: AudioUpsertWithoutWordsInput
    disconnect?: AudioWhereInput | boolean
    delete?: AudioWhereInput | boolean
    connect?: AudioWhereUniqueInput
    update?: XOR<XOR<AudioUpdateToOneWithWhereWithoutWordsInput, AudioUpdateWithoutWordsInput>, AudioUncheckedUpdateWithoutWordsInput>
  }

  export type IssueUpdateManyWithoutWordsNestedInput = {
    create?: XOR<IssueCreateWithoutWordsInput, IssueUncheckedCreateWithoutWordsInput> | IssueCreateWithoutWordsInput[] | IssueUncheckedCreateWithoutWordsInput[]
    connectOrCreate?: IssueCreateOrConnectWithoutWordsInput | IssueCreateOrConnectWithoutWordsInput[]
    upsert?: IssueUpsertWithWhereUniqueWithoutWordsInput | IssueUpsertWithWhereUniqueWithoutWordsInput[]
    set?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
    disconnect?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
    delete?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
    connect?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
    update?: IssueUpdateWithWhereUniqueWithoutWordsInput | IssueUpdateWithWhereUniqueWithoutWordsInput[]
    updateMany?: IssueUpdateManyWithWhereWithoutWordsInput | IssueUpdateManyWithWhereWithoutWordsInput[]
    deleteMany?: IssueScalarWhereInput | IssueScalarWhereInput[]
  }

  export type ConsonantPhonemeUpdateManyWithoutWordsNestedInput = {
    create?: XOR<ConsonantPhonemeCreateWithoutWordsInput, ConsonantPhonemeUncheckedCreateWithoutWordsInput> | ConsonantPhonemeCreateWithoutWordsInput[] | ConsonantPhonemeUncheckedCreateWithoutWordsInput[]
    connectOrCreate?: ConsonantPhonemeCreateOrConnectWithoutWordsInput | ConsonantPhonemeCreateOrConnectWithoutWordsInput[]
    upsert?: ConsonantPhonemeUpsertWithWhereUniqueWithoutWordsInput | ConsonantPhonemeUpsertWithWhereUniqueWithoutWordsInput[]
    set?: ConsonantPhonemeWhereUniqueInput | ConsonantPhonemeWhereUniqueInput[]
    disconnect?: ConsonantPhonemeWhereUniqueInput | ConsonantPhonemeWhereUniqueInput[]
    delete?: ConsonantPhonemeWhereUniqueInput | ConsonantPhonemeWhereUniqueInput[]
    connect?: ConsonantPhonemeWhereUniqueInput | ConsonantPhonemeWhereUniqueInput[]
    update?: ConsonantPhonemeUpdateWithWhereUniqueWithoutWordsInput | ConsonantPhonemeUpdateWithWhereUniqueWithoutWordsInput[]
    updateMany?: ConsonantPhonemeUpdateManyWithWhereWithoutWordsInput | ConsonantPhonemeUpdateManyWithWhereWithoutWordsInput[]
    deleteMany?: ConsonantPhonemeScalarWhereInput | ConsonantPhonemeScalarWhereInput[]
  }

  export type LexicalSetUpdateManyWithoutWordsNestedInput = {
    create?: XOR<LexicalSetCreateWithoutWordsInput, LexicalSetUncheckedCreateWithoutWordsInput> | LexicalSetCreateWithoutWordsInput[] | LexicalSetUncheckedCreateWithoutWordsInput[]
    connectOrCreate?: LexicalSetCreateOrConnectWithoutWordsInput | LexicalSetCreateOrConnectWithoutWordsInput[]
    upsert?: LexicalSetUpsertWithWhereUniqueWithoutWordsInput | LexicalSetUpsertWithWhereUniqueWithoutWordsInput[]
    set?: LexicalSetWhereUniqueInput | LexicalSetWhereUniqueInput[]
    disconnect?: LexicalSetWhereUniqueInput | LexicalSetWhereUniqueInput[]
    delete?: LexicalSetWhereUniqueInput | LexicalSetWhereUniqueInput[]
    connect?: LexicalSetWhereUniqueInput | LexicalSetWhereUniqueInput[]
    update?: LexicalSetUpdateWithWhereUniqueWithoutWordsInput | LexicalSetUpdateWithWhereUniqueWithoutWordsInput[]
    updateMany?: LexicalSetUpdateManyWithWhereWithoutWordsInput | LexicalSetUpdateManyWithWhereWithoutWordsInput[]
    deleteMany?: LexicalSetScalarWhereInput | LexicalSetScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IssueUncheckedUpdateManyWithoutWordsNestedInput = {
    create?: XOR<IssueCreateWithoutWordsInput, IssueUncheckedCreateWithoutWordsInput> | IssueCreateWithoutWordsInput[] | IssueUncheckedCreateWithoutWordsInput[]
    connectOrCreate?: IssueCreateOrConnectWithoutWordsInput | IssueCreateOrConnectWithoutWordsInput[]
    upsert?: IssueUpsertWithWhereUniqueWithoutWordsInput | IssueUpsertWithWhereUniqueWithoutWordsInput[]
    set?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
    disconnect?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
    delete?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
    connect?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
    update?: IssueUpdateWithWhereUniqueWithoutWordsInput | IssueUpdateWithWhereUniqueWithoutWordsInput[]
    updateMany?: IssueUpdateManyWithWhereWithoutWordsInput | IssueUpdateManyWithWhereWithoutWordsInput[]
    deleteMany?: IssueScalarWhereInput | IssueScalarWhereInput[]
  }

  export type ConsonantPhonemeUncheckedUpdateManyWithoutWordsNestedInput = {
    create?: XOR<ConsonantPhonemeCreateWithoutWordsInput, ConsonantPhonemeUncheckedCreateWithoutWordsInput> | ConsonantPhonemeCreateWithoutWordsInput[] | ConsonantPhonemeUncheckedCreateWithoutWordsInput[]
    connectOrCreate?: ConsonantPhonemeCreateOrConnectWithoutWordsInput | ConsonantPhonemeCreateOrConnectWithoutWordsInput[]
    upsert?: ConsonantPhonemeUpsertWithWhereUniqueWithoutWordsInput | ConsonantPhonemeUpsertWithWhereUniqueWithoutWordsInput[]
    set?: ConsonantPhonemeWhereUniqueInput | ConsonantPhonemeWhereUniqueInput[]
    disconnect?: ConsonantPhonemeWhereUniqueInput | ConsonantPhonemeWhereUniqueInput[]
    delete?: ConsonantPhonemeWhereUniqueInput | ConsonantPhonemeWhereUniqueInput[]
    connect?: ConsonantPhonemeWhereUniqueInput | ConsonantPhonemeWhereUniqueInput[]
    update?: ConsonantPhonemeUpdateWithWhereUniqueWithoutWordsInput | ConsonantPhonemeUpdateWithWhereUniqueWithoutWordsInput[]
    updateMany?: ConsonantPhonemeUpdateManyWithWhereWithoutWordsInput | ConsonantPhonemeUpdateManyWithWhereWithoutWordsInput[]
    deleteMany?: ConsonantPhonemeScalarWhereInput | ConsonantPhonemeScalarWhereInput[]
  }

  export type LexicalSetUncheckedUpdateManyWithoutWordsNestedInput = {
    create?: XOR<LexicalSetCreateWithoutWordsInput, LexicalSetUncheckedCreateWithoutWordsInput> | LexicalSetCreateWithoutWordsInput[] | LexicalSetUncheckedCreateWithoutWordsInput[]
    connectOrCreate?: LexicalSetCreateOrConnectWithoutWordsInput | LexicalSetCreateOrConnectWithoutWordsInput[]
    upsert?: LexicalSetUpsertWithWhereUniqueWithoutWordsInput | LexicalSetUpsertWithWhereUniqueWithoutWordsInput[]
    set?: LexicalSetWhereUniqueInput | LexicalSetWhereUniqueInput[]
    disconnect?: LexicalSetWhereUniqueInput | LexicalSetWhereUniqueInput[]
    delete?: LexicalSetWhereUniqueInput | LexicalSetWhereUniqueInput[]
    connect?: LexicalSetWhereUniqueInput | LexicalSetWhereUniqueInput[]
    update?: LexicalSetUpdateWithWhereUniqueWithoutWordsInput | LexicalSetUpdateWithWhereUniqueWithoutWordsInput[]
    updateMany?: LexicalSetUpdateManyWithWhereWithoutWordsInput | LexicalSetUpdateManyWithWhereWithoutWordsInput[]
    deleteMany?: LexicalSetScalarWhereInput | LexicalSetScalarWhereInput[]
  }

  export type FeatureCreateNestedOneWithoutIssuesInput = {
    create?: XOR<FeatureCreateWithoutIssuesInput, FeatureUncheckedCreateWithoutIssuesInput>
    connectOrCreate?: FeatureCreateOrConnectWithoutIssuesInput
    connect?: FeatureWhereUniqueInput
  }

  export type WordCreateNestedManyWithoutIssuesInput = {
    create?: XOR<WordCreateWithoutIssuesInput, WordUncheckedCreateWithoutIssuesInput> | WordCreateWithoutIssuesInput[] | WordUncheckedCreateWithoutIssuesInput[]
    connectOrCreate?: WordCreateOrConnectWithoutIssuesInput | WordCreateOrConnectWithoutIssuesInput[]
    connect?: WordWhereUniqueInput | WordWhereUniqueInput[]
  }

  export type WordUncheckedCreateNestedManyWithoutIssuesInput = {
    create?: XOR<WordCreateWithoutIssuesInput, WordUncheckedCreateWithoutIssuesInput> | WordCreateWithoutIssuesInput[] | WordUncheckedCreateWithoutIssuesInput[]
    connectOrCreate?: WordCreateOrConnectWithoutIssuesInput | WordCreateOrConnectWithoutIssuesInput[]
    connect?: WordWhereUniqueInput | WordWhereUniqueInput[]
  }

  export type FeatureUpdateOneRequiredWithoutIssuesNestedInput = {
    create?: XOR<FeatureCreateWithoutIssuesInput, FeatureUncheckedCreateWithoutIssuesInput>
    connectOrCreate?: FeatureCreateOrConnectWithoutIssuesInput
    upsert?: FeatureUpsertWithoutIssuesInput
    connect?: FeatureWhereUniqueInput
    update?: XOR<XOR<FeatureUpdateToOneWithWhereWithoutIssuesInput, FeatureUpdateWithoutIssuesInput>, FeatureUncheckedUpdateWithoutIssuesInput>
  }

  export type WordUpdateManyWithoutIssuesNestedInput = {
    create?: XOR<WordCreateWithoutIssuesInput, WordUncheckedCreateWithoutIssuesInput> | WordCreateWithoutIssuesInput[] | WordUncheckedCreateWithoutIssuesInput[]
    connectOrCreate?: WordCreateOrConnectWithoutIssuesInput | WordCreateOrConnectWithoutIssuesInput[]
    upsert?: WordUpsertWithWhereUniqueWithoutIssuesInput | WordUpsertWithWhereUniqueWithoutIssuesInput[]
    set?: WordWhereUniqueInput | WordWhereUniqueInput[]
    disconnect?: WordWhereUniqueInput | WordWhereUniqueInput[]
    delete?: WordWhereUniqueInput | WordWhereUniqueInput[]
    connect?: WordWhereUniqueInput | WordWhereUniqueInput[]
    update?: WordUpdateWithWhereUniqueWithoutIssuesInput | WordUpdateWithWhereUniqueWithoutIssuesInput[]
    updateMany?: WordUpdateManyWithWhereWithoutIssuesInput | WordUpdateManyWithWhereWithoutIssuesInput[]
    deleteMany?: WordScalarWhereInput | WordScalarWhereInput[]
  }

  export type WordUncheckedUpdateManyWithoutIssuesNestedInput = {
    create?: XOR<WordCreateWithoutIssuesInput, WordUncheckedCreateWithoutIssuesInput> | WordCreateWithoutIssuesInput[] | WordUncheckedCreateWithoutIssuesInput[]
    connectOrCreate?: WordCreateOrConnectWithoutIssuesInput | WordCreateOrConnectWithoutIssuesInput[]
    upsert?: WordUpsertWithWhereUniqueWithoutIssuesInput | WordUpsertWithWhereUniqueWithoutIssuesInput[]
    set?: WordWhereUniqueInput | WordWhereUniqueInput[]
    disconnect?: WordWhereUniqueInput | WordWhereUniqueInput[]
    delete?: WordWhereUniqueInput | WordWhereUniqueInput[]
    connect?: WordWhereUniqueInput | WordWhereUniqueInput[]
    update?: WordUpdateWithWhereUniqueWithoutIssuesInput | WordUpdateWithWhereUniqueWithoutIssuesInput[]
    updateMany?: WordUpdateManyWithWhereWithoutIssuesInput | WordUpdateManyWithWhereWithoutIssuesInput[]
    deleteMany?: WordScalarWhereInput | WordScalarWhereInput[]
  }

  export type IssueCreateNestedManyWithoutFeatureInput = {
    create?: XOR<IssueCreateWithoutFeatureInput, IssueUncheckedCreateWithoutFeatureInput> | IssueCreateWithoutFeatureInput[] | IssueUncheckedCreateWithoutFeatureInput[]
    connectOrCreate?: IssueCreateOrConnectWithoutFeatureInput | IssueCreateOrConnectWithoutFeatureInput[]
    createMany?: IssueCreateManyFeatureInputEnvelope
    connect?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
  }

  export type IssueUncheckedCreateNestedManyWithoutFeatureInput = {
    create?: XOR<IssueCreateWithoutFeatureInput, IssueUncheckedCreateWithoutFeatureInput> | IssueCreateWithoutFeatureInput[] | IssueUncheckedCreateWithoutFeatureInput[]
    connectOrCreate?: IssueCreateOrConnectWithoutFeatureInput | IssueCreateOrConnectWithoutFeatureInput[]
    createMany?: IssueCreateManyFeatureInputEnvelope
    connect?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
  }

  export type IssueUpdateManyWithoutFeatureNestedInput = {
    create?: XOR<IssueCreateWithoutFeatureInput, IssueUncheckedCreateWithoutFeatureInput> | IssueCreateWithoutFeatureInput[] | IssueUncheckedCreateWithoutFeatureInput[]
    connectOrCreate?: IssueCreateOrConnectWithoutFeatureInput | IssueCreateOrConnectWithoutFeatureInput[]
    upsert?: IssueUpsertWithWhereUniqueWithoutFeatureInput | IssueUpsertWithWhereUniqueWithoutFeatureInput[]
    createMany?: IssueCreateManyFeatureInputEnvelope
    set?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
    disconnect?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
    delete?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
    connect?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
    update?: IssueUpdateWithWhereUniqueWithoutFeatureInput | IssueUpdateWithWhereUniqueWithoutFeatureInput[]
    updateMany?: IssueUpdateManyWithWhereWithoutFeatureInput | IssueUpdateManyWithWhereWithoutFeatureInput[]
    deleteMany?: IssueScalarWhereInput | IssueScalarWhereInput[]
  }

  export type IssueUncheckedUpdateManyWithoutFeatureNestedInput = {
    create?: XOR<IssueCreateWithoutFeatureInput, IssueUncheckedCreateWithoutFeatureInput> | IssueCreateWithoutFeatureInput[] | IssueUncheckedCreateWithoutFeatureInput[]
    connectOrCreate?: IssueCreateOrConnectWithoutFeatureInput | IssueCreateOrConnectWithoutFeatureInput[]
    upsert?: IssueUpsertWithWhereUniqueWithoutFeatureInput | IssueUpsertWithWhereUniqueWithoutFeatureInput[]
    createMany?: IssueCreateManyFeatureInputEnvelope
    set?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
    disconnect?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
    delete?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
    connect?: IssueWhereUniqueInput | IssueWhereUniqueInput[]
    update?: IssueUpdateWithWhereUniqueWithoutFeatureInput | IssueUpdateWithWhereUniqueWithoutFeatureInput[]
    updateMany?: IssueUpdateManyWithWhereWithoutFeatureInput | IssueUpdateManyWithWhereWithoutFeatureInput[]
    deleteMany?: IssueScalarWhereInput | IssueScalarWhereInput[]
  }

  export type WordUsageCreateNestedManyWithoutEntryInput = {
    create?: XOR<WordUsageCreateWithoutEntryInput, WordUsageUncheckedCreateWithoutEntryInput> | WordUsageCreateWithoutEntryInput[] | WordUsageUncheckedCreateWithoutEntryInput[]
    connectOrCreate?: WordUsageCreateOrConnectWithoutEntryInput | WordUsageCreateOrConnectWithoutEntryInput[]
    createMany?: WordUsageCreateManyEntryInputEnvelope
    connect?: WordUsageWhereUniqueInput | WordUsageWhereUniqueInput[]
  }

  export type WordVariationCreateNestedManyWithoutEntryInput = {
    create?: XOR<WordVariationCreateWithoutEntryInput, WordVariationUncheckedCreateWithoutEntryInput> | WordVariationCreateWithoutEntryInput[] | WordVariationUncheckedCreateWithoutEntryInput[]
    connectOrCreate?: WordVariationCreateOrConnectWithoutEntryInput | WordVariationCreateOrConnectWithoutEntryInput[]
    createMany?: WordVariationCreateManyEntryInputEnvelope
    connect?: WordVariationWhereUniqueInput | WordVariationWhereUniqueInput[]
  }

  export type WordUsageUncheckedCreateNestedManyWithoutEntryInput = {
    create?: XOR<WordUsageCreateWithoutEntryInput, WordUsageUncheckedCreateWithoutEntryInput> | WordUsageCreateWithoutEntryInput[] | WordUsageUncheckedCreateWithoutEntryInput[]
    connectOrCreate?: WordUsageCreateOrConnectWithoutEntryInput | WordUsageCreateOrConnectWithoutEntryInput[]
    createMany?: WordUsageCreateManyEntryInputEnvelope
    connect?: WordUsageWhereUniqueInput | WordUsageWhereUniqueInput[]
  }

  export type WordVariationUncheckedCreateNestedManyWithoutEntryInput = {
    create?: XOR<WordVariationCreateWithoutEntryInput, WordVariationUncheckedCreateWithoutEntryInput> | WordVariationCreateWithoutEntryInput[] | WordVariationUncheckedCreateWithoutEntryInput[]
    connectOrCreate?: WordVariationCreateOrConnectWithoutEntryInput | WordVariationCreateOrConnectWithoutEntryInput[]
    createMany?: WordVariationCreateManyEntryInputEnvelope
    connect?: WordVariationWhereUniqueInput | WordVariationWhereUniqueInput[]
  }

  export type WordUsageUpdateManyWithoutEntryNestedInput = {
    create?: XOR<WordUsageCreateWithoutEntryInput, WordUsageUncheckedCreateWithoutEntryInput> | WordUsageCreateWithoutEntryInput[] | WordUsageUncheckedCreateWithoutEntryInput[]
    connectOrCreate?: WordUsageCreateOrConnectWithoutEntryInput | WordUsageCreateOrConnectWithoutEntryInput[]
    upsert?: WordUsageUpsertWithWhereUniqueWithoutEntryInput | WordUsageUpsertWithWhereUniqueWithoutEntryInput[]
    createMany?: WordUsageCreateManyEntryInputEnvelope
    set?: WordUsageWhereUniqueInput | WordUsageWhereUniqueInput[]
    disconnect?: WordUsageWhereUniqueInput | WordUsageWhereUniqueInput[]
    delete?: WordUsageWhereUniqueInput | WordUsageWhereUniqueInput[]
    connect?: WordUsageWhereUniqueInput | WordUsageWhereUniqueInput[]
    update?: WordUsageUpdateWithWhereUniqueWithoutEntryInput | WordUsageUpdateWithWhereUniqueWithoutEntryInput[]
    updateMany?: WordUsageUpdateManyWithWhereWithoutEntryInput | WordUsageUpdateManyWithWhereWithoutEntryInput[]
    deleteMany?: WordUsageScalarWhereInput | WordUsageScalarWhereInput[]
  }

  export type WordVariationUpdateManyWithoutEntryNestedInput = {
    create?: XOR<WordVariationCreateWithoutEntryInput, WordVariationUncheckedCreateWithoutEntryInput> | WordVariationCreateWithoutEntryInput[] | WordVariationUncheckedCreateWithoutEntryInput[]
    connectOrCreate?: WordVariationCreateOrConnectWithoutEntryInput | WordVariationCreateOrConnectWithoutEntryInput[]
    upsert?: WordVariationUpsertWithWhereUniqueWithoutEntryInput | WordVariationUpsertWithWhereUniqueWithoutEntryInput[]
    createMany?: WordVariationCreateManyEntryInputEnvelope
    set?: WordVariationWhereUniqueInput | WordVariationWhereUniqueInput[]
    disconnect?: WordVariationWhereUniqueInput | WordVariationWhereUniqueInput[]
    delete?: WordVariationWhereUniqueInput | WordVariationWhereUniqueInput[]
    connect?: WordVariationWhereUniqueInput | WordVariationWhereUniqueInput[]
    update?: WordVariationUpdateWithWhereUniqueWithoutEntryInput | WordVariationUpdateWithWhereUniqueWithoutEntryInput[]
    updateMany?: WordVariationUpdateManyWithWhereWithoutEntryInput | WordVariationUpdateManyWithWhereWithoutEntryInput[]
    deleteMany?: WordVariationScalarWhereInput | WordVariationScalarWhereInput[]
  }

  export type WordUsageUncheckedUpdateManyWithoutEntryNestedInput = {
    create?: XOR<WordUsageCreateWithoutEntryInput, WordUsageUncheckedCreateWithoutEntryInput> | WordUsageCreateWithoutEntryInput[] | WordUsageUncheckedCreateWithoutEntryInput[]
    connectOrCreate?: WordUsageCreateOrConnectWithoutEntryInput | WordUsageCreateOrConnectWithoutEntryInput[]
    upsert?: WordUsageUpsertWithWhereUniqueWithoutEntryInput | WordUsageUpsertWithWhereUniqueWithoutEntryInput[]
    createMany?: WordUsageCreateManyEntryInputEnvelope
    set?: WordUsageWhereUniqueInput | WordUsageWhereUniqueInput[]
    disconnect?: WordUsageWhereUniqueInput | WordUsageWhereUniqueInput[]
    delete?: WordUsageWhereUniqueInput | WordUsageWhereUniqueInput[]
    connect?: WordUsageWhereUniqueInput | WordUsageWhereUniqueInput[]
    update?: WordUsageUpdateWithWhereUniqueWithoutEntryInput | WordUsageUpdateWithWhereUniqueWithoutEntryInput[]
    updateMany?: WordUsageUpdateManyWithWhereWithoutEntryInput | WordUsageUpdateManyWithWhereWithoutEntryInput[]
    deleteMany?: WordUsageScalarWhereInput | WordUsageScalarWhereInput[]
  }

  export type WordVariationUncheckedUpdateManyWithoutEntryNestedInput = {
    create?: XOR<WordVariationCreateWithoutEntryInput, WordVariationUncheckedCreateWithoutEntryInput> | WordVariationCreateWithoutEntryInput[] | WordVariationUncheckedCreateWithoutEntryInput[]
    connectOrCreate?: WordVariationCreateOrConnectWithoutEntryInput | WordVariationCreateOrConnectWithoutEntryInput[]
    upsert?: WordVariationUpsertWithWhereUniqueWithoutEntryInput | WordVariationUpsertWithWhereUniqueWithoutEntryInput[]
    createMany?: WordVariationCreateManyEntryInputEnvelope
    set?: WordVariationWhereUniqueInput | WordVariationWhereUniqueInput[]
    disconnect?: WordVariationWhereUniqueInput | WordVariationWhereUniqueInput[]
    delete?: WordVariationWhereUniqueInput | WordVariationWhereUniqueInput[]
    connect?: WordVariationWhereUniqueInput | WordVariationWhereUniqueInput[]
    update?: WordVariationUpdateWithWhereUniqueWithoutEntryInput | WordVariationUpdateWithWhereUniqueWithoutEntryInput[]
    updateMany?: WordVariationUpdateManyWithWhereWithoutEntryInput | WordVariationUpdateManyWithWhereWithoutEntryInput[]
    deleteMany?: WordVariationScalarWhereInput | WordVariationScalarWhereInput[]
  }

  export type ConsonantPhonemeUsageCreateNestedManyWithoutWordUsageInput = {
    create?: XOR<ConsonantPhonemeUsageCreateWithoutWordUsageInput, ConsonantPhonemeUsageUncheckedCreateWithoutWordUsageInput> | ConsonantPhonemeUsageCreateWithoutWordUsageInput[] | ConsonantPhonemeUsageUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: ConsonantPhonemeUsageCreateOrConnectWithoutWordUsageInput | ConsonantPhonemeUsageCreateOrConnectWithoutWordUsageInput[]
    createMany?: ConsonantPhonemeUsageCreateManyWordUsageInputEnvelope
    connect?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
  }

  export type ExampleCreateNestedManyWithoutWordUsageInput = {
    create?: XOR<ExampleCreateWithoutWordUsageInput, ExampleUncheckedCreateWithoutWordUsageInput> | ExampleCreateWithoutWordUsageInput[] | ExampleUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: ExampleCreateOrConnectWithoutWordUsageInput | ExampleCreateOrConnectWithoutWordUsageInput[]
    createMany?: ExampleCreateManyWordUsageInputEnvelope
    connect?: ExampleWhereUniqueInput | ExampleWhereUniqueInput[]
  }

  export type LexicalSetUsageCreateNestedManyWithoutWordUsageInput = {
    create?: XOR<LexicalSetUsageCreateWithoutWordUsageInput, LexicalSetUsageUncheckedCreateWithoutWordUsageInput> | LexicalSetUsageCreateWithoutWordUsageInput[] | LexicalSetUsageUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: LexicalSetUsageCreateOrConnectWithoutWordUsageInput | LexicalSetUsageCreateOrConnectWithoutWordUsageInput[]
    createMany?: LexicalSetUsageCreateManyWordUsageInputEnvelope
    connect?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
  }

  export type PronunciationCreateNestedManyWithoutWordUsageInput = {
    create?: XOR<PronunciationCreateWithoutWordUsageInput, PronunciationUncheckedCreateWithoutWordUsageInput> | PronunciationCreateWithoutWordUsageInput[] | PronunciationUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: PronunciationCreateOrConnectWithoutWordUsageInput | PronunciationCreateOrConnectWithoutWordUsageInput[]
    createMany?: PronunciationCreateManyWordUsageInputEnvelope
    connect?: PronunciationWhereUniqueInput | PronunciationWhereUniqueInput[]
  }

  export type SpellingPatternCreateNestedManyWithoutWordUsageInput = {
    create?: XOR<SpellingPatternCreateWithoutWordUsageInput, SpellingPatternUncheckedCreateWithoutWordUsageInput> | SpellingPatternCreateWithoutWordUsageInput[] | SpellingPatternUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: SpellingPatternCreateOrConnectWithoutWordUsageInput | SpellingPatternCreateOrConnectWithoutWordUsageInput[]
    createMany?: SpellingPatternCreateManyWordUsageInputEnvelope
    connect?: SpellingPatternWhereUniqueInput | SpellingPatternWhereUniqueInput[]
  }

  export type DictionaryEntryCreateNestedOneWithoutUsagesInput = {
    create?: XOR<DictionaryEntryCreateWithoutUsagesInput, DictionaryEntryUncheckedCreateWithoutUsagesInput>
    connectOrCreate?: DictionaryEntryCreateOrConnectWithoutUsagesInput
    connect?: DictionaryEntryWhereUniqueInput
  }

  export type ConsonantPhonemeUsageUncheckedCreateNestedManyWithoutWordUsageInput = {
    create?: XOR<ConsonantPhonemeUsageCreateWithoutWordUsageInput, ConsonantPhonemeUsageUncheckedCreateWithoutWordUsageInput> | ConsonantPhonemeUsageCreateWithoutWordUsageInput[] | ConsonantPhonemeUsageUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: ConsonantPhonemeUsageCreateOrConnectWithoutWordUsageInput | ConsonantPhonemeUsageCreateOrConnectWithoutWordUsageInput[]
    createMany?: ConsonantPhonemeUsageCreateManyWordUsageInputEnvelope
    connect?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
  }

  export type ExampleUncheckedCreateNestedManyWithoutWordUsageInput = {
    create?: XOR<ExampleCreateWithoutWordUsageInput, ExampleUncheckedCreateWithoutWordUsageInput> | ExampleCreateWithoutWordUsageInput[] | ExampleUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: ExampleCreateOrConnectWithoutWordUsageInput | ExampleCreateOrConnectWithoutWordUsageInput[]
    createMany?: ExampleCreateManyWordUsageInputEnvelope
    connect?: ExampleWhereUniqueInput | ExampleWhereUniqueInput[]
  }

  export type LexicalSetUsageUncheckedCreateNestedManyWithoutWordUsageInput = {
    create?: XOR<LexicalSetUsageCreateWithoutWordUsageInput, LexicalSetUsageUncheckedCreateWithoutWordUsageInput> | LexicalSetUsageCreateWithoutWordUsageInput[] | LexicalSetUsageUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: LexicalSetUsageCreateOrConnectWithoutWordUsageInput | LexicalSetUsageCreateOrConnectWithoutWordUsageInput[]
    createMany?: LexicalSetUsageCreateManyWordUsageInputEnvelope
    connect?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
  }

  export type PronunciationUncheckedCreateNestedManyWithoutWordUsageInput = {
    create?: XOR<PronunciationCreateWithoutWordUsageInput, PronunciationUncheckedCreateWithoutWordUsageInput> | PronunciationCreateWithoutWordUsageInput[] | PronunciationUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: PronunciationCreateOrConnectWithoutWordUsageInput | PronunciationCreateOrConnectWithoutWordUsageInput[]
    createMany?: PronunciationCreateManyWordUsageInputEnvelope
    connect?: PronunciationWhereUniqueInput | PronunciationWhereUniqueInput[]
  }

  export type SpellingPatternUncheckedCreateNestedManyWithoutWordUsageInput = {
    create?: XOR<SpellingPatternCreateWithoutWordUsageInput, SpellingPatternUncheckedCreateWithoutWordUsageInput> | SpellingPatternCreateWithoutWordUsageInput[] | SpellingPatternUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: SpellingPatternCreateOrConnectWithoutWordUsageInput | SpellingPatternCreateOrConnectWithoutWordUsageInput[]
    createMany?: SpellingPatternCreateManyWordUsageInputEnvelope
    connect?: SpellingPatternWhereUniqueInput | SpellingPatternWhereUniqueInput[]
  }

  export type ConsonantPhonemeUsageUpdateManyWithoutWordUsageNestedInput = {
    create?: XOR<ConsonantPhonemeUsageCreateWithoutWordUsageInput, ConsonantPhonemeUsageUncheckedCreateWithoutWordUsageInput> | ConsonantPhonemeUsageCreateWithoutWordUsageInput[] | ConsonantPhonemeUsageUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: ConsonantPhonemeUsageCreateOrConnectWithoutWordUsageInput | ConsonantPhonemeUsageCreateOrConnectWithoutWordUsageInput[]
    upsert?: ConsonantPhonemeUsageUpsertWithWhereUniqueWithoutWordUsageInput | ConsonantPhonemeUsageUpsertWithWhereUniqueWithoutWordUsageInput[]
    createMany?: ConsonantPhonemeUsageCreateManyWordUsageInputEnvelope
    set?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
    disconnect?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
    delete?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
    connect?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
    update?: ConsonantPhonemeUsageUpdateWithWhereUniqueWithoutWordUsageInput | ConsonantPhonemeUsageUpdateWithWhereUniqueWithoutWordUsageInput[]
    updateMany?: ConsonantPhonemeUsageUpdateManyWithWhereWithoutWordUsageInput | ConsonantPhonemeUsageUpdateManyWithWhereWithoutWordUsageInput[]
    deleteMany?: ConsonantPhonemeUsageScalarWhereInput | ConsonantPhonemeUsageScalarWhereInput[]
  }

  export type ExampleUpdateManyWithoutWordUsageNestedInput = {
    create?: XOR<ExampleCreateWithoutWordUsageInput, ExampleUncheckedCreateWithoutWordUsageInput> | ExampleCreateWithoutWordUsageInput[] | ExampleUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: ExampleCreateOrConnectWithoutWordUsageInput | ExampleCreateOrConnectWithoutWordUsageInput[]
    upsert?: ExampleUpsertWithWhereUniqueWithoutWordUsageInput | ExampleUpsertWithWhereUniqueWithoutWordUsageInput[]
    createMany?: ExampleCreateManyWordUsageInputEnvelope
    set?: ExampleWhereUniqueInput | ExampleWhereUniqueInput[]
    disconnect?: ExampleWhereUniqueInput | ExampleWhereUniqueInput[]
    delete?: ExampleWhereUniqueInput | ExampleWhereUniqueInput[]
    connect?: ExampleWhereUniqueInput | ExampleWhereUniqueInput[]
    update?: ExampleUpdateWithWhereUniqueWithoutWordUsageInput | ExampleUpdateWithWhereUniqueWithoutWordUsageInput[]
    updateMany?: ExampleUpdateManyWithWhereWithoutWordUsageInput | ExampleUpdateManyWithWhereWithoutWordUsageInput[]
    deleteMany?: ExampleScalarWhereInput | ExampleScalarWhereInput[]
  }

  export type LexicalSetUsageUpdateManyWithoutWordUsageNestedInput = {
    create?: XOR<LexicalSetUsageCreateWithoutWordUsageInput, LexicalSetUsageUncheckedCreateWithoutWordUsageInput> | LexicalSetUsageCreateWithoutWordUsageInput[] | LexicalSetUsageUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: LexicalSetUsageCreateOrConnectWithoutWordUsageInput | LexicalSetUsageCreateOrConnectWithoutWordUsageInput[]
    upsert?: LexicalSetUsageUpsertWithWhereUniqueWithoutWordUsageInput | LexicalSetUsageUpsertWithWhereUniqueWithoutWordUsageInput[]
    createMany?: LexicalSetUsageCreateManyWordUsageInputEnvelope
    set?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
    disconnect?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
    delete?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
    connect?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
    update?: LexicalSetUsageUpdateWithWhereUniqueWithoutWordUsageInput | LexicalSetUsageUpdateWithWhereUniqueWithoutWordUsageInput[]
    updateMany?: LexicalSetUsageUpdateManyWithWhereWithoutWordUsageInput | LexicalSetUsageUpdateManyWithWhereWithoutWordUsageInput[]
    deleteMany?: LexicalSetUsageScalarWhereInput | LexicalSetUsageScalarWhereInput[]
  }

  export type PronunciationUpdateManyWithoutWordUsageNestedInput = {
    create?: XOR<PronunciationCreateWithoutWordUsageInput, PronunciationUncheckedCreateWithoutWordUsageInput> | PronunciationCreateWithoutWordUsageInput[] | PronunciationUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: PronunciationCreateOrConnectWithoutWordUsageInput | PronunciationCreateOrConnectWithoutWordUsageInput[]
    upsert?: PronunciationUpsertWithWhereUniqueWithoutWordUsageInput | PronunciationUpsertWithWhereUniqueWithoutWordUsageInput[]
    createMany?: PronunciationCreateManyWordUsageInputEnvelope
    set?: PronunciationWhereUniqueInput | PronunciationWhereUniqueInput[]
    disconnect?: PronunciationWhereUniqueInput | PronunciationWhereUniqueInput[]
    delete?: PronunciationWhereUniqueInput | PronunciationWhereUniqueInput[]
    connect?: PronunciationWhereUniqueInput | PronunciationWhereUniqueInput[]
    update?: PronunciationUpdateWithWhereUniqueWithoutWordUsageInput | PronunciationUpdateWithWhereUniqueWithoutWordUsageInput[]
    updateMany?: PronunciationUpdateManyWithWhereWithoutWordUsageInput | PronunciationUpdateManyWithWhereWithoutWordUsageInput[]
    deleteMany?: PronunciationScalarWhereInput | PronunciationScalarWhereInput[]
  }

  export type SpellingPatternUpdateManyWithoutWordUsageNestedInput = {
    create?: XOR<SpellingPatternCreateWithoutWordUsageInput, SpellingPatternUncheckedCreateWithoutWordUsageInput> | SpellingPatternCreateWithoutWordUsageInput[] | SpellingPatternUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: SpellingPatternCreateOrConnectWithoutWordUsageInput | SpellingPatternCreateOrConnectWithoutWordUsageInput[]
    upsert?: SpellingPatternUpsertWithWhereUniqueWithoutWordUsageInput | SpellingPatternUpsertWithWhereUniqueWithoutWordUsageInput[]
    createMany?: SpellingPatternCreateManyWordUsageInputEnvelope
    set?: SpellingPatternWhereUniqueInput | SpellingPatternWhereUniqueInput[]
    disconnect?: SpellingPatternWhereUniqueInput | SpellingPatternWhereUniqueInput[]
    delete?: SpellingPatternWhereUniqueInput | SpellingPatternWhereUniqueInput[]
    connect?: SpellingPatternWhereUniqueInput | SpellingPatternWhereUniqueInput[]
    update?: SpellingPatternUpdateWithWhereUniqueWithoutWordUsageInput | SpellingPatternUpdateWithWhereUniqueWithoutWordUsageInput[]
    updateMany?: SpellingPatternUpdateManyWithWhereWithoutWordUsageInput | SpellingPatternUpdateManyWithWhereWithoutWordUsageInput[]
    deleteMany?: SpellingPatternScalarWhereInput | SpellingPatternScalarWhereInput[]
  }

  export type DictionaryEntryUpdateOneRequiredWithoutUsagesNestedInput = {
    create?: XOR<DictionaryEntryCreateWithoutUsagesInput, DictionaryEntryUncheckedCreateWithoutUsagesInput>
    connectOrCreate?: DictionaryEntryCreateOrConnectWithoutUsagesInput
    upsert?: DictionaryEntryUpsertWithoutUsagesInput
    connect?: DictionaryEntryWhereUniqueInput
    update?: XOR<XOR<DictionaryEntryUpdateToOneWithWhereWithoutUsagesInput, DictionaryEntryUpdateWithoutUsagesInput>, DictionaryEntryUncheckedUpdateWithoutUsagesInput>
  }

  export type ConsonantPhonemeUsageUncheckedUpdateManyWithoutWordUsageNestedInput = {
    create?: XOR<ConsonantPhonemeUsageCreateWithoutWordUsageInput, ConsonantPhonemeUsageUncheckedCreateWithoutWordUsageInput> | ConsonantPhonemeUsageCreateWithoutWordUsageInput[] | ConsonantPhonemeUsageUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: ConsonantPhonemeUsageCreateOrConnectWithoutWordUsageInput | ConsonantPhonemeUsageCreateOrConnectWithoutWordUsageInput[]
    upsert?: ConsonantPhonemeUsageUpsertWithWhereUniqueWithoutWordUsageInput | ConsonantPhonemeUsageUpsertWithWhereUniqueWithoutWordUsageInput[]
    createMany?: ConsonantPhonemeUsageCreateManyWordUsageInputEnvelope
    set?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
    disconnect?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
    delete?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
    connect?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
    update?: ConsonantPhonemeUsageUpdateWithWhereUniqueWithoutWordUsageInput | ConsonantPhonemeUsageUpdateWithWhereUniqueWithoutWordUsageInput[]
    updateMany?: ConsonantPhonemeUsageUpdateManyWithWhereWithoutWordUsageInput | ConsonantPhonemeUsageUpdateManyWithWhereWithoutWordUsageInput[]
    deleteMany?: ConsonantPhonemeUsageScalarWhereInput | ConsonantPhonemeUsageScalarWhereInput[]
  }

  export type ExampleUncheckedUpdateManyWithoutWordUsageNestedInput = {
    create?: XOR<ExampleCreateWithoutWordUsageInput, ExampleUncheckedCreateWithoutWordUsageInput> | ExampleCreateWithoutWordUsageInput[] | ExampleUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: ExampleCreateOrConnectWithoutWordUsageInput | ExampleCreateOrConnectWithoutWordUsageInput[]
    upsert?: ExampleUpsertWithWhereUniqueWithoutWordUsageInput | ExampleUpsertWithWhereUniqueWithoutWordUsageInput[]
    createMany?: ExampleCreateManyWordUsageInputEnvelope
    set?: ExampleWhereUniqueInput | ExampleWhereUniqueInput[]
    disconnect?: ExampleWhereUniqueInput | ExampleWhereUniqueInput[]
    delete?: ExampleWhereUniqueInput | ExampleWhereUniqueInput[]
    connect?: ExampleWhereUniqueInput | ExampleWhereUniqueInput[]
    update?: ExampleUpdateWithWhereUniqueWithoutWordUsageInput | ExampleUpdateWithWhereUniqueWithoutWordUsageInput[]
    updateMany?: ExampleUpdateManyWithWhereWithoutWordUsageInput | ExampleUpdateManyWithWhereWithoutWordUsageInput[]
    deleteMany?: ExampleScalarWhereInput | ExampleScalarWhereInput[]
  }

  export type LexicalSetUsageUncheckedUpdateManyWithoutWordUsageNestedInput = {
    create?: XOR<LexicalSetUsageCreateWithoutWordUsageInput, LexicalSetUsageUncheckedCreateWithoutWordUsageInput> | LexicalSetUsageCreateWithoutWordUsageInput[] | LexicalSetUsageUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: LexicalSetUsageCreateOrConnectWithoutWordUsageInput | LexicalSetUsageCreateOrConnectWithoutWordUsageInput[]
    upsert?: LexicalSetUsageUpsertWithWhereUniqueWithoutWordUsageInput | LexicalSetUsageUpsertWithWhereUniqueWithoutWordUsageInput[]
    createMany?: LexicalSetUsageCreateManyWordUsageInputEnvelope
    set?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
    disconnect?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
    delete?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
    connect?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
    update?: LexicalSetUsageUpdateWithWhereUniqueWithoutWordUsageInput | LexicalSetUsageUpdateWithWhereUniqueWithoutWordUsageInput[]
    updateMany?: LexicalSetUsageUpdateManyWithWhereWithoutWordUsageInput | LexicalSetUsageUpdateManyWithWhereWithoutWordUsageInput[]
    deleteMany?: LexicalSetUsageScalarWhereInput | LexicalSetUsageScalarWhereInput[]
  }

  export type PronunciationUncheckedUpdateManyWithoutWordUsageNestedInput = {
    create?: XOR<PronunciationCreateWithoutWordUsageInput, PronunciationUncheckedCreateWithoutWordUsageInput> | PronunciationCreateWithoutWordUsageInput[] | PronunciationUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: PronunciationCreateOrConnectWithoutWordUsageInput | PronunciationCreateOrConnectWithoutWordUsageInput[]
    upsert?: PronunciationUpsertWithWhereUniqueWithoutWordUsageInput | PronunciationUpsertWithWhereUniqueWithoutWordUsageInput[]
    createMany?: PronunciationCreateManyWordUsageInputEnvelope
    set?: PronunciationWhereUniqueInput | PronunciationWhereUniqueInput[]
    disconnect?: PronunciationWhereUniqueInput | PronunciationWhereUniqueInput[]
    delete?: PronunciationWhereUniqueInput | PronunciationWhereUniqueInput[]
    connect?: PronunciationWhereUniqueInput | PronunciationWhereUniqueInput[]
    update?: PronunciationUpdateWithWhereUniqueWithoutWordUsageInput | PronunciationUpdateWithWhereUniqueWithoutWordUsageInput[]
    updateMany?: PronunciationUpdateManyWithWhereWithoutWordUsageInput | PronunciationUpdateManyWithWhereWithoutWordUsageInput[]
    deleteMany?: PronunciationScalarWhereInput | PronunciationScalarWhereInput[]
  }

  export type SpellingPatternUncheckedUpdateManyWithoutWordUsageNestedInput = {
    create?: XOR<SpellingPatternCreateWithoutWordUsageInput, SpellingPatternUncheckedCreateWithoutWordUsageInput> | SpellingPatternCreateWithoutWordUsageInput[] | SpellingPatternUncheckedCreateWithoutWordUsageInput[]
    connectOrCreate?: SpellingPatternCreateOrConnectWithoutWordUsageInput | SpellingPatternCreateOrConnectWithoutWordUsageInput[]
    upsert?: SpellingPatternUpsertWithWhereUniqueWithoutWordUsageInput | SpellingPatternUpsertWithWhereUniqueWithoutWordUsageInput[]
    createMany?: SpellingPatternCreateManyWordUsageInputEnvelope
    set?: SpellingPatternWhereUniqueInput | SpellingPatternWhereUniqueInput[]
    disconnect?: SpellingPatternWhereUniqueInput | SpellingPatternWhereUniqueInput[]
    delete?: SpellingPatternWhereUniqueInput | SpellingPatternWhereUniqueInput[]
    connect?: SpellingPatternWhereUniqueInput | SpellingPatternWhereUniqueInput[]
    update?: SpellingPatternUpdateWithWhereUniqueWithoutWordUsageInput | SpellingPatternUpdateWithWhereUniqueWithoutWordUsageInput[]
    updateMany?: SpellingPatternUpdateManyWithWhereWithoutWordUsageInput | SpellingPatternUpdateManyWithWhereWithoutWordUsageInput[]
    deleteMany?: SpellingPatternScalarWhereInput | SpellingPatternScalarWhereInput[]
  }

  export type WordUsageCreateNestedOneWithoutPronunciationsInput = {
    create?: XOR<WordUsageCreateWithoutPronunciationsInput, WordUsageUncheckedCreateWithoutPronunciationsInput>
    connectOrCreate?: WordUsageCreateOrConnectWithoutPronunciationsInput
    connect?: WordUsageWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type WordUsageUpdateOneRequiredWithoutPronunciationsNestedInput = {
    create?: XOR<WordUsageCreateWithoutPronunciationsInput, WordUsageUncheckedCreateWithoutPronunciationsInput>
    connectOrCreate?: WordUsageCreateOrConnectWithoutPronunciationsInput
    upsert?: WordUsageUpsertWithoutPronunciationsInput
    connect?: WordUsageWhereUniqueInput
    update?: XOR<XOR<WordUsageUpdateToOneWithWhereWithoutPronunciationsInput, WordUsageUpdateWithoutPronunciationsInput>, WordUsageUncheckedUpdateWithoutPronunciationsInput>
  }

  export type DictionaryEntryCreateNestedOneWithoutVariationsInput = {
    create?: XOR<DictionaryEntryCreateWithoutVariationsInput, DictionaryEntryUncheckedCreateWithoutVariationsInput>
    connectOrCreate?: DictionaryEntryCreateOrConnectWithoutVariationsInput
    connect?: DictionaryEntryWhereUniqueInput
  }

  export type DictionaryEntryUpdateOneRequiredWithoutVariationsNestedInput = {
    create?: XOR<DictionaryEntryCreateWithoutVariationsInput, DictionaryEntryUncheckedCreateWithoutVariationsInput>
    connectOrCreate?: DictionaryEntryCreateOrConnectWithoutVariationsInput
    upsert?: DictionaryEntryUpsertWithoutVariationsInput
    connect?: DictionaryEntryWhereUniqueInput
    update?: XOR<XOR<DictionaryEntryUpdateToOneWithWhereWithoutVariationsInput, DictionaryEntryUpdateWithoutVariationsInput>, DictionaryEntryUncheckedUpdateWithoutVariationsInput>
  }

  export type WordUsageCreateNestedOneWithoutSpellingPatternsInput = {
    create?: XOR<WordUsageCreateWithoutSpellingPatternsInput, WordUsageUncheckedCreateWithoutSpellingPatternsInput>
    connectOrCreate?: WordUsageCreateOrConnectWithoutSpellingPatternsInput
    connect?: WordUsageWhereUniqueInput
  }

  export type WordUsageUpdateOneRequiredWithoutSpellingPatternsNestedInput = {
    create?: XOR<WordUsageCreateWithoutSpellingPatternsInput, WordUsageUncheckedCreateWithoutSpellingPatternsInput>
    connectOrCreate?: WordUsageCreateOrConnectWithoutSpellingPatternsInput
    upsert?: WordUsageUpsertWithoutSpellingPatternsInput
    connect?: WordUsageWhereUniqueInput
    update?: XOR<XOR<WordUsageUpdateToOneWithWhereWithoutSpellingPatternsInput, WordUsageUpdateWithoutSpellingPatternsInput>, WordUsageUncheckedUpdateWithoutSpellingPatternsInput>
  }

  export type LexicalSetUsageCreateNestedManyWithoutLexicalSetInput = {
    create?: XOR<LexicalSetUsageCreateWithoutLexicalSetInput, LexicalSetUsageUncheckedCreateWithoutLexicalSetInput> | LexicalSetUsageCreateWithoutLexicalSetInput[] | LexicalSetUsageUncheckedCreateWithoutLexicalSetInput[]
    connectOrCreate?: LexicalSetUsageCreateOrConnectWithoutLexicalSetInput | LexicalSetUsageCreateOrConnectWithoutLexicalSetInput[]
    createMany?: LexicalSetUsageCreateManyLexicalSetInputEnvelope
    connect?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
  }

  export type WordCreateNestedManyWithoutPronunciationInput = {
    create?: XOR<WordCreateWithoutPronunciationInput, WordUncheckedCreateWithoutPronunciationInput> | WordCreateWithoutPronunciationInput[] | WordUncheckedCreateWithoutPronunciationInput[]
    connectOrCreate?: WordCreateOrConnectWithoutPronunciationInput | WordCreateOrConnectWithoutPronunciationInput[]
    connect?: WordWhereUniqueInput | WordWhereUniqueInput[]
  }

  export type LexicalSetUsageUncheckedCreateNestedManyWithoutLexicalSetInput = {
    create?: XOR<LexicalSetUsageCreateWithoutLexicalSetInput, LexicalSetUsageUncheckedCreateWithoutLexicalSetInput> | LexicalSetUsageCreateWithoutLexicalSetInput[] | LexicalSetUsageUncheckedCreateWithoutLexicalSetInput[]
    connectOrCreate?: LexicalSetUsageCreateOrConnectWithoutLexicalSetInput | LexicalSetUsageCreateOrConnectWithoutLexicalSetInput[]
    createMany?: LexicalSetUsageCreateManyLexicalSetInputEnvelope
    connect?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
  }

  export type WordUncheckedCreateNestedManyWithoutPronunciationInput = {
    create?: XOR<WordCreateWithoutPronunciationInput, WordUncheckedCreateWithoutPronunciationInput> | WordCreateWithoutPronunciationInput[] | WordUncheckedCreateWithoutPronunciationInput[]
    connectOrCreate?: WordCreateOrConnectWithoutPronunciationInput | WordCreateOrConnectWithoutPronunciationInput[]
    connect?: WordWhereUniqueInput | WordWhereUniqueInput[]
  }

  export type LexicalSetUsageUpdateManyWithoutLexicalSetNestedInput = {
    create?: XOR<LexicalSetUsageCreateWithoutLexicalSetInput, LexicalSetUsageUncheckedCreateWithoutLexicalSetInput> | LexicalSetUsageCreateWithoutLexicalSetInput[] | LexicalSetUsageUncheckedCreateWithoutLexicalSetInput[]
    connectOrCreate?: LexicalSetUsageCreateOrConnectWithoutLexicalSetInput | LexicalSetUsageCreateOrConnectWithoutLexicalSetInput[]
    upsert?: LexicalSetUsageUpsertWithWhereUniqueWithoutLexicalSetInput | LexicalSetUsageUpsertWithWhereUniqueWithoutLexicalSetInput[]
    createMany?: LexicalSetUsageCreateManyLexicalSetInputEnvelope
    set?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
    disconnect?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
    delete?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
    connect?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
    update?: LexicalSetUsageUpdateWithWhereUniqueWithoutLexicalSetInput | LexicalSetUsageUpdateWithWhereUniqueWithoutLexicalSetInput[]
    updateMany?: LexicalSetUsageUpdateManyWithWhereWithoutLexicalSetInput | LexicalSetUsageUpdateManyWithWhereWithoutLexicalSetInput[]
    deleteMany?: LexicalSetUsageScalarWhereInput | LexicalSetUsageScalarWhereInput[]
  }

  export type WordUpdateManyWithoutPronunciationNestedInput = {
    create?: XOR<WordCreateWithoutPronunciationInput, WordUncheckedCreateWithoutPronunciationInput> | WordCreateWithoutPronunciationInput[] | WordUncheckedCreateWithoutPronunciationInput[]
    connectOrCreate?: WordCreateOrConnectWithoutPronunciationInput | WordCreateOrConnectWithoutPronunciationInput[]
    upsert?: WordUpsertWithWhereUniqueWithoutPronunciationInput | WordUpsertWithWhereUniqueWithoutPronunciationInput[]
    set?: WordWhereUniqueInput | WordWhereUniqueInput[]
    disconnect?: WordWhereUniqueInput | WordWhereUniqueInput[]
    delete?: WordWhereUniqueInput | WordWhereUniqueInput[]
    connect?: WordWhereUniqueInput | WordWhereUniqueInput[]
    update?: WordUpdateWithWhereUniqueWithoutPronunciationInput | WordUpdateWithWhereUniqueWithoutPronunciationInput[]
    updateMany?: WordUpdateManyWithWhereWithoutPronunciationInput | WordUpdateManyWithWhereWithoutPronunciationInput[]
    deleteMany?: WordScalarWhereInput | WordScalarWhereInput[]
  }

  export type LexicalSetUsageUncheckedUpdateManyWithoutLexicalSetNestedInput = {
    create?: XOR<LexicalSetUsageCreateWithoutLexicalSetInput, LexicalSetUsageUncheckedCreateWithoutLexicalSetInput> | LexicalSetUsageCreateWithoutLexicalSetInput[] | LexicalSetUsageUncheckedCreateWithoutLexicalSetInput[]
    connectOrCreate?: LexicalSetUsageCreateOrConnectWithoutLexicalSetInput | LexicalSetUsageCreateOrConnectWithoutLexicalSetInput[]
    upsert?: LexicalSetUsageUpsertWithWhereUniqueWithoutLexicalSetInput | LexicalSetUsageUpsertWithWhereUniqueWithoutLexicalSetInput[]
    createMany?: LexicalSetUsageCreateManyLexicalSetInputEnvelope
    set?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
    disconnect?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
    delete?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
    connect?: LexicalSetUsageWhereUniqueInput | LexicalSetUsageWhereUniqueInput[]
    update?: LexicalSetUsageUpdateWithWhereUniqueWithoutLexicalSetInput | LexicalSetUsageUpdateWithWhereUniqueWithoutLexicalSetInput[]
    updateMany?: LexicalSetUsageUpdateManyWithWhereWithoutLexicalSetInput | LexicalSetUsageUpdateManyWithWhereWithoutLexicalSetInput[]
    deleteMany?: LexicalSetUsageScalarWhereInput | LexicalSetUsageScalarWhereInput[]
  }

  export type WordUncheckedUpdateManyWithoutPronunciationNestedInput = {
    create?: XOR<WordCreateWithoutPronunciationInput, WordUncheckedCreateWithoutPronunciationInput> | WordCreateWithoutPronunciationInput[] | WordUncheckedCreateWithoutPronunciationInput[]
    connectOrCreate?: WordCreateOrConnectWithoutPronunciationInput | WordCreateOrConnectWithoutPronunciationInput[]
    upsert?: WordUpsertWithWhereUniqueWithoutPronunciationInput | WordUpsertWithWhereUniqueWithoutPronunciationInput[]
    set?: WordWhereUniqueInput | WordWhereUniqueInput[]
    disconnect?: WordWhereUniqueInput | WordWhereUniqueInput[]
    delete?: WordWhereUniqueInput | WordWhereUniqueInput[]
    connect?: WordWhereUniqueInput | WordWhereUniqueInput[]
    update?: WordUpdateWithWhereUniqueWithoutPronunciationInput | WordUpdateWithWhereUniqueWithoutPronunciationInput[]
    updateMany?: WordUpdateManyWithWhereWithoutPronunciationInput | WordUpdateManyWithWhereWithoutPronunciationInput[]
    deleteMany?: WordScalarWhereInput | WordScalarWhereInput[]
  }

  export type LexicalSetCreateNestedOneWithoutUsagesInput = {
    create?: XOR<LexicalSetCreateWithoutUsagesInput, LexicalSetUncheckedCreateWithoutUsagesInput>
    connectOrCreate?: LexicalSetCreateOrConnectWithoutUsagesInput
    connect?: LexicalSetWhereUniqueInput
  }

  export type WordUsageCreateNestedOneWithoutLexicalSetsInput = {
    create?: XOR<WordUsageCreateWithoutLexicalSetsInput, WordUsageUncheckedCreateWithoutLexicalSetsInput>
    connectOrCreate?: WordUsageCreateOrConnectWithoutLexicalSetsInput
    connect?: WordUsageWhereUniqueInput
  }

  export type LexicalSetUpdateOneRequiredWithoutUsagesNestedInput = {
    create?: XOR<LexicalSetCreateWithoutUsagesInput, LexicalSetUncheckedCreateWithoutUsagesInput>
    connectOrCreate?: LexicalSetCreateOrConnectWithoutUsagesInput
    upsert?: LexicalSetUpsertWithoutUsagesInput
    connect?: LexicalSetWhereUniqueInput
    update?: XOR<XOR<LexicalSetUpdateToOneWithWhereWithoutUsagesInput, LexicalSetUpdateWithoutUsagesInput>, LexicalSetUncheckedUpdateWithoutUsagesInput>
  }

  export type WordUsageUpdateOneRequiredWithoutLexicalSetsNestedInput = {
    create?: XOR<WordUsageCreateWithoutLexicalSetsInput, WordUsageUncheckedCreateWithoutLexicalSetsInput>
    connectOrCreate?: WordUsageCreateOrConnectWithoutLexicalSetsInput
    upsert?: WordUsageUpsertWithoutLexicalSetsInput
    connect?: WordUsageWhereUniqueInput
    update?: XOR<XOR<WordUsageUpdateToOneWithWhereWithoutLexicalSetsInput, WordUsageUpdateWithoutLexicalSetsInput>, WordUsageUncheckedUpdateWithoutLexicalSetsInput>
  }

  export type ExampleCreatetagsInput = {
    set: string[]
  }

  export type WordUsageCreateNestedOneWithoutExamplesInput = {
    create?: XOR<WordUsageCreateWithoutExamplesInput, WordUsageUncheckedCreateWithoutExamplesInput>
    connectOrCreate?: WordUsageCreateOrConnectWithoutExamplesInput
    connect?: WordUsageWhereUniqueInput
  }

  export type ExampleUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type WordUsageUpdateOneRequiredWithoutExamplesNestedInput = {
    create?: XOR<WordUsageCreateWithoutExamplesInput, WordUsageUncheckedCreateWithoutExamplesInput>
    connectOrCreate?: WordUsageCreateOrConnectWithoutExamplesInput
    upsert?: WordUsageUpsertWithoutExamplesInput
    connect?: WordUsageWhereUniqueInput
    update?: XOR<XOR<WordUsageUpdateToOneWithWhereWithoutExamplesInput, WordUsageUpdateWithoutExamplesInput>, WordUsageUncheckedUpdateWithoutExamplesInput>
  }

  export type ConsonantPhonemeUsageCreateNestedManyWithoutConsonantPhonemeInput = {
    create?: XOR<ConsonantPhonemeUsageCreateWithoutConsonantPhonemeInput, ConsonantPhonemeUsageUncheckedCreateWithoutConsonantPhonemeInput> | ConsonantPhonemeUsageCreateWithoutConsonantPhonemeInput[] | ConsonantPhonemeUsageUncheckedCreateWithoutConsonantPhonemeInput[]
    connectOrCreate?: ConsonantPhonemeUsageCreateOrConnectWithoutConsonantPhonemeInput | ConsonantPhonemeUsageCreateOrConnectWithoutConsonantPhonemeInput[]
    createMany?: ConsonantPhonemeUsageCreateManyConsonantPhonemeInputEnvelope
    connect?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
  }

  export type WordCreateNestedManyWithoutConsonantsInput = {
    create?: XOR<WordCreateWithoutConsonantsInput, WordUncheckedCreateWithoutConsonantsInput> | WordCreateWithoutConsonantsInput[] | WordUncheckedCreateWithoutConsonantsInput[]
    connectOrCreate?: WordCreateOrConnectWithoutConsonantsInput | WordCreateOrConnectWithoutConsonantsInput[]
    connect?: WordWhereUniqueInput | WordWhereUniqueInput[]
  }

  export type ConsonantPhonemeUsageUncheckedCreateNestedManyWithoutConsonantPhonemeInput = {
    create?: XOR<ConsonantPhonemeUsageCreateWithoutConsonantPhonemeInput, ConsonantPhonemeUsageUncheckedCreateWithoutConsonantPhonemeInput> | ConsonantPhonemeUsageCreateWithoutConsonantPhonemeInput[] | ConsonantPhonemeUsageUncheckedCreateWithoutConsonantPhonemeInput[]
    connectOrCreate?: ConsonantPhonemeUsageCreateOrConnectWithoutConsonantPhonemeInput | ConsonantPhonemeUsageCreateOrConnectWithoutConsonantPhonemeInput[]
    createMany?: ConsonantPhonemeUsageCreateManyConsonantPhonemeInputEnvelope
    connect?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
  }

  export type WordUncheckedCreateNestedManyWithoutConsonantsInput = {
    create?: XOR<WordCreateWithoutConsonantsInput, WordUncheckedCreateWithoutConsonantsInput> | WordCreateWithoutConsonantsInput[] | WordUncheckedCreateWithoutConsonantsInput[]
    connectOrCreate?: WordCreateOrConnectWithoutConsonantsInput | WordCreateOrConnectWithoutConsonantsInput[]
    connect?: WordWhereUniqueInput | WordWhereUniqueInput[]
  }

  export type ConsonantPhonemeUsageUpdateManyWithoutConsonantPhonemeNestedInput = {
    create?: XOR<ConsonantPhonemeUsageCreateWithoutConsonantPhonemeInput, ConsonantPhonemeUsageUncheckedCreateWithoutConsonantPhonemeInput> | ConsonantPhonemeUsageCreateWithoutConsonantPhonemeInput[] | ConsonantPhonemeUsageUncheckedCreateWithoutConsonantPhonemeInput[]
    connectOrCreate?: ConsonantPhonemeUsageCreateOrConnectWithoutConsonantPhonemeInput | ConsonantPhonemeUsageCreateOrConnectWithoutConsonantPhonemeInput[]
    upsert?: ConsonantPhonemeUsageUpsertWithWhereUniqueWithoutConsonantPhonemeInput | ConsonantPhonemeUsageUpsertWithWhereUniqueWithoutConsonantPhonemeInput[]
    createMany?: ConsonantPhonemeUsageCreateManyConsonantPhonemeInputEnvelope
    set?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
    disconnect?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
    delete?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
    connect?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
    update?: ConsonantPhonemeUsageUpdateWithWhereUniqueWithoutConsonantPhonemeInput | ConsonantPhonemeUsageUpdateWithWhereUniqueWithoutConsonantPhonemeInput[]
    updateMany?: ConsonantPhonemeUsageUpdateManyWithWhereWithoutConsonantPhonemeInput | ConsonantPhonemeUsageUpdateManyWithWhereWithoutConsonantPhonemeInput[]
    deleteMany?: ConsonantPhonemeUsageScalarWhereInput | ConsonantPhonemeUsageScalarWhereInput[]
  }

  export type WordUpdateManyWithoutConsonantsNestedInput = {
    create?: XOR<WordCreateWithoutConsonantsInput, WordUncheckedCreateWithoutConsonantsInput> | WordCreateWithoutConsonantsInput[] | WordUncheckedCreateWithoutConsonantsInput[]
    connectOrCreate?: WordCreateOrConnectWithoutConsonantsInput | WordCreateOrConnectWithoutConsonantsInput[]
    upsert?: WordUpsertWithWhereUniqueWithoutConsonantsInput | WordUpsertWithWhereUniqueWithoutConsonantsInput[]
    set?: WordWhereUniqueInput | WordWhereUniqueInput[]
    disconnect?: WordWhereUniqueInput | WordWhereUniqueInput[]
    delete?: WordWhereUniqueInput | WordWhereUniqueInput[]
    connect?: WordWhereUniqueInput | WordWhereUniqueInput[]
    update?: WordUpdateWithWhereUniqueWithoutConsonantsInput | WordUpdateWithWhereUniqueWithoutConsonantsInput[]
    updateMany?: WordUpdateManyWithWhereWithoutConsonantsInput | WordUpdateManyWithWhereWithoutConsonantsInput[]
    deleteMany?: WordScalarWhereInput | WordScalarWhereInput[]
  }

  export type ConsonantPhonemeUsageUncheckedUpdateManyWithoutConsonantPhonemeNestedInput = {
    create?: XOR<ConsonantPhonemeUsageCreateWithoutConsonantPhonemeInput, ConsonantPhonemeUsageUncheckedCreateWithoutConsonantPhonemeInput> | ConsonantPhonemeUsageCreateWithoutConsonantPhonemeInput[] | ConsonantPhonemeUsageUncheckedCreateWithoutConsonantPhonemeInput[]
    connectOrCreate?: ConsonantPhonemeUsageCreateOrConnectWithoutConsonantPhonemeInput | ConsonantPhonemeUsageCreateOrConnectWithoutConsonantPhonemeInput[]
    upsert?: ConsonantPhonemeUsageUpsertWithWhereUniqueWithoutConsonantPhonemeInput | ConsonantPhonemeUsageUpsertWithWhereUniqueWithoutConsonantPhonemeInput[]
    createMany?: ConsonantPhonemeUsageCreateManyConsonantPhonemeInputEnvelope
    set?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
    disconnect?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
    delete?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
    connect?: ConsonantPhonemeUsageWhereUniqueInput | ConsonantPhonemeUsageWhereUniqueInput[]
    update?: ConsonantPhonemeUsageUpdateWithWhereUniqueWithoutConsonantPhonemeInput | ConsonantPhonemeUsageUpdateWithWhereUniqueWithoutConsonantPhonemeInput[]
    updateMany?: ConsonantPhonemeUsageUpdateManyWithWhereWithoutConsonantPhonemeInput | ConsonantPhonemeUsageUpdateManyWithWhereWithoutConsonantPhonemeInput[]
    deleteMany?: ConsonantPhonemeUsageScalarWhereInput | ConsonantPhonemeUsageScalarWhereInput[]
  }

  export type WordUncheckedUpdateManyWithoutConsonantsNestedInput = {
    create?: XOR<WordCreateWithoutConsonantsInput, WordUncheckedCreateWithoutConsonantsInput> | WordCreateWithoutConsonantsInput[] | WordUncheckedCreateWithoutConsonantsInput[]
    connectOrCreate?: WordCreateOrConnectWithoutConsonantsInput | WordCreateOrConnectWithoutConsonantsInput[]
    upsert?: WordUpsertWithWhereUniqueWithoutConsonantsInput | WordUpsertWithWhereUniqueWithoutConsonantsInput[]
    set?: WordWhereUniqueInput | WordWhereUniqueInput[]
    disconnect?: WordWhereUniqueInput | WordWhereUniqueInput[]
    delete?: WordWhereUniqueInput | WordWhereUniqueInput[]
    connect?: WordWhereUniqueInput | WordWhereUniqueInput[]
    update?: WordUpdateWithWhereUniqueWithoutConsonantsInput | WordUpdateWithWhereUniqueWithoutConsonantsInput[]
    updateMany?: WordUpdateManyWithWhereWithoutConsonantsInput | WordUpdateManyWithWhereWithoutConsonantsInput[]
    deleteMany?: WordScalarWhereInput | WordScalarWhereInput[]
  }

  export type ConsonantPhonemeCreateNestedOneWithoutUsagesInput = {
    create?: XOR<ConsonantPhonemeCreateWithoutUsagesInput, ConsonantPhonemeUncheckedCreateWithoutUsagesInput>
    connectOrCreate?: ConsonantPhonemeCreateOrConnectWithoutUsagesInput
    connect?: ConsonantPhonemeWhereUniqueInput
  }

  export type WordUsageCreateNestedOneWithoutConsonantPhonemesInput = {
    create?: XOR<WordUsageCreateWithoutConsonantPhonemesInput, WordUsageUncheckedCreateWithoutConsonantPhonemesInput>
    connectOrCreate?: WordUsageCreateOrConnectWithoutConsonantPhonemesInput
    connect?: WordUsageWhereUniqueInput
  }

  export type ConsonantPhonemeUpdateOneRequiredWithoutUsagesNestedInput = {
    create?: XOR<ConsonantPhonemeCreateWithoutUsagesInput, ConsonantPhonemeUncheckedCreateWithoutUsagesInput>
    connectOrCreate?: ConsonantPhonemeCreateOrConnectWithoutUsagesInput
    upsert?: ConsonantPhonemeUpsertWithoutUsagesInput
    connect?: ConsonantPhonemeWhereUniqueInput
    update?: XOR<XOR<ConsonantPhonemeUpdateToOneWithWhereWithoutUsagesInput, ConsonantPhonemeUpdateWithoutUsagesInput>, ConsonantPhonemeUncheckedUpdateWithoutUsagesInput>
  }

  export type WordUsageUpdateOneRequiredWithoutConsonantPhonemesNestedInput = {
    create?: XOR<WordUsageCreateWithoutConsonantPhonemesInput, WordUsageUncheckedCreateWithoutConsonantPhonemesInput>
    connectOrCreate?: WordUsageCreateOrConnectWithoutConsonantPhonemesInput
    upsert?: WordUsageUpsertWithoutConsonantPhonemesInput
    connect?: WordUsageWhereUniqueInput
    update?: XOR<XOR<WordUsageUpdateToOneWithWhereWithoutConsonantPhonemesInput, WordUsageUpdateWithoutConsonantPhonemesInput>, WordUsageUncheckedUpdateWithoutConsonantPhonemesInput>
  }

  export type PronCmuDictCreateNestedManyWithoutOrthoWordInput = {
    create?: XOR<PronCmuDictCreateWithoutOrthoWordInput, PronCmuDictUncheckedCreateWithoutOrthoWordInput> | PronCmuDictCreateWithoutOrthoWordInput[] | PronCmuDictUncheckedCreateWithoutOrthoWordInput[]
    connectOrCreate?: PronCmuDictCreateOrConnectWithoutOrthoWordInput | PronCmuDictCreateOrConnectWithoutOrthoWordInput[]
    createMany?: PronCmuDictCreateManyOrthoWordInputEnvelope
    connect?: PronCmuDictWhereUniqueInput | PronCmuDictWhereUniqueInput[]
  }

  export type PronCmuDictUncheckedCreateNestedManyWithoutOrthoWordInput = {
    create?: XOR<PronCmuDictCreateWithoutOrthoWordInput, PronCmuDictUncheckedCreateWithoutOrthoWordInput> | PronCmuDictCreateWithoutOrthoWordInput[] | PronCmuDictUncheckedCreateWithoutOrthoWordInput[]
    connectOrCreate?: PronCmuDictCreateOrConnectWithoutOrthoWordInput | PronCmuDictCreateOrConnectWithoutOrthoWordInput[]
    createMany?: PronCmuDictCreateManyOrthoWordInputEnvelope
    connect?: PronCmuDictWhereUniqueInput | PronCmuDictWhereUniqueInput[]
  }

  export type PronCmuDictUpdateManyWithoutOrthoWordNestedInput = {
    create?: XOR<PronCmuDictCreateWithoutOrthoWordInput, PronCmuDictUncheckedCreateWithoutOrthoWordInput> | PronCmuDictCreateWithoutOrthoWordInput[] | PronCmuDictUncheckedCreateWithoutOrthoWordInput[]
    connectOrCreate?: PronCmuDictCreateOrConnectWithoutOrthoWordInput | PronCmuDictCreateOrConnectWithoutOrthoWordInput[]
    upsert?: PronCmuDictUpsertWithWhereUniqueWithoutOrthoWordInput | PronCmuDictUpsertWithWhereUniqueWithoutOrthoWordInput[]
    createMany?: PronCmuDictCreateManyOrthoWordInputEnvelope
    set?: PronCmuDictWhereUniqueInput | PronCmuDictWhereUniqueInput[]
    disconnect?: PronCmuDictWhereUniqueInput | PronCmuDictWhereUniqueInput[]
    delete?: PronCmuDictWhereUniqueInput | PronCmuDictWhereUniqueInput[]
    connect?: PronCmuDictWhereUniqueInput | PronCmuDictWhereUniqueInput[]
    update?: PronCmuDictUpdateWithWhereUniqueWithoutOrthoWordInput | PronCmuDictUpdateWithWhereUniqueWithoutOrthoWordInput[]
    updateMany?: PronCmuDictUpdateManyWithWhereWithoutOrthoWordInput | PronCmuDictUpdateManyWithWhereWithoutOrthoWordInput[]
    deleteMany?: PronCmuDictScalarWhereInput | PronCmuDictScalarWhereInput[]
  }

  export type PronCmuDictUncheckedUpdateManyWithoutOrthoWordNestedInput = {
    create?: XOR<PronCmuDictCreateWithoutOrthoWordInput, PronCmuDictUncheckedCreateWithoutOrthoWordInput> | PronCmuDictCreateWithoutOrthoWordInput[] | PronCmuDictUncheckedCreateWithoutOrthoWordInput[]
    connectOrCreate?: PronCmuDictCreateOrConnectWithoutOrthoWordInput | PronCmuDictCreateOrConnectWithoutOrthoWordInput[]
    upsert?: PronCmuDictUpsertWithWhereUniqueWithoutOrthoWordInput | PronCmuDictUpsertWithWhereUniqueWithoutOrthoWordInput[]
    createMany?: PronCmuDictCreateManyOrthoWordInputEnvelope
    set?: PronCmuDictWhereUniqueInput | PronCmuDictWhereUniqueInput[]
    disconnect?: PronCmuDictWhereUniqueInput | PronCmuDictWhereUniqueInput[]
    delete?: PronCmuDictWhereUniqueInput | PronCmuDictWhereUniqueInput[]
    connect?: PronCmuDictWhereUniqueInput | PronCmuDictWhereUniqueInput[]
    update?: PronCmuDictUpdateWithWhereUniqueWithoutOrthoWordInput | PronCmuDictUpdateWithWhereUniqueWithoutOrthoWordInput[]
    updateMany?: PronCmuDictUpdateManyWithWhereWithoutOrthoWordInput | PronCmuDictUpdateManyWithWhereWithoutOrthoWordInput[]
    deleteMany?: PronCmuDictScalarWhereInput | PronCmuDictScalarWhereInput[]
  }

  export type OrthoWordCreateNestedOneWithoutPronsCmuDictInput = {
    create?: XOR<OrthoWordCreateWithoutPronsCmuDictInput, OrthoWordUncheckedCreateWithoutPronsCmuDictInput>
    connectOrCreate?: OrthoWordCreateOrConnectWithoutPronsCmuDictInput
    connect?: OrthoWordWhereUniqueInput
  }

  export type OrthoWordUpdateOneRequiredWithoutPronsCmuDictNestedInput = {
    create?: XOR<OrthoWordCreateWithoutPronsCmuDictInput, OrthoWordUncheckedCreateWithoutPronsCmuDictInput>
    connectOrCreate?: OrthoWordCreateOrConnectWithoutPronsCmuDictInput
    upsert?: OrthoWordUpsertWithoutPronsCmuDictInput
    connect?: OrthoWordWhereUniqueInput
    update?: XOR<XOR<OrthoWordUpdateToOneWithWhereWithoutPronsCmuDictInput, OrthoWordUpdateWithoutPronsCmuDictInput>, OrthoWordUncheckedUpdateWithoutPronsCmuDictInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type AudioCreateWithoutUsersInput = {
    createdAt?: Date | string
    duration: number
    updatedAt?: Date | string
    url: string
    words?: WordCreateNestedManyWithoutAudioInput
  }

  export type AudioUncheckedCreateWithoutUsersInput = {
    id?: number
    createdAt?: Date | string
    duration: number
    updatedAt?: Date | string
    url: string
    words?: WordUncheckedCreateNestedManyWithoutAudioInput
  }

  export type AudioCreateOrConnectWithoutUsersInput = {
    where: AudioWhereUniqueInput
    create: XOR<AudioCreateWithoutUsersInput, AudioUncheckedCreateWithoutUsersInput>
  }

  export type AudioUpsertWithWhereUniqueWithoutUsersInput = {
    where: AudioWhereUniqueInput
    update: XOR<AudioUpdateWithoutUsersInput, AudioUncheckedUpdateWithoutUsersInput>
    create: XOR<AudioCreateWithoutUsersInput, AudioUncheckedCreateWithoutUsersInput>
  }

  export type AudioUpdateWithWhereUniqueWithoutUsersInput = {
    where: AudioWhereUniqueInput
    data: XOR<AudioUpdateWithoutUsersInput, AudioUncheckedUpdateWithoutUsersInput>
  }

  export type AudioUpdateManyWithWhereWithoutUsersInput = {
    where: AudioScalarWhereInput
    data: XOR<AudioUpdateManyMutationInput, AudioUncheckedUpdateManyWithoutUsersInput>
  }

  export type AudioScalarWhereInput = {
    AND?: AudioScalarWhereInput | AudioScalarWhereInput[]
    OR?: AudioScalarWhereInput[]
    NOT?: AudioScalarWhereInput | AudioScalarWhereInput[]
    id?: IntFilter<"Audio"> | number
    createdAt?: DateTimeFilter<"Audio"> | Date | string
    duration?: FloatFilter<"Audio"> | number
    updatedAt?: DateTimeFilter<"Audio"> | Date | string
    url?: StringFilter<"Audio"> | string
  }

  export type WordCreateWithoutAudioInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    word: string
    issues?: IssueCreateNestedManyWithoutWordsInput
    consonants?: ConsonantPhonemeCreateNestedManyWithoutWordsInput
    pronunciation?: LexicalSetCreateNestedManyWithoutWordsInput
  }

  export type WordUncheckedCreateWithoutAudioInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    word: string
    issues?: IssueUncheckedCreateNestedManyWithoutWordsInput
    consonants?: ConsonantPhonemeUncheckedCreateNestedManyWithoutWordsInput
    pronunciation?: LexicalSetUncheckedCreateNestedManyWithoutWordsInput
  }

  export type WordCreateOrConnectWithoutAudioInput = {
    where: WordWhereUniqueInput
    create: XOR<WordCreateWithoutAudioInput, WordUncheckedCreateWithoutAudioInput>
  }

  export type WordCreateManyAudioInputEnvelope = {
    data: WordCreateManyAudioInput | WordCreateManyAudioInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutAudiosInput = {
    email: string
    createdAt?: Date | string
    auth0Id?: string | null
    name?: string | null
    role?: string | null
  }

  export type UserUncheckedCreateWithoutAudiosInput = {
    id?: number
    email: string
    createdAt?: Date | string
    auth0Id?: string | null
    name?: string | null
    role?: string | null
  }

  export type UserCreateOrConnectWithoutAudiosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAudiosInput, UserUncheckedCreateWithoutAudiosInput>
  }

  export type WordUpsertWithWhereUniqueWithoutAudioInput = {
    where: WordWhereUniqueInput
    update: XOR<WordUpdateWithoutAudioInput, WordUncheckedUpdateWithoutAudioInput>
    create: XOR<WordCreateWithoutAudioInput, WordUncheckedCreateWithoutAudioInput>
  }

  export type WordUpdateWithWhereUniqueWithoutAudioInput = {
    where: WordWhereUniqueInput
    data: XOR<WordUpdateWithoutAudioInput, WordUncheckedUpdateWithoutAudioInput>
  }

  export type WordUpdateManyWithWhereWithoutAudioInput = {
    where: WordScalarWhereInput
    data: XOR<WordUpdateManyMutationInput, WordUncheckedUpdateManyWithoutAudioInput>
  }

  export type WordScalarWhereInput = {
    AND?: WordScalarWhereInput | WordScalarWhereInput[]
    OR?: WordScalarWhereInput[]
    NOT?: WordScalarWhereInput | WordScalarWhereInput[]
    id?: IntFilter<"Word"> | number
    audioId?: IntNullableFilter<"Word"> | number | null
    createdAt?: DateTimeFilter<"Word"> | Date | string
    updatedAt?: DateTimeFilter<"Word"> | Date | string
    word?: StringFilter<"Word"> | string
  }

  export type UserUpsertWithWhereUniqueWithoutAudiosInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAudiosInput, UserUncheckedUpdateWithoutAudiosInput>
    create: XOR<UserCreateWithoutAudiosInput, UserUncheckedCreateWithoutAudiosInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAudiosInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAudiosInput, UserUncheckedUpdateWithoutAudiosInput>
  }

  export type UserUpdateManyWithWhereWithoutAudiosInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAudiosInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    auth0Id?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    role?: StringNullableFilter<"User"> | string | null
  }

  export type AudioCreateWithoutWordsInput = {
    createdAt?: Date | string
    duration: number
    updatedAt?: Date | string
    url: string
    users?: UserCreateNestedManyWithoutAudiosInput
  }

  export type AudioUncheckedCreateWithoutWordsInput = {
    id?: number
    createdAt?: Date | string
    duration: number
    updatedAt?: Date | string
    url: string
    users?: UserUncheckedCreateNestedManyWithoutAudiosInput
  }

  export type AudioCreateOrConnectWithoutWordsInput = {
    where: AudioWhereUniqueInput
    create: XOR<AudioCreateWithoutWordsInput, AudioUncheckedCreateWithoutWordsInput>
  }

  export type IssueCreateWithoutWordsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    feature: FeatureCreateNestedOneWithoutIssuesInput
  }

  export type IssueUncheckedCreateWithoutWordsInput = {
    id?: number
    name: string
    featureId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IssueCreateOrConnectWithoutWordsInput = {
    where: IssueWhereUniqueInput
    create: XOR<IssueCreateWithoutWordsInput, IssueUncheckedCreateWithoutWordsInput>
  }

  export type ConsonantPhonemeCreateWithoutWordsInput = {
    name: string
    description?: string | null
    order?: number | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usages?: ConsonantPhonemeUsageCreateNestedManyWithoutConsonantPhonemeInput
  }

  export type ConsonantPhonemeUncheckedCreateWithoutWordsInput = {
    id?: number
    name: string
    description?: string | null
    order?: number | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usages?: ConsonantPhonemeUsageUncheckedCreateNestedManyWithoutConsonantPhonemeInput
  }

  export type ConsonantPhonemeCreateOrConnectWithoutWordsInput = {
    where: ConsonantPhonemeWhereUniqueInput
    create: XOR<ConsonantPhonemeCreateWithoutWordsInput, ConsonantPhonemeUncheckedCreateWithoutWordsInput>
  }

  export type LexicalSetCreateWithoutWordsInput = {
    name: string
    description?: string | null
    order?: number | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usages?: LexicalSetUsageCreateNestedManyWithoutLexicalSetInput
  }

  export type LexicalSetUncheckedCreateWithoutWordsInput = {
    id?: number
    name: string
    description?: string | null
    order?: number | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usages?: LexicalSetUsageUncheckedCreateNestedManyWithoutLexicalSetInput
  }

  export type LexicalSetCreateOrConnectWithoutWordsInput = {
    where: LexicalSetWhereUniqueInput
    create: XOR<LexicalSetCreateWithoutWordsInput, LexicalSetUncheckedCreateWithoutWordsInput>
  }

  export type AudioUpsertWithoutWordsInput = {
    update: XOR<AudioUpdateWithoutWordsInput, AudioUncheckedUpdateWithoutWordsInput>
    create: XOR<AudioCreateWithoutWordsInput, AudioUncheckedCreateWithoutWordsInput>
    where?: AudioWhereInput
  }

  export type AudioUpdateToOneWithWhereWithoutWordsInput = {
    where?: AudioWhereInput
    data: XOR<AudioUpdateWithoutWordsInput, AudioUncheckedUpdateWithoutWordsInput>
  }

  export type AudioUpdateWithoutWordsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutAudiosNestedInput
  }

  export type AudioUncheckedUpdateWithoutWordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutAudiosNestedInput
  }

  export type IssueUpsertWithWhereUniqueWithoutWordsInput = {
    where: IssueWhereUniqueInput
    update: XOR<IssueUpdateWithoutWordsInput, IssueUncheckedUpdateWithoutWordsInput>
    create: XOR<IssueCreateWithoutWordsInput, IssueUncheckedCreateWithoutWordsInput>
  }

  export type IssueUpdateWithWhereUniqueWithoutWordsInput = {
    where: IssueWhereUniqueInput
    data: XOR<IssueUpdateWithoutWordsInput, IssueUncheckedUpdateWithoutWordsInput>
  }

  export type IssueUpdateManyWithWhereWithoutWordsInput = {
    where: IssueScalarWhereInput
    data: XOR<IssueUpdateManyMutationInput, IssueUncheckedUpdateManyWithoutWordsInput>
  }

  export type IssueScalarWhereInput = {
    AND?: IssueScalarWhereInput | IssueScalarWhereInput[]
    OR?: IssueScalarWhereInput[]
    NOT?: IssueScalarWhereInput | IssueScalarWhereInput[]
    id?: IntFilter<"Issue"> | number
    name?: StringFilter<"Issue"> | string
    featureId?: IntFilter<"Issue"> | number
    createdAt?: DateTimeFilter<"Issue"> | Date | string
    updatedAt?: DateTimeFilter<"Issue"> | Date | string
  }

  export type ConsonantPhonemeUpsertWithWhereUniqueWithoutWordsInput = {
    where: ConsonantPhonemeWhereUniqueInput
    update: XOR<ConsonantPhonemeUpdateWithoutWordsInput, ConsonantPhonemeUncheckedUpdateWithoutWordsInput>
    create: XOR<ConsonantPhonemeCreateWithoutWordsInput, ConsonantPhonemeUncheckedCreateWithoutWordsInput>
  }

  export type ConsonantPhonemeUpdateWithWhereUniqueWithoutWordsInput = {
    where: ConsonantPhonemeWhereUniqueInput
    data: XOR<ConsonantPhonemeUpdateWithoutWordsInput, ConsonantPhonemeUncheckedUpdateWithoutWordsInput>
  }

  export type ConsonantPhonemeUpdateManyWithWhereWithoutWordsInput = {
    where: ConsonantPhonemeScalarWhereInput
    data: XOR<ConsonantPhonemeUpdateManyMutationInput, ConsonantPhonemeUncheckedUpdateManyWithoutWordsInput>
  }

  export type ConsonantPhonemeScalarWhereInput = {
    AND?: ConsonantPhonemeScalarWhereInput | ConsonantPhonemeScalarWhereInput[]
    OR?: ConsonantPhonemeScalarWhereInput[]
    NOT?: ConsonantPhonemeScalarWhereInput | ConsonantPhonemeScalarWhereInput[]
    id?: IntFilter<"ConsonantPhoneme"> | number
    name?: StringFilter<"ConsonantPhoneme"> | string
    description?: StringNullableFilter<"ConsonantPhoneme"> | string | null
    order?: IntNullableFilter<"ConsonantPhoneme"> | number | null
    category?: StringNullableFilter<"ConsonantPhoneme"> | string | null
    createdAt?: DateTimeFilter<"ConsonantPhoneme"> | Date | string
    updatedAt?: DateTimeFilter<"ConsonantPhoneme"> | Date | string
  }

  export type LexicalSetUpsertWithWhereUniqueWithoutWordsInput = {
    where: LexicalSetWhereUniqueInput
    update: XOR<LexicalSetUpdateWithoutWordsInput, LexicalSetUncheckedUpdateWithoutWordsInput>
    create: XOR<LexicalSetCreateWithoutWordsInput, LexicalSetUncheckedCreateWithoutWordsInput>
  }

  export type LexicalSetUpdateWithWhereUniqueWithoutWordsInput = {
    where: LexicalSetWhereUniqueInput
    data: XOR<LexicalSetUpdateWithoutWordsInput, LexicalSetUncheckedUpdateWithoutWordsInput>
  }

  export type LexicalSetUpdateManyWithWhereWithoutWordsInput = {
    where: LexicalSetScalarWhereInput
    data: XOR<LexicalSetUpdateManyMutationInput, LexicalSetUncheckedUpdateManyWithoutWordsInput>
  }

  export type LexicalSetScalarWhereInput = {
    AND?: LexicalSetScalarWhereInput | LexicalSetScalarWhereInput[]
    OR?: LexicalSetScalarWhereInput[]
    NOT?: LexicalSetScalarWhereInput | LexicalSetScalarWhereInput[]
    id?: IntFilter<"LexicalSet"> | number
    name?: StringFilter<"LexicalSet"> | string
    description?: StringNullableFilter<"LexicalSet"> | string | null
    order?: IntNullableFilter<"LexicalSet"> | number | null
    category?: StringNullableFilter<"LexicalSet"> | string | null
    createdAt?: DateTimeFilter<"LexicalSet"> | Date | string
    updatedAt?: DateTimeFilter<"LexicalSet"> | Date | string
  }

  export type FeatureCreateWithoutIssuesInput = {
    name: string
    type?: string | null
    order?: number | null
  }

  export type FeatureUncheckedCreateWithoutIssuesInput = {
    id?: number
    name: string
    type?: string | null
    order?: number | null
  }

  export type FeatureCreateOrConnectWithoutIssuesInput = {
    where: FeatureWhereUniqueInput
    create: XOR<FeatureCreateWithoutIssuesInput, FeatureUncheckedCreateWithoutIssuesInput>
  }

  export type WordCreateWithoutIssuesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    word: string
    audio?: AudioCreateNestedOneWithoutWordsInput
    consonants?: ConsonantPhonemeCreateNestedManyWithoutWordsInput
    pronunciation?: LexicalSetCreateNestedManyWithoutWordsInput
  }

  export type WordUncheckedCreateWithoutIssuesInput = {
    id?: number
    audioId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    word: string
    consonants?: ConsonantPhonemeUncheckedCreateNestedManyWithoutWordsInput
    pronunciation?: LexicalSetUncheckedCreateNestedManyWithoutWordsInput
  }

  export type WordCreateOrConnectWithoutIssuesInput = {
    where: WordWhereUniqueInput
    create: XOR<WordCreateWithoutIssuesInput, WordUncheckedCreateWithoutIssuesInput>
  }

  export type FeatureUpsertWithoutIssuesInput = {
    update: XOR<FeatureUpdateWithoutIssuesInput, FeatureUncheckedUpdateWithoutIssuesInput>
    create: XOR<FeatureCreateWithoutIssuesInput, FeatureUncheckedCreateWithoutIssuesInput>
    where?: FeatureWhereInput
  }

  export type FeatureUpdateToOneWithWhereWithoutIssuesInput = {
    where?: FeatureWhereInput
    data: XOR<FeatureUpdateWithoutIssuesInput, FeatureUncheckedUpdateWithoutIssuesInput>
  }

  export type FeatureUpdateWithoutIssuesInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FeatureUncheckedUpdateWithoutIssuesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WordUpsertWithWhereUniqueWithoutIssuesInput = {
    where: WordWhereUniqueInput
    update: XOR<WordUpdateWithoutIssuesInput, WordUncheckedUpdateWithoutIssuesInput>
    create: XOR<WordCreateWithoutIssuesInput, WordUncheckedCreateWithoutIssuesInput>
  }

  export type WordUpdateWithWhereUniqueWithoutIssuesInput = {
    where: WordWhereUniqueInput
    data: XOR<WordUpdateWithoutIssuesInput, WordUncheckedUpdateWithoutIssuesInput>
  }

  export type WordUpdateManyWithWhereWithoutIssuesInput = {
    where: WordScalarWhereInput
    data: XOR<WordUpdateManyMutationInput, WordUncheckedUpdateManyWithoutIssuesInput>
  }

  export type IssueCreateWithoutFeatureInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    words?: WordCreateNestedManyWithoutIssuesInput
  }

  export type IssueUncheckedCreateWithoutFeatureInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    words?: WordUncheckedCreateNestedManyWithoutIssuesInput
  }

  export type IssueCreateOrConnectWithoutFeatureInput = {
    where: IssueWhereUniqueInput
    create: XOR<IssueCreateWithoutFeatureInput, IssueUncheckedCreateWithoutFeatureInput>
  }

  export type IssueCreateManyFeatureInputEnvelope = {
    data: IssueCreateManyFeatureInput | IssueCreateManyFeatureInput[]
    skipDuplicates?: boolean
  }

  export type IssueUpsertWithWhereUniqueWithoutFeatureInput = {
    where: IssueWhereUniqueInput
    update: XOR<IssueUpdateWithoutFeatureInput, IssueUncheckedUpdateWithoutFeatureInput>
    create: XOR<IssueCreateWithoutFeatureInput, IssueUncheckedCreateWithoutFeatureInput>
  }

  export type IssueUpdateWithWhereUniqueWithoutFeatureInput = {
    where: IssueWhereUniqueInput
    data: XOR<IssueUpdateWithoutFeatureInput, IssueUncheckedUpdateWithoutFeatureInput>
  }

  export type IssueUpdateManyWithWhereWithoutFeatureInput = {
    where: IssueScalarWhereInput
    data: XOR<IssueUpdateManyMutationInput, IssueUncheckedUpdateManyWithoutFeatureInput>
  }

  export type WordUsageCreateWithoutEntryInput = {
    partOfSpeech: string
    meaning: string
    consonantPhonemes?: ConsonantPhonemeUsageCreateNestedManyWithoutWordUsageInput
    examples?: ExampleCreateNestedManyWithoutWordUsageInput
    lexicalSets?: LexicalSetUsageCreateNestedManyWithoutWordUsageInput
    pronunciations?: PronunciationCreateNestedManyWithoutWordUsageInput
    spellingPatterns?: SpellingPatternCreateNestedManyWithoutWordUsageInput
  }

  export type WordUsageUncheckedCreateWithoutEntryInput = {
    id?: number
    partOfSpeech: string
    meaning: string
    consonantPhonemes?: ConsonantPhonemeUsageUncheckedCreateNestedManyWithoutWordUsageInput
    examples?: ExampleUncheckedCreateNestedManyWithoutWordUsageInput
    lexicalSets?: LexicalSetUsageUncheckedCreateNestedManyWithoutWordUsageInput
    pronunciations?: PronunciationUncheckedCreateNestedManyWithoutWordUsageInput
    spellingPatterns?: SpellingPatternUncheckedCreateNestedManyWithoutWordUsageInput
  }

  export type WordUsageCreateOrConnectWithoutEntryInput = {
    where: WordUsageWhereUniqueInput
    create: XOR<WordUsageCreateWithoutEntryInput, WordUsageUncheckedCreateWithoutEntryInput>
  }

  export type WordUsageCreateManyEntryInputEnvelope = {
    data: WordUsageCreateManyEntryInput | WordUsageCreateManyEntryInput[]
    skipDuplicates?: boolean
  }

  export type WordVariationCreateWithoutEntryInput = {
    form: string
    type: string
    isRegular: boolean
    notes?: string | null
  }

  export type WordVariationUncheckedCreateWithoutEntryInput = {
    id?: number
    form: string
    type: string
    isRegular: boolean
    notes?: string | null
  }

  export type WordVariationCreateOrConnectWithoutEntryInput = {
    where: WordVariationWhereUniqueInput
    create: XOR<WordVariationCreateWithoutEntryInput, WordVariationUncheckedCreateWithoutEntryInput>
  }

  export type WordVariationCreateManyEntryInputEnvelope = {
    data: WordVariationCreateManyEntryInput | WordVariationCreateManyEntryInput[]
    skipDuplicates?: boolean
  }

  export type WordUsageUpsertWithWhereUniqueWithoutEntryInput = {
    where: WordUsageWhereUniqueInput
    update: XOR<WordUsageUpdateWithoutEntryInput, WordUsageUncheckedUpdateWithoutEntryInput>
    create: XOR<WordUsageCreateWithoutEntryInput, WordUsageUncheckedCreateWithoutEntryInput>
  }

  export type WordUsageUpdateWithWhereUniqueWithoutEntryInput = {
    where: WordUsageWhereUniqueInput
    data: XOR<WordUsageUpdateWithoutEntryInput, WordUsageUncheckedUpdateWithoutEntryInput>
  }

  export type WordUsageUpdateManyWithWhereWithoutEntryInput = {
    where: WordUsageScalarWhereInput
    data: XOR<WordUsageUpdateManyMutationInput, WordUsageUncheckedUpdateManyWithoutEntryInput>
  }

  export type WordUsageScalarWhereInput = {
    AND?: WordUsageScalarWhereInput | WordUsageScalarWhereInput[]
    OR?: WordUsageScalarWhereInput[]
    NOT?: WordUsageScalarWhereInput | WordUsageScalarWhereInput[]
    id?: IntFilter<"WordUsage"> | number
    entryId?: IntFilter<"WordUsage"> | number
    partOfSpeech?: StringFilter<"WordUsage"> | string
    meaning?: StringFilter<"WordUsage"> | string
  }

  export type WordVariationUpsertWithWhereUniqueWithoutEntryInput = {
    where: WordVariationWhereUniqueInput
    update: XOR<WordVariationUpdateWithoutEntryInput, WordVariationUncheckedUpdateWithoutEntryInput>
    create: XOR<WordVariationCreateWithoutEntryInput, WordVariationUncheckedCreateWithoutEntryInput>
  }

  export type WordVariationUpdateWithWhereUniqueWithoutEntryInput = {
    where: WordVariationWhereUniqueInput
    data: XOR<WordVariationUpdateWithoutEntryInput, WordVariationUncheckedUpdateWithoutEntryInput>
  }

  export type WordVariationUpdateManyWithWhereWithoutEntryInput = {
    where: WordVariationScalarWhereInput
    data: XOR<WordVariationUpdateManyMutationInput, WordVariationUncheckedUpdateManyWithoutEntryInput>
  }

  export type WordVariationScalarWhereInput = {
    AND?: WordVariationScalarWhereInput | WordVariationScalarWhereInput[]
    OR?: WordVariationScalarWhereInput[]
    NOT?: WordVariationScalarWhereInput | WordVariationScalarWhereInput[]
    id?: IntFilter<"WordVariation"> | number
    entryId?: IntFilter<"WordVariation"> | number
    form?: StringFilter<"WordVariation"> | string
    type?: StringFilter<"WordVariation"> | string
    isRegular?: BoolFilter<"WordVariation"> | boolean
    notes?: StringNullableFilter<"WordVariation"> | string | null
  }

  export type ConsonantPhonemeUsageCreateWithoutWordUsageInput = {
    order?: number | null
    consonantPhoneme: ConsonantPhonemeCreateNestedOneWithoutUsagesInput
  }

  export type ConsonantPhonemeUsageUncheckedCreateWithoutWordUsageInput = {
    id?: number
    consonantPhonemeId: number
    order?: number | null
  }

  export type ConsonantPhonemeUsageCreateOrConnectWithoutWordUsageInput = {
    where: ConsonantPhonemeUsageWhereUniqueInput
    create: XOR<ConsonantPhonemeUsageCreateWithoutWordUsageInput, ConsonantPhonemeUsageUncheckedCreateWithoutWordUsageInput>
  }

  export type ConsonantPhonemeUsageCreateManyWordUsageInputEnvelope = {
    data: ConsonantPhonemeUsageCreateManyWordUsageInput | ConsonantPhonemeUsageCreateManyWordUsageInput[]
    skipDuplicates?: boolean
  }

  export type ExampleCreateWithoutWordUsageInput = {
    sentence: string
    context?: string | null
    difficulty?: string | null
    tags?: ExampleCreatetagsInput | string[]
  }

  export type ExampleUncheckedCreateWithoutWordUsageInput = {
    id?: number
    sentence: string
    context?: string | null
    difficulty?: string | null
    tags?: ExampleCreatetagsInput | string[]
  }

  export type ExampleCreateOrConnectWithoutWordUsageInput = {
    where: ExampleWhereUniqueInput
    create: XOR<ExampleCreateWithoutWordUsageInput, ExampleUncheckedCreateWithoutWordUsageInput>
  }

  export type ExampleCreateManyWordUsageInputEnvelope = {
    data: ExampleCreateManyWordUsageInput | ExampleCreateManyWordUsageInput[]
    skipDuplicates?: boolean
  }

  export type LexicalSetUsageCreateWithoutWordUsageInput = {
    order?: number | null
    lexicalSet: LexicalSetCreateNestedOneWithoutUsagesInput
  }

  export type LexicalSetUsageUncheckedCreateWithoutWordUsageInput = {
    id?: number
    lexicalSetId: number
    order?: number | null
  }

  export type LexicalSetUsageCreateOrConnectWithoutWordUsageInput = {
    where: LexicalSetUsageWhereUniqueInput
    create: XOR<LexicalSetUsageCreateWithoutWordUsageInput, LexicalSetUsageUncheckedCreateWithoutWordUsageInput>
  }

  export type LexicalSetUsageCreateManyWordUsageInputEnvelope = {
    data: LexicalSetUsageCreateManyWordUsageInput | LexicalSetUsageCreateManyWordUsageInput[]
    skipDuplicates?: boolean
  }

  export type PronunciationCreateWithoutWordUsageInput = {
    phonemic?: string | null
    broadIPA?: string | null
    narrowIPA?: string | null
    audioUrl?: string | null
    speaker?: string | null
    dialect?: string | null
    isPrimary?: boolean
    notes?: string | null
    order?: number | null
  }

  export type PronunciationUncheckedCreateWithoutWordUsageInput = {
    id?: number
    phonemic?: string | null
    broadIPA?: string | null
    narrowIPA?: string | null
    audioUrl?: string | null
    speaker?: string | null
    dialect?: string | null
    isPrimary?: boolean
    notes?: string | null
    order?: number | null
  }

  export type PronunciationCreateOrConnectWithoutWordUsageInput = {
    where: PronunciationWhereUniqueInput
    create: XOR<PronunciationCreateWithoutWordUsageInput, PronunciationUncheckedCreateWithoutWordUsageInput>
  }

  export type PronunciationCreateManyWordUsageInputEnvelope = {
    data: PronunciationCreateManyWordUsageInput | PronunciationCreateManyWordUsageInput[]
    skipDuplicates?: boolean
  }

  export type SpellingPatternCreateWithoutWordUsageInput = {
    pattern: string
    type: string
    description?: string | null
    order?: number | null
  }

  export type SpellingPatternUncheckedCreateWithoutWordUsageInput = {
    id?: number
    pattern: string
    type: string
    description?: string | null
    order?: number | null
  }

  export type SpellingPatternCreateOrConnectWithoutWordUsageInput = {
    where: SpellingPatternWhereUniqueInput
    create: XOR<SpellingPatternCreateWithoutWordUsageInput, SpellingPatternUncheckedCreateWithoutWordUsageInput>
  }

  export type SpellingPatternCreateManyWordUsageInputEnvelope = {
    data: SpellingPatternCreateManyWordUsageInput | SpellingPatternCreateManyWordUsageInput[]
    skipDuplicates?: boolean
  }

  export type DictionaryEntryCreateWithoutUsagesInput = {
    word: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    variations?: WordVariationCreateNestedManyWithoutEntryInput
  }

  export type DictionaryEntryUncheckedCreateWithoutUsagesInput = {
    id?: number
    word: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    variations?: WordVariationUncheckedCreateNestedManyWithoutEntryInput
  }

  export type DictionaryEntryCreateOrConnectWithoutUsagesInput = {
    where: DictionaryEntryWhereUniqueInput
    create: XOR<DictionaryEntryCreateWithoutUsagesInput, DictionaryEntryUncheckedCreateWithoutUsagesInput>
  }

  export type ConsonantPhonemeUsageUpsertWithWhereUniqueWithoutWordUsageInput = {
    where: ConsonantPhonemeUsageWhereUniqueInput
    update: XOR<ConsonantPhonemeUsageUpdateWithoutWordUsageInput, ConsonantPhonemeUsageUncheckedUpdateWithoutWordUsageInput>
    create: XOR<ConsonantPhonemeUsageCreateWithoutWordUsageInput, ConsonantPhonemeUsageUncheckedCreateWithoutWordUsageInput>
  }

  export type ConsonantPhonemeUsageUpdateWithWhereUniqueWithoutWordUsageInput = {
    where: ConsonantPhonemeUsageWhereUniqueInput
    data: XOR<ConsonantPhonemeUsageUpdateWithoutWordUsageInput, ConsonantPhonemeUsageUncheckedUpdateWithoutWordUsageInput>
  }

  export type ConsonantPhonemeUsageUpdateManyWithWhereWithoutWordUsageInput = {
    where: ConsonantPhonemeUsageScalarWhereInput
    data: XOR<ConsonantPhonemeUsageUpdateManyMutationInput, ConsonantPhonemeUsageUncheckedUpdateManyWithoutWordUsageInput>
  }

  export type ConsonantPhonemeUsageScalarWhereInput = {
    AND?: ConsonantPhonemeUsageScalarWhereInput | ConsonantPhonemeUsageScalarWhereInput[]
    OR?: ConsonantPhonemeUsageScalarWhereInput[]
    NOT?: ConsonantPhonemeUsageScalarWhereInput | ConsonantPhonemeUsageScalarWhereInput[]
    id?: IntFilter<"ConsonantPhonemeUsage"> | number
    consonantPhonemeId?: IntFilter<"ConsonantPhonemeUsage"> | number
    usageId?: IntFilter<"ConsonantPhonemeUsage"> | number
    order?: IntNullableFilter<"ConsonantPhonemeUsage"> | number | null
  }

  export type ExampleUpsertWithWhereUniqueWithoutWordUsageInput = {
    where: ExampleWhereUniqueInput
    update: XOR<ExampleUpdateWithoutWordUsageInput, ExampleUncheckedUpdateWithoutWordUsageInput>
    create: XOR<ExampleCreateWithoutWordUsageInput, ExampleUncheckedCreateWithoutWordUsageInput>
  }

  export type ExampleUpdateWithWhereUniqueWithoutWordUsageInput = {
    where: ExampleWhereUniqueInput
    data: XOR<ExampleUpdateWithoutWordUsageInput, ExampleUncheckedUpdateWithoutWordUsageInput>
  }

  export type ExampleUpdateManyWithWhereWithoutWordUsageInput = {
    where: ExampleScalarWhereInput
    data: XOR<ExampleUpdateManyMutationInput, ExampleUncheckedUpdateManyWithoutWordUsageInput>
  }

  export type ExampleScalarWhereInput = {
    AND?: ExampleScalarWhereInput | ExampleScalarWhereInput[]
    OR?: ExampleScalarWhereInput[]
    NOT?: ExampleScalarWhereInput | ExampleScalarWhereInput[]
    id?: IntFilter<"Example"> | number
    usageId?: IntFilter<"Example"> | number
    sentence?: StringFilter<"Example"> | string
    context?: StringNullableFilter<"Example"> | string | null
    difficulty?: StringNullableFilter<"Example"> | string | null
    tags?: StringNullableListFilter<"Example">
  }

  export type LexicalSetUsageUpsertWithWhereUniqueWithoutWordUsageInput = {
    where: LexicalSetUsageWhereUniqueInput
    update: XOR<LexicalSetUsageUpdateWithoutWordUsageInput, LexicalSetUsageUncheckedUpdateWithoutWordUsageInput>
    create: XOR<LexicalSetUsageCreateWithoutWordUsageInput, LexicalSetUsageUncheckedCreateWithoutWordUsageInput>
  }

  export type LexicalSetUsageUpdateWithWhereUniqueWithoutWordUsageInput = {
    where: LexicalSetUsageWhereUniqueInput
    data: XOR<LexicalSetUsageUpdateWithoutWordUsageInput, LexicalSetUsageUncheckedUpdateWithoutWordUsageInput>
  }

  export type LexicalSetUsageUpdateManyWithWhereWithoutWordUsageInput = {
    where: LexicalSetUsageScalarWhereInput
    data: XOR<LexicalSetUsageUpdateManyMutationInput, LexicalSetUsageUncheckedUpdateManyWithoutWordUsageInput>
  }

  export type LexicalSetUsageScalarWhereInput = {
    AND?: LexicalSetUsageScalarWhereInput | LexicalSetUsageScalarWhereInput[]
    OR?: LexicalSetUsageScalarWhereInput[]
    NOT?: LexicalSetUsageScalarWhereInput | LexicalSetUsageScalarWhereInput[]
    id?: IntFilter<"LexicalSetUsage"> | number
    lexicalSetId?: IntFilter<"LexicalSetUsage"> | number
    usageId?: IntFilter<"LexicalSetUsage"> | number
    order?: IntNullableFilter<"LexicalSetUsage"> | number | null
  }

  export type PronunciationUpsertWithWhereUniqueWithoutWordUsageInput = {
    where: PronunciationWhereUniqueInput
    update: XOR<PronunciationUpdateWithoutWordUsageInput, PronunciationUncheckedUpdateWithoutWordUsageInput>
    create: XOR<PronunciationCreateWithoutWordUsageInput, PronunciationUncheckedCreateWithoutWordUsageInput>
  }

  export type PronunciationUpdateWithWhereUniqueWithoutWordUsageInput = {
    where: PronunciationWhereUniqueInput
    data: XOR<PronunciationUpdateWithoutWordUsageInput, PronunciationUncheckedUpdateWithoutWordUsageInput>
  }

  export type PronunciationUpdateManyWithWhereWithoutWordUsageInput = {
    where: PronunciationScalarWhereInput
    data: XOR<PronunciationUpdateManyMutationInput, PronunciationUncheckedUpdateManyWithoutWordUsageInput>
  }

  export type PronunciationScalarWhereInput = {
    AND?: PronunciationScalarWhereInput | PronunciationScalarWhereInput[]
    OR?: PronunciationScalarWhereInput[]
    NOT?: PronunciationScalarWhereInput | PronunciationScalarWhereInput[]
    id?: IntFilter<"Pronunciation"> | number
    usageId?: IntFilter<"Pronunciation"> | number
    phonemic?: StringNullableFilter<"Pronunciation"> | string | null
    broadIPA?: StringNullableFilter<"Pronunciation"> | string | null
    narrowIPA?: StringNullableFilter<"Pronunciation"> | string | null
    audioUrl?: StringNullableFilter<"Pronunciation"> | string | null
    speaker?: StringNullableFilter<"Pronunciation"> | string | null
    dialect?: StringNullableFilter<"Pronunciation"> | string | null
    isPrimary?: BoolFilter<"Pronunciation"> | boolean
    notes?: StringNullableFilter<"Pronunciation"> | string | null
    order?: IntNullableFilter<"Pronunciation"> | number | null
  }

  export type SpellingPatternUpsertWithWhereUniqueWithoutWordUsageInput = {
    where: SpellingPatternWhereUniqueInput
    update: XOR<SpellingPatternUpdateWithoutWordUsageInput, SpellingPatternUncheckedUpdateWithoutWordUsageInput>
    create: XOR<SpellingPatternCreateWithoutWordUsageInput, SpellingPatternUncheckedCreateWithoutWordUsageInput>
  }

  export type SpellingPatternUpdateWithWhereUniqueWithoutWordUsageInput = {
    where: SpellingPatternWhereUniqueInput
    data: XOR<SpellingPatternUpdateWithoutWordUsageInput, SpellingPatternUncheckedUpdateWithoutWordUsageInput>
  }

  export type SpellingPatternUpdateManyWithWhereWithoutWordUsageInput = {
    where: SpellingPatternScalarWhereInput
    data: XOR<SpellingPatternUpdateManyMutationInput, SpellingPatternUncheckedUpdateManyWithoutWordUsageInput>
  }

  export type SpellingPatternScalarWhereInput = {
    AND?: SpellingPatternScalarWhereInput | SpellingPatternScalarWhereInput[]
    OR?: SpellingPatternScalarWhereInput[]
    NOT?: SpellingPatternScalarWhereInput | SpellingPatternScalarWhereInput[]
    id?: IntFilter<"SpellingPattern"> | number
    usageId?: IntFilter<"SpellingPattern"> | number
    pattern?: StringFilter<"SpellingPattern"> | string
    type?: StringFilter<"SpellingPattern"> | string
    description?: StringNullableFilter<"SpellingPattern"> | string | null
    order?: IntNullableFilter<"SpellingPattern"> | number | null
  }

  export type DictionaryEntryUpsertWithoutUsagesInput = {
    update: XOR<DictionaryEntryUpdateWithoutUsagesInput, DictionaryEntryUncheckedUpdateWithoutUsagesInput>
    create: XOR<DictionaryEntryCreateWithoutUsagesInput, DictionaryEntryUncheckedCreateWithoutUsagesInput>
    where?: DictionaryEntryWhereInput
  }

  export type DictionaryEntryUpdateToOneWithWhereWithoutUsagesInput = {
    where?: DictionaryEntryWhereInput
    data: XOR<DictionaryEntryUpdateWithoutUsagesInput, DictionaryEntryUncheckedUpdateWithoutUsagesInput>
  }

  export type DictionaryEntryUpdateWithoutUsagesInput = {
    word?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    variations?: WordVariationUpdateManyWithoutEntryNestedInput
  }

  export type DictionaryEntryUncheckedUpdateWithoutUsagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    word?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    variations?: WordVariationUncheckedUpdateManyWithoutEntryNestedInput
  }

  export type WordUsageCreateWithoutPronunciationsInput = {
    partOfSpeech: string
    meaning: string
    consonantPhonemes?: ConsonantPhonemeUsageCreateNestedManyWithoutWordUsageInput
    examples?: ExampleCreateNestedManyWithoutWordUsageInput
    lexicalSets?: LexicalSetUsageCreateNestedManyWithoutWordUsageInput
    spellingPatterns?: SpellingPatternCreateNestedManyWithoutWordUsageInput
    entry: DictionaryEntryCreateNestedOneWithoutUsagesInput
  }

  export type WordUsageUncheckedCreateWithoutPronunciationsInput = {
    id?: number
    entryId: number
    partOfSpeech: string
    meaning: string
    consonantPhonemes?: ConsonantPhonemeUsageUncheckedCreateNestedManyWithoutWordUsageInput
    examples?: ExampleUncheckedCreateNestedManyWithoutWordUsageInput
    lexicalSets?: LexicalSetUsageUncheckedCreateNestedManyWithoutWordUsageInput
    spellingPatterns?: SpellingPatternUncheckedCreateNestedManyWithoutWordUsageInput
  }

  export type WordUsageCreateOrConnectWithoutPronunciationsInput = {
    where: WordUsageWhereUniqueInput
    create: XOR<WordUsageCreateWithoutPronunciationsInput, WordUsageUncheckedCreateWithoutPronunciationsInput>
  }

  export type WordUsageUpsertWithoutPronunciationsInput = {
    update: XOR<WordUsageUpdateWithoutPronunciationsInput, WordUsageUncheckedUpdateWithoutPronunciationsInput>
    create: XOR<WordUsageCreateWithoutPronunciationsInput, WordUsageUncheckedCreateWithoutPronunciationsInput>
    where?: WordUsageWhereInput
  }

  export type WordUsageUpdateToOneWithWhereWithoutPronunciationsInput = {
    where?: WordUsageWhereInput
    data: XOR<WordUsageUpdateWithoutPronunciationsInput, WordUsageUncheckedUpdateWithoutPronunciationsInput>
  }

  export type WordUsageUpdateWithoutPronunciationsInput = {
    partOfSpeech?: StringFieldUpdateOperationsInput | string
    meaning?: StringFieldUpdateOperationsInput | string
    consonantPhonemes?: ConsonantPhonemeUsageUpdateManyWithoutWordUsageNestedInput
    examples?: ExampleUpdateManyWithoutWordUsageNestedInput
    lexicalSets?: LexicalSetUsageUpdateManyWithoutWordUsageNestedInput
    spellingPatterns?: SpellingPatternUpdateManyWithoutWordUsageNestedInput
    entry?: DictionaryEntryUpdateOneRequiredWithoutUsagesNestedInput
  }

  export type WordUsageUncheckedUpdateWithoutPronunciationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    entryId?: IntFieldUpdateOperationsInput | number
    partOfSpeech?: StringFieldUpdateOperationsInput | string
    meaning?: StringFieldUpdateOperationsInput | string
    consonantPhonemes?: ConsonantPhonemeUsageUncheckedUpdateManyWithoutWordUsageNestedInput
    examples?: ExampleUncheckedUpdateManyWithoutWordUsageNestedInput
    lexicalSets?: LexicalSetUsageUncheckedUpdateManyWithoutWordUsageNestedInput
    spellingPatterns?: SpellingPatternUncheckedUpdateManyWithoutWordUsageNestedInput
  }

  export type DictionaryEntryCreateWithoutVariationsInput = {
    word: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    usages?: WordUsageCreateNestedManyWithoutEntryInput
  }

  export type DictionaryEntryUncheckedCreateWithoutVariationsInput = {
    id?: number
    word: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    usages?: WordUsageUncheckedCreateNestedManyWithoutEntryInput
  }

  export type DictionaryEntryCreateOrConnectWithoutVariationsInput = {
    where: DictionaryEntryWhereUniqueInput
    create: XOR<DictionaryEntryCreateWithoutVariationsInput, DictionaryEntryUncheckedCreateWithoutVariationsInput>
  }

  export type DictionaryEntryUpsertWithoutVariationsInput = {
    update: XOR<DictionaryEntryUpdateWithoutVariationsInput, DictionaryEntryUncheckedUpdateWithoutVariationsInput>
    create: XOR<DictionaryEntryCreateWithoutVariationsInput, DictionaryEntryUncheckedCreateWithoutVariationsInput>
    where?: DictionaryEntryWhereInput
  }

  export type DictionaryEntryUpdateToOneWithWhereWithoutVariationsInput = {
    where?: DictionaryEntryWhereInput
    data: XOR<DictionaryEntryUpdateWithoutVariationsInput, DictionaryEntryUncheckedUpdateWithoutVariationsInput>
  }

  export type DictionaryEntryUpdateWithoutVariationsInput = {
    word?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    usages?: WordUsageUpdateManyWithoutEntryNestedInput
  }

  export type DictionaryEntryUncheckedUpdateWithoutVariationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    word?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    usages?: WordUsageUncheckedUpdateManyWithoutEntryNestedInput
  }

  export type WordUsageCreateWithoutSpellingPatternsInput = {
    partOfSpeech: string
    meaning: string
    consonantPhonemes?: ConsonantPhonemeUsageCreateNestedManyWithoutWordUsageInput
    examples?: ExampleCreateNestedManyWithoutWordUsageInput
    lexicalSets?: LexicalSetUsageCreateNestedManyWithoutWordUsageInput
    pronunciations?: PronunciationCreateNestedManyWithoutWordUsageInput
    entry: DictionaryEntryCreateNestedOneWithoutUsagesInput
  }

  export type WordUsageUncheckedCreateWithoutSpellingPatternsInput = {
    id?: number
    entryId: number
    partOfSpeech: string
    meaning: string
    consonantPhonemes?: ConsonantPhonemeUsageUncheckedCreateNestedManyWithoutWordUsageInput
    examples?: ExampleUncheckedCreateNestedManyWithoutWordUsageInput
    lexicalSets?: LexicalSetUsageUncheckedCreateNestedManyWithoutWordUsageInput
    pronunciations?: PronunciationUncheckedCreateNestedManyWithoutWordUsageInput
  }

  export type WordUsageCreateOrConnectWithoutSpellingPatternsInput = {
    where: WordUsageWhereUniqueInput
    create: XOR<WordUsageCreateWithoutSpellingPatternsInput, WordUsageUncheckedCreateWithoutSpellingPatternsInput>
  }

  export type WordUsageUpsertWithoutSpellingPatternsInput = {
    update: XOR<WordUsageUpdateWithoutSpellingPatternsInput, WordUsageUncheckedUpdateWithoutSpellingPatternsInput>
    create: XOR<WordUsageCreateWithoutSpellingPatternsInput, WordUsageUncheckedCreateWithoutSpellingPatternsInput>
    where?: WordUsageWhereInput
  }

  export type WordUsageUpdateToOneWithWhereWithoutSpellingPatternsInput = {
    where?: WordUsageWhereInput
    data: XOR<WordUsageUpdateWithoutSpellingPatternsInput, WordUsageUncheckedUpdateWithoutSpellingPatternsInput>
  }

  export type WordUsageUpdateWithoutSpellingPatternsInput = {
    partOfSpeech?: StringFieldUpdateOperationsInput | string
    meaning?: StringFieldUpdateOperationsInput | string
    consonantPhonemes?: ConsonantPhonemeUsageUpdateManyWithoutWordUsageNestedInput
    examples?: ExampleUpdateManyWithoutWordUsageNestedInput
    lexicalSets?: LexicalSetUsageUpdateManyWithoutWordUsageNestedInput
    pronunciations?: PronunciationUpdateManyWithoutWordUsageNestedInput
    entry?: DictionaryEntryUpdateOneRequiredWithoutUsagesNestedInput
  }

  export type WordUsageUncheckedUpdateWithoutSpellingPatternsInput = {
    id?: IntFieldUpdateOperationsInput | number
    entryId?: IntFieldUpdateOperationsInput | number
    partOfSpeech?: StringFieldUpdateOperationsInput | string
    meaning?: StringFieldUpdateOperationsInput | string
    consonantPhonemes?: ConsonantPhonemeUsageUncheckedUpdateManyWithoutWordUsageNestedInput
    examples?: ExampleUncheckedUpdateManyWithoutWordUsageNestedInput
    lexicalSets?: LexicalSetUsageUncheckedUpdateManyWithoutWordUsageNestedInput
    pronunciations?: PronunciationUncheckedUpdateManyWithoutWordUsageNestedInput
  }

  export type LexicalSetUsageCreateWithoutLexicalSetInput = {
    order?: number | null
    wordUsage: WordUsageCreateNestedOneWithoutLexicalSetsInput
  }

  export type LexicalSetUsageUncheckedCreateWithoutLexicalSetInput = {
    id?: number
    usageId: number
    order?: number | null
  }

  export type LexicalSetUsageCreateOrConnectWithoutLexicalSetInput = {
    where: LexicalSetUsageWhereUniqueInput
    create: XOR<LexicalSetUsageCreateWithoutLexicalSetInput, LexicalSetUsageUncheckedCreateWithoutLexicalSetInput>
  }

  export type LexicalSetUsageCreateManyLexicalSetInputEnvelope = {
    data: LexicalSetUsageCreateManyLexicalSetInput | LexicalSetUsageCreateManyLexicalSetInput[]
    skipDuplicates?: boolean
  }

  export type WordCreateWithoutPronunciationInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    word: string
    audio?: AudioCreateNestedOneWithoutWordsInput
    issues?: IssueCreateNestedManyWithoutWordsInput
    consonants?: ConsonantPhonemeCreateNestedManyWithoutWordsInput
  }

  export type WordUncheckedCreateWithoutPronunciationInput = {
    id?: number
    audioId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    word: string
    issues?: IssueUncheckedCreateNestedManyWithoutWordsInput
    consonants?: ConsonantPhonemeUncheckedCreateNestedManyWithoutWordsInput
  }

  export type WordCreateOrConnectWithoutPronunciationInput = {
    where: WordWhereUniqueInput
    create: XOR<WordCreateWithoutPronunciationInput, WordUncheckedCreateWithoutPronunciationInput>
  }

  export type LexicalSetUsageUpsertWithWhereUniqueWithoutLexicalSetInput = {
    where: LexicalSetUsageWhereUniqueInput
    update: XOR<LexicalSetUsageUpdateWithoutLexicalSetInput, LexicalSetUsageUncheckedUpdateWithoutLexicalSetInput>
    create: XOR<LexicalSetUsageCreateWithoutLexicalSetInput, LexicalSetUsageUncheckedCreateWithoutLexicalSetInput>
  }

  export type LexicalSetUsageUpdateWithWhereUniqueWithoutLexicalSetInput = {
    where: LexicalSetUsageWhereUniqueInput
    data: XOR<LexicalSetUsageUpdateWithoutLexicalSetInput, LexicalSetUsageUncheckedUpdateWithoutLexicalSetInput>
  }

  export type LexicalSetUsageUpdateManyWithWhereWithoutLexicalSetInput = {
    where: LexicalSetUsageScalarWhereInput
    data: XOR<LexicalSetUsageUpdateManyMutationInput, LexicalSetUsageUncheckedUpdateManyWithoutLexicalSetInput>
  }

  export type WordUpsertWithWhereUniqueWithoutPronunciationInput = {
    where: WordWhereUniqueInput
    update: XOR<WordUpdateWithoutPronunciationInput, WordUncheckedUpdateWithoutPronunciationInput>
    create: XOR<WordCreateWithoutPronunciationInput, WordUncheckedCreateWithoutPronunciationInput>
  }

  export type WordUpdateWithWhereUniqueWithoutPronunciationInput = {
    where: WordWhereUniqueInput
    data: XOR<WordUpdateWithoutPronunciationInput, WordUncheckedUpdateWithoutPronunciationInput>
  }

  export type WordUpdateManyWithWhereWithoutPronunciationInput = {
    where: WordScalarWhereInput
    data: XOR<WordUpdateManyMutationInput, WordUncheckedUpdateManyWithoutPronunciationInput>
  }

  export type LexicalSetCreateWithoutUsagesInput = {
    name: string
    description?: string | null
    order?: number | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    words?: WordCreateNestedManyWithoutPronunciationInput
  }

  export type LexicalSetUncheckedCreateWithoutUsagesInput = {
    id?: number
    name: string
    description?: string | null
    order?: number | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    words?: WordUncheckedCreateNestedManyWithoutPronunciationInput
  }

  export type LexicalSetCreateOrConnectWithoutUsagesInput = {
    where: LexicalSetWhereUniqueInput
    create: XOR<LexicalSetCreateWithoutUsagesInput, LexicalSetUncheckedCreateWithoutUsagesInput>
  }

  export type WordUsageCreateWithoutLexicalSetsInput = {
    partOfSpeech: string
    meaning: string
    consonantPhonemes?: ConsonantPhonemeUsageCreateNestedManyWithoutWordUsageInput
    examples?: ExampleCreateNestedManyWithoutWordUsageInput
    pronunciations?: PronunciationCreateNestedManyWithoutWordUsageInput
    spellingPatterns?: SpellingPatternCreateNestedManyWithoutWordUsageInput
    entry: DictionaryEntryCreateNestedOneWithoutUsagesInput
  }

  export type WordUsageUncheckedCreateWithoutLexicalSetsInput = {
    id?: number
    entryId: number
    partOfSpeech: string
    meaning: string
    consonantPhonemes?: ConsonantPhonemeUsageUncheckedCreateNestedManyWithoutWordUsageInput
    examples?: ExampleUncheckedCreateNestedManyWithoutWordUsageInput
    pronunciations?: PronunciationUncheckedCreateNestedManyWithoutWordUsageInput
    spellingPatterns?: SpellingPatternUncheckedCreateNestedManyWithoutWordUsageInput
  }

  export type WordUsageCreateOrConnectWithoutLexicalSetsInput = {
    where: WordUsageWhereUniqueInput
    create: XOR<WordUsageCreateWithoutLexicalSetsInput, WordUsageUncheckedCreateWithoutLexicalSetsInput>
  }

  export type LexicalSetUpsertWithoutUsagesInput = {
    update: XOR<LexicalSetUpdateWithoutUsagesInput, LexicalSetUncheckedUpdateWithoutUsagesInput>
    create: XOR<LexicalSetCreateWithoutUsagesInput, LexicalSetUncheckedCreateWithoutUsagesInput>
    where?: LexicalSetWhereInput
  }

  export type LexicalSetUpdateToOneWithWhereWithoutUsagesInput = {
    where?: LexicalSetWhereInput
    data: XOR<LexicalSetUpdateWithoutUsagesInput, LexicalSetUncheckedUpdateWithoutUsagesInput>
  }

  export type LexicalSetUpdateWithoutUsagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    words?: WordUpdateManyWithoutPronunciationNestedInput
  }

  export type LexicalSetUncheckedUpdateWithoutUsagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    words?: WordUncheckedUpdateManyWithoutPronunciationNestedInput
  }

  export type WordUsageUpsertWithoutLexicalSetsInput = {
    update: XOR<WordUsageUpdateWithoutLexicalSetsInput, WordUsageUncheckedUpdateWithoutLexicalSetsInput>
    create: XOR<WordUsageCreateWithoutLexicalSetsInput, WordUsageUncheckedCreateWithoutLexicalSetsInput>
    where?: WordUsageWhereInput
  }

  export type WordUsageUpdateToOneWithWhereWithoutLexicalSetsInput = {
    where?: WordUsageWhereInput
    data: XOR<WordUsageUpdateWithoutLexicalSetsInput, WordUsageUncheckedUpdateWithoutLexicalSetsInput>
  }

  export type WordUsageUpdateWithoutLexicalSetsInput = {
    partOfSpeech?: StringFieldUpdateOperationsInput | string
    meaning?: StringFieldUpdateOperationsInput | string
    consonantPhonemes?: ConsonantPhonemeUsageUpdateManyWithoutWordUsageNestedInput
    examples?: ExampleUpdateManyWithoutWordUsageNestedInput
    pronunciations?: PronunciationUpdateManyWithoutWordUsageNestedInput
    spellingPatterns?: SpellingPatternUpdateManyWithoutWordUsageNestedInput
    entry?: DictionaryEntryUpdateOneRequiredWithoutUsagesNestedInput
  }

  export type WordUsageUncheckedUpdateWithoutLexicalSetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    entryId?: IntFieldUpdateOperationsInput | number
    partOfSpeech?: StringFieldUpdateOperationsInput | string
    meaning?: StringFieldUpdateOperationsInput | string
    consonantPhonemes?: ConsonantPhonemeUsageUncheckedUpdateManyWithoutWordUsageNestedInput
    examples?: ExampleUncheckedUpdateManyWithoutWordUsageNestedInput
    pronunciations?: PronunciationUncheckedUpdateManyWithoutWordUsageNestedInput
    spellingPatterns?: SpellingPatternUncheckedUpdateManyWithoutWordUsageNestedInput
  }

  export type WordUsageCreateWithoutExamplesInput = {
    partOfSpeech: string
    meaning: string
    consonantPhonemes?: ConsonantPhonemeUsageCreateNestedManyWithoutWordUsageInput
    lexicalSets?: LexicalSetUsageCreateNestedManyWithoutWordUsageInput
    pronunciations?: PronunciationCreateNestedManyWithoutWordUsageInput
    spellingPatterns?: SpellingPatternCreateNestedManyWithoutWordUsageInput
    entry: DictionaryEntryCreateNestedOneWithoutUsagesInput
  }

  export type WordUsageUncheckedCreateWithoutExamplesInput = {
    id?: number
    entryId: number
    partOfSpeech: string
    meaning: string
    consonantPhonemes?: ConsonantPhonemeUsageUncheckedCreateNestedManyWithoutWordUsageInput
    lexicalSets?: LexicalSetUsageUncheckedCreateNestedManyWithoutWordUsageInput
    pronunciations?: PronunciationUncheckedCreateNestedManyWithoutWordUsageInput
    spellingPatterns?: SpellingPatternUncheckedCreateNestedManyWithoutWordUsageInput
  }

  export type WordUsageCreateOrConnectWithoutExamplesInput = {
    where: WordUsageWhereUniqueInput
    create: XOR<WordUsageCreateWithoutExamplesInput, WordUsageUncheckedCreateWithoutExamplesInput>
  }

  export type WordUsageUpsertWithoutExamplesInput = {
    update: XOR<WordUsageUpdateWithoutExamplesInput, WordUsageUncheckedUpdateWithoutExamplesInput>
    create: XOR<WordUsageCreateWithoutExamplesInput, WordUsageUncheckedCreateWithoutExamplesInput>
    where?: WordUsageWhereInput
  }

  export type WordUsageUpdateToOneWithWhereWithoutExamplesInput = {
    where?: WordUsageWhereInput
    data: XOR<WordUsageUpdateWithoutExamplesInput, WordUsageUncheckedUpdateWithoutExamplesInput>
  }

  export type WordUsageUpdateWithoutExamplesInput = {
    partOfSpeech?: StringFieldUpdateOperationsInput | string
    meaning?: StringFieldUpdateOperationsInput | string
    consonantPhonemes?: ConsonantPhonemeUsageUpdateManyWithoutWordUsageNestedInput
    lexicalSets?: LexicalSetUsageUpdateManyWithoutWordUsageNestedInput
    pronunciations?: PronunciationUpdateManyWithoutWordUsageNestedInput
    spellingPatterns?: SpellingPatternUpdateManyWithoutWordUsageNestedInput
    entry?: DictionaryEntryUpdateOneRequiredWithoutUsagesNestedInput
  }

  export type WordUsageUncheckedUpdateWithoutExamplesInput = {
    id?: IntFieldUpdateOperationsInput | number
    entryId?: IntFieldUpdateOperationsInput | number
    partOfSpeech?: StringFieldUpdateOperationsInput | string
    meaning?: StringFieldUpdateOperationsInput | string
    consonantPhonemes?: ConsonantPhonemeUsageUncheckedUpdateManyWithoutWordUsageNestedInput
    lexicalSets?: LexicalSetUsageUncheckedUpdateManyWithoutWordUsageNestedInput
    pronunciations?: PronunciationUncheckedUpdateManyWithoutWordUsageNestedInput
    spellingPatterns?: SpellingPatternUncheckedUpdateManyWithoutWordUsageNestedInput
  }

  export type ConsonantPhonemeUsageCreateWithoutConsonantPhonemeInput = {
    order?: number | null
    wordUsage: WordUsageCreateNestedOneWithoutConsonantPhonemesInput
  }

  export type ConsonantPhonemeUsageUncheckedCreateWithoutConsonantPhonemeInput = {
    id?: number
    usageId: number
    order?: number | null
  }

  export type ConsonantPhonemeUsageCreateOrConnectWithoutConsonantPhonemeInput = {
    where: ConsonantPhonemeUsageWhereUniqueInput
    create: XOR<ConsonantPhonemeUsageCreateWithoutConsonantPhonemeInput, ConsonantPhonemeUsageUncheckedCreateWithoutConsonantPhonemeInput>
  }

  export type ConsonantPhonemeUsageCreateManyConsonantPhonemeInputEnvelope = {
    data: ConsonantPhonemeUsageCreateManyConsonantPhonemeInput | ConsonantPhonemeUsageCreateManyConsonantPhonemeInput[]
    skipDuplicates?: boolean
  }

  export type WordCreateWithoutConsonantsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    word: string
    audio?: AudioCreateNestedOneWithoutWordsInput
    issues?: IssueCreateNestedManyWithoutWordsInput
    pronunciation?: LexicalSetCreateNestedManyWithoutWordsInput
  }

  export type WordUncheckedCreateWithoutConsonantsInput = {
    id?: number
    audioId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    word: string
    issues?: IssueUncheckedCreateNestedManyWithoutWordsInput
    pronunciation?: LexicalSetUncheckedCreateNestedManyWithoutWordsInput
  }

  export type WordCreateOrConnectWithoutConsonantsInput = {
    where: WordWhereUniqueInput
    create: XOR<WordCreateWithoutConsonantsInput, WordUncheckedCreateWithoutConsonantsInput>
  }

  export type ConsonantPhonemeUsageUpsertWithWhereUniqueWithoutConsonantPhonemeInput = {
    where: ConsonantPhonemeUsageWhereUniqueInput
    update: XOR<ConsonantPhonemeUsageUpdateWithoutConsonantPhonemeInput, ConsonantPhonemeUsageUncheckedUpdateWithoutConsonantPhonemeInput>
    create: XOR<ConsonantPhonemeUsageCreateWithoutConsonantPhonemeInput, ConsonantPhonemeUsageUncheckedCreateWithoutConsonantPhonemeInput>
  }

  export type ConsonantPhonemeUsageUpdateWithWhereUniqueWithoutConsonantPhonemeInput = {
    where: ConsonantPhonemeUsageWhereUniqueInput
    data: XOR<ConsonantPhonemeUsageUpdateWithoutConsonantPhonemeInput, ConsonantPhonemeUsageUncheckedUpdateWithoutConsonantPhonemeInput>
  }

  export type ConsonantPhonemeUsageUpdateManyWithWhereWithoutConsonantPhonemeInput = {
    where: ConsonantPhonemeUsageScalarWhereInput
    data: XOR<ConsonantPhonemeUsageUpdateManyMutationInput, ConsonantPhonemeUsageUncheckedUpdateManyWithoutConsonantPhonemeInput>
  }

  export type WordUpsertWithWhereUniqueWithoutConsonantsInput = {
    where: WordWhereUniqueInput
    update: XOR<WordUpdateWithoutConsonantsInput, WordUncheckedUpdateWithoutConsonantsInput>
    create: XOR<WordCreateWithoutConsonantsInput, WordUncheckedCreateWithoutConsonantsInput>
  }

  export type WordUpdateWithWhereUniqueWithoutConsonantsInput = {
    where: WordWhereUniqueInput
    data: XOR<WordUpdateWithoutConsonantsInput, WordUncheckedUpdateWithoutConsonantsInput>
  }

  export type WordUpdateManyWithWhereWithoutConsonantsInput = {
    where: WordScalarWhereInput
    data: XOR<WordUpdateManyMutationInput, WordUncheckedUpdateManyWithoutConsonantsInput>
  }

  export type ConsonantPhonemeCreateWithoutUsagesInput = {
    name: string
    description?: string | null
    order?: number | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    words?: WordCreateNestedManyWithoutConsonantsInput
  }

  export type ConsonantPhonemeUncheckedCreateWithoutUsagesInput = {
    id?: number
    name: string
    description?: string | null
    order?: number | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    words?: WordUncheckedCreateNestedManyWithoutConsonantsInput
  }

  export type ConsonantPhonemeCreateOrConnectWithoutUsagesInput = {
    where: ConsonantPhonemeWhereUniqueInput
    create: XOR<ConsonantPhonemeCreateWithoutUsagesInput, ConsonantPhonemeUncheckedCreateWithoutUsagesInput>
  }

  export type WordUsageCreateWithoutConsonantPhonemesInput = {
    partOfSpeech: string
    meaning: string
    examples?: ExampleCreateNestedManyWithoutWordUsageInput
    lexicalSets?: LexicalSetUsageCreateNestedManyWithoutWordUsageInput
    pronunciations?: PronunciationCreateNestedManyWithoutWordUsageInput
    spellingPatterns?: SpellingPatternCreateNestedManyWithoutWordUsageInput
    entry: DictionaryEntryCreateNestedOneWithoutUsagesInput
  }

  export type WordUsageUncheckedCreateWithoutConsonantPhonemesInput = {
    id?: number
    entryId: number
    partOfSpeech: string
    meaning: string
    examples?: ExampleUncheckedCreateNestedManyWithoutWordUsageInput
    lexicalSets?: LexicalSetUsageUncheckedCreateNestedManyWithoutWordUsageInput
    pronunciations?: PronunciationUncheckedCreateNestedManyWithoutWordUsageInput
    spellingPatterns?: SpellingPatternUncheckedCreateNestedManyWithoutWordUsageInput
  }

  export type WordUsageCreateOrConnectWithoutConsonantPhonemesInput = {
    where: WordUsageWhereUniqueInput
    create: XOR<WordUsageCreateWithoutConsonantPhonemesInput, WordUsageUncheckedCreateWithoutConsonantPhonemesInput>
  }

  export type ConsonantPhonemeUpsertWithoutUsagesInput = {
    update: XOR<ConsonantPhonemeUpdateWithoutUsagesInput, ConsonantPhonemeUncheckedUpdateWithoutUsagesInput>
    create: XOR<ConsonantPhonemeCreateWithoutUsagesInput, ConsonantPhonemeUncheckedCreateWithoutUsagesInput>
    where?: ConsonantPhonemeWhereInput
  }

  export type ConsonantPhonemeUpdateToOneWithWhereWithoutUsagesInput = {
    where?: ConsonantPhonemeWhereInput
    data: XOR<ConsonantPhonemeUpdateWithoutUsagesInput, ConsonantPhonemeUncheckedUpdateWithoutUsagesInput>
  }

  export type ConsonantPhonemeUpdateWithoutUsagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    words?: WordUpdateManyWithoutConsonantsNestedInput
  }

  export type ConsonantPhonemeUncheckedUpdateWithoutUsagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    words?: WordUncheckedUpdateManyWithoutConsonantsNestedInput
  }

  export type WordUsageUpsertWithoutConsonantPhonemesInput = {
    update: XOR<WordUsageUpdateWithoutConsonantPhonemesInput, WordUsageUncheckedUpdateWithoutConsonantPhonemesInput>
    create: XOR<WordUsageCreateWithoutConsonantPhonemesInput, WordUsageUncheckedCreateWithoutConsonantPhonemesInput>
    where?: WordUsageWhereInput
  }

  export type WordUsageUpdateToOneWithWhereWithoutConsonantPhonemesInput = {
    where?: WordUsageWhereInput
    data: XOR<WordUsageUpdateWithoutConsonantPhonemesInput, WordUsageUncheckedUpdateWithoutConsonantPhonemesInput>
  }

  export type WordUsageUpdateWithoutConsonantPhonemesInput = {
    partOfSpeech?: StringFieldUpdateOperationsInput | string
    meaning?: StringFieldUpdateOperationsInput | string
    examples?: ExampleUpdateManyWithoutWordUsageNestedInput
    lexicalSets?: LexicalSetUsageUpdateManyWithoutWordUsageNestedInput
    pronunciations?: PronunciationUpdateManyWithoutWordUsageNestedInput
    spellingPatterns?: SpellingPatternUpdateManyWithoutWordUsageNestedInput
    entry?: DictionaryEntryUpdateOneRequiredWithoutUsagesNestedInput
  }

  export type WordUsageUncheckedUpdateWithoutConsonantPhonemesInput = {
    id?: IntFieldUpdateOperationsInput | number
    entryId?: IntFieldUpdateOperationsInput | number
    partOfSpeech?: StringFieldUpdateOperationsInput | string
    meaning?: StringFieldUpdateOperationsInput | string
    examples?: ExampleUncheckedUpdateManyWithoutWordUsageNestedInput
    lexicalSets?: LexicalSetUsageUncheckedUpdateManyWithoutWordUsageNestedInput
    pronunciations?: PronunciationUncheckedUpdateManyWithoutWordUsageNestedInput
    spellingPatterns?: SpellingPatternUncheckedUpdateManyWithoutWordUsageNestedInput
  }

  export type PronCmuDictCreateWithoutOrthoWordInput = {
    pronCmuDict: string
  }

  export type PronCmuDictUncheckedCreateWithoutOrthoWordInput = {
    id?: number
    pronCmuDict: string
  }

  export type PronCmuDictCreateOrConnectWithoutOrthoWordInput = {
    where: PronCmuDictWhereUniqueInput
    create: XOR<PronCmuDictCreateWithoutOrthoWordInput, PronCmuDictUncheckedCreateWithoutOrthoWordInput>
  }

  export type PronCmuDictCreateManyOrthoWordInputEnvelope = {
    data: PronCmuDictCreateManyOrthoWordInput | PronCmuDictCreateManyOrthoWordInput[]
    skipDuplicates?: boolean
  }

  export type PronCmuDictUpsertWithWhereUniqueWithoutOrthoWordInput = {
    where: PronCmuDictWhereUniqueInput
    update: XOR<PronCmuDictUpdateWithoutOrthoWordInput, PronCmuDictUncheckedUpdateWithoutOrthoWordInput>
    create: XOR<PronCmuDictCreateWithoutOrthoWordInput, PronCmuDictUncheckedCreateWithoutOrthoWordInput>
  }

  export type PronCmuDictUpdateWithWhereUniqueWithoutOrthoWordInput = {
    where: PronCmuDictWhereUniqueInput
    data: XOR<PronCmuDictUpdateWithoutOrthoWordInput, PronCmuDictUncheckedUpdateWithoutOrthoWordInput>
  }

  export type PronCmuDictUpdateManyWithWhereWithoutOrthoWordInput = {
    where: PronCmuDictScalarWhereInput
    data: XOR<PronCmuDictUpdateManyMutationInput, PronCmuDictUncheckedUpdateManyWithoutOrthoWordInput>
  }

  export type PronCmuDictScalarWhereInput = {
    AND?: PronCmuDictScalarWhereInput | PronCmuDictScalarWhereInput[]
    OR?: PronCmuDictScalarWhereInput[]
    NOT?: PronCmuDictScalarWhereInput | PronCmuDictScalarWhereInput[]
    id?: IntFilter<"PronCmuDict"> | number
    orthoWordId?: IntFilter<"PronCmuDict"> | number
    pronCmuDict?: StringFilter<"PronCmuDict"> | string
  }

  export type OrthoWordCreateWithoutPronsCmuDictInput = {
    word: string
    freqSubtlexUs?: number | null
  }

  export type OrthoWordUncheckedCreateWithoutPronsCmuDictInput = {
    id?: number
    word: string
    freqSubtlexUs?: number | null
  }

  export type OrthoWordCreateOrConnectWithoutPronsCmuDictInput = {
    where: OrthoWordWhereUniqueInput
    create: XOR<OrthoWordCreateWithoutPronsCmuDictInput, OrthoWordUncheckedCreateWithoutPronsCmuDictInput>
  }

  export type OrthoWordUpsertWithoutPronsCmuDictInput = {
    update: XOR<OrthoWordUpdateWithoutPronsCmuDictInput, OrthoWordUncheckedUpdateWithoutPronsCmuDictInput>
    create: XOR<OrthoWordCreateWithoutPronsCmuDictInput, OrthoWordUncheckedCreateWithoutPronsCmuDictInput>
    where?: OrthoWordWhereInput
  }

  export type OrthoWordUpdateToOneWithWhereWithoutPronsCmuDictInput = {
    where?: OrthoWordWhereInput
    data: XOR<OrthoWordUpdateWithoutPronsCmuDictInput, OrthoWordUncheckedUpdateWithoutPronsCmuDictInput>
  }

  export type OrthoWordUpdateWithoutPronsCmuDictInput = {
    word?: StringFieldUpdateOperationsInput | string
    freqSubtlexUs?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrthoWordUncheckedUpdateWithoutPronsCmuDictInput = {
    id?: IntFieldUpdateOperationsInput | number
    word?: StringFieldUpdateOperationsInput | string
    freqSubtlexUs?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AudioUpdateWithoutUsersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    words?: WordUpdateManyWithoutAudioNestedInput
  }

  export type AudioUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
    words?: WordUncheckedUpdateManyWithoutAudioNestedInput
  }

  export type AudioUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type WordCreateManyAudioInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    word: string
  }

  export type WordUpdateWithoutAudioInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    word?: StringFieldUpdateOperationsInput | string
    issues?: IssueUpdateManyWithoutWordsNestedInput
    consonants?: ConsonantPhonemeUpdateManyWithoutWordsNestedInput
    pronunciation?: LexicalSetUpdateManyWithoutWordsNestedInput
  }

  export type WordUncheckedUpdateWithoutAudioInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    word?: StringFieldUpdateOperationsInput | string
    issues?: IssueUncheckedUpdateManyWithoutWordsNestedInput
    consonants?: ConsonantPhonemeUncheckedUpdateManyWithoutWordsNestedInput
    pronunciation?: LexicalSetUncheckedUpdateManyWithoutWordsNestedInput
  }

  export type WordUncheckedUpdateManyWithoutAudioInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    word?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutAudiosInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auth0Id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutAudiosInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auth0Id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyWithoutAudiosInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auth0Id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IssueUpdateWithoutWordsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feature?: FeatureUpdateOneRequiredWithoutIssuesNestedInput
  }

  export type IssueUncheckedUpdateWithoutWordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    featureId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IssueUncheckedUpdateManyWithoutWordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    featureId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsonantPhonemeUpdateWithoutWordsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usages?: ConsonantPhonemeUsageUpdateManyWithoutConsonantPhonemeNestedInput
  }

  export type ConsonantPhonemeUncheckedUpdateWithoutWordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usages?: ConsonantPhonemeUsageUncheckedUpdateManyWithoutConsonantPhonemeNestedInput
  }

  export type ConsonantPhonemeUncheckedUpdateManyWithoutWordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LexicalSetUpdateWithoutWordsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usages?: LexicalSetUsageUpdateManyWithoutLexicalSetNestedInput
  }

  export type LexicalSetUncheckedUpdateWithoutWordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usages?: LexicalSetUsageUncheckedUpdateManyWithoutLexicalSetNestedInput
  }

  export type LexicalSetUncheckedUpdateManyWithoutWordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WordUpdateWithoutIssuesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    word?: StringFieldUpdateOperationsInput | string
    audio?: AudioUpdateOneWithoutWordsNestedInput
    consonants?: ConsonantPhonemeUpdateManyWithoutWordsNestedInput
    pronunciation?: LexicalSetUpdateManyWithoutWordsNestedInput
  }

  export type WordUncheckedUpdateWithoutIssuesInput = {
    id?: IntFieldUpdateOperationsInput | number
    audioId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    word?: StringFieldUpdateOperationsInput | string
    consonants?: ConsonantPhonemeUncheckedUpdateManyWithoutWordsNestedInput
    pronunciation?: LexicalSetUncheckedUpdateManyWithoutWordsNestedInput
  }

  export type WordUncheckedUpdateManyWithoutIssuesInput = {
    id?: IntFieldUpdateOperationsInput | number
    audioId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    word?: StringFieldUpdateOperationsInput | string
  }

  export type IssueCreateManyFeatureInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IssueUpdateWithoutFeatureInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    words?: WordUpdateManyWithoutIssuesNestedInput
  }

  export type IssueUncheckedUpdateWithoutFeatureInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    words?: WordUncheckedUpdateManyWithoutIssuesNestedInput
  }

  export type IssueUncheckedUpdateManyWithoutFeatureInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WordUsageCreateManyEntryInput = {
    id?: number
    partOfSpeech: string
    meaning: string
  }

  export type WordVariationCreateManyEntryInput = {
    id?: number
    form: string
    type: string
    isRegular: boolean
    notes?: string | null
  }

  export type WordUsageUpdateWithoutEntryInput = {
    partOfSpeech?: StringFieldUpdateOperationsInput | string
    meaning?: StringFieldUpdateOperationsInput | string
    consonantPhonemes?: ConsonantPhonemeUsageUpdateManyWithoutWordUsageNestedInput
    examples?: ExampleUpdateManyWithoutWordUsageNestedInput
    lexicalSets?: LexicalSetUsageUpdateManyWithoutWordUsageNestedInput
    pronunciations?: PronunciationUpdateManyWithoutWordUsageNestedInput
    spellingPatterns?: SpellingPatternUpdateManyWithoutWordUsageNestedInput
  }

  export type WordUsageUncheckedUpdateWithoutEntryInput = {
    id?: IntFieldUpdateOperationsInput | number
    partOfSpeech?: StringFieldUpdateOperationsInput | string
    meaning?: StringFieldUpdateOperationsInput | string
    consonantPhonemes?: ConsonantPhonemeUsageUncheckedUpdateManyWithoutWordUsageNestedInput
    examples?: ExampleUncheckedUpdateManyWithoutWordUsageNestedInput
    lexicalSets?: LexicalSetUsageUncheckedUpdateManyWithoutWordUsageNestedInput
    pronunciations?: PronunciationUncheckedUpdateManyWithoutWordUsageNestedInput
    spellingPatterns?: SpellingPatternUncheckedUpdateManyWithoutWordUsageNestedInput
  }

  export type WordUsageUncheckedUpdateManyWithoutEntryInput = {
    id?: IntFieldUpdateOperationsInput | number
    partOfSpeech?: StringFieldUpdateOperationsInput | string
    meaning?: StringFieldUpdateOperationsInput | string
  }

  export type WordVariationUpdateWithoutEntryInput = {
    form?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRegular?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WordVariationUncheckedUpdateWithoutEntryInput = {
    id?: IntFieldUpdateOperationsInput | number
    form?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRegular?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WordVariationUncheckedUpdateManyWithoutEntryInput = {
    id?: IntFieldUpdateOperationsInput | number
    form?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRegular?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConsonantPhonemeUsageCreateManyWordUsageInput = {
    id?: number
    consonantPhonemeId: number
    order?: number | null
  }

  export type ExampleCreateManyWordUsageInput = {
    id?: number
    sentence: string
    context?: string | null
    difficulty?: string | null
    tags?: ExampleCreatetagsInput | string[]
  }

  export type LexicalSetUsageCreateManyWordUsageInput = {
    id?: number
    lexicalSetId: number
    order?: number | null
  }

  export type PronunciationCreateManyWordUsageInput = {
    id?: number
    phonemic?: string | null
    broadIPA?: string | null
    narrowIPA?: string | null
    audioUrl?: string | null
    speaker?: string | null
    dialect?: string | null
    isPrimary?: boolean
    notes?: string | null
    order?: number | null
  }

  export type SpellingPatternCreateManyWordUsageInput = {
    id?: number
    pattern: string
    type: string
    description?: string | null
    order?: number | null
  }

  export type ConsonantPhonemeUsageUpdateWithoutWordUsageInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    consonantPhoneme?: ConsonantPhonemeUpdateOneRequiredWithoutUsagesNestedInput
  }

  export type ConsonantPhonemeUsageUncheckedUpdateWithoutWordUsageInput = {
    id?: IntFieldUpdateOperationsInput | number
    consonantPhonemeId?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ConsonantPhonemeUsageUncheckedUpdateManyWithoutWordUsageInput = {
    id?: IntFieldUpdateOperationsInput | number
    consonantPhonemeId?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExampleUpdateWithoutWordUsageInput = {
    sentence?: StringFieldUpdateOperationsInput | string
    context?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExampleUpdatetagsInput | string[]
  }

  export type ExampleUncheckedUpdateWithoutWordUsageInput = {
    id?: IntFieldUpdateOperationsInput | number
    sentence?: StringFieldUpdateOperationsInput | string
    context?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExampleUpdatetagsInput | string[]
  }

  export type ExampleUncheckedUpdateManyWithoutWordUsageInput = {
    id?: IntFieldUpdateOperationsInput | number
    sentence?: StringFieldUpdateOperationsInput | string
    context?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ExampleUpdatetagsInput | string[]
  }

  export type LexicalSetUsageUpdateWithoutWordUsageInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    lexicalSet?: LexicalSetUpdateOneRequiredWithoutUsagesNestedInput
  }

  export type LexicalSetUsageUncheckedUpdateWithoutWordUsageInput = {
    id?: IntFieldUpdateOperationsInput | number
    lexicalSetId?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LexicalSetUsageUncheckedUpdateManyWithoutWordUsageInput = {
    id?: IntFieldUpdateOperationsInput | number
    lexicalSetId?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PronunciationUpdateWithoutWordUsageInput = {
    phonemic?: NullableStringFieldUpdateOperationsInput | string | null
    broadIPA?: NullableStringFieldUpdateOperationsInput | string | null
    narrowIPA?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    speaker?: NullableStringFieldUpdateOperationsInput | string | null
    dialect?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PronunciationUncheckedUpdateWithoutWordUsageInput = {
    id?: IntFieldUpdateOperationsInput | number
    phonemic?: NullableStringFieldUpdateOperationsInput | string | null
    broadIPA?: NullableStringFieldUpdateOperationsInput | string | null
    narrowIPA?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    speaker?: NullableStringFieldUpdateOperationsInput | string | null
    dialect?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PronunciationUncheckedUpdateManyWithoutWordUsageInput = {
    id?: IntFieldUpdateOperationsInput | number
    phonemic?: NullableStringFieldUpdateOperationsInput | string | null
    broadIPA?: NullableStringFieldUpdateOperationsInput | string | null
    narrowIPA?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    speaker?: NullableStringFieldUpdateOperationsInput | string | null
    dialect?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpellingPatternUpdateWithoutWordUsageInput = {
    pattern?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpellingPatternUncheckedUpdateWithoutWordUsageInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpellingPatternUncheckedUpdateManyWithoutWordUsageInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LexicalSetUsageCreateManyLexicalSetInput = {
    id?: number
    usageId: number
    order?: number | null
  }

  export type LexicalSetUsageUpdateWithoutLexicalSetInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    wordUsage?: WordUsageUpdateOneRequiredWithoutLexicalSetsNestedInput
  }

  export type LexicalSetUsageUncheckedUpdateWithoutLexicalSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    usageId?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LexicalSetUsageUncheckedUpdateManyWithoutLexicalSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    usageId?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WordUpdateWithoutPronunciationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    word?: StringFieldUpdateOperationsInput | string
    audio?: AudioUpdateOneWithoutWordsNestedInput
    issues?: IssueUpdateManyWithoutWordsNestedInput
    consonants?: ConsonantPhonemeUpdateManyWithoutWordsNestedInput
  }

  export type WordUncheckedUpdateWithoutPronunciationInput = {
    id?: IntFieldUpdateOperationsInput | number
    audioId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    word?: StringFieldUpdateOperationsInput | string
    issues?: IssueUncheckedUpdateManyWithoutWordsNestedInput
    consonants?: ConsonantPhonemeUncheckedUpdateManyWithoutWordsNestedInput
  }

  export type WordUncheckedUpdateManyWithoutPronunciationInput = {
    id?: IntFieldUpdateOperationsInput | number
    audioId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    word?: StringFieldUpdateOperationsInput | string
  }

  export type ConsonantPhonemeUsageCreateManyConsonantPhonemeInput = {
    id?: number
    usageId: number
    order?: number | null
  }

  export type ConsonantPhonemeUsageUpdateWithoutConsonantPhonemeInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    wordUsage?: WordUsageUpdateOneRequiredWithoutConsonantPhonemesNestedInput
  }

  export type ConsonantPhonemeUsageUncheckedUpdateWithoutConsonantPhonemeInput = {
    id?: IntFieldUpdateOperationsInput | number
    usageId?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ConsonantPhonemeUsageUncheckedUpdateManyWithoutConsonantPhonemeInput = {
    id?: IntFieldUpdateOperationsInput | number
    usageId?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WordUpdateWithoutConsonantsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    word?: StringFieldUpdateOperationsInput | string
    audio?: AudioUpdateOneWithoutWordsNestedInput
    issues?: IssueUpdateManyWithoutWordsNestedInput
    pronunciation?: LexicalSetUpdateManyWithoutWordsNestedInput
  }

  export type WordUncheckedUpdateWithoutConsonantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    audioId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    word?: StringFieldUpdateOperationsInput | string
    issues?: IssueUncheckedUpdateManyWithoutWordsNestedInput
    pronunciation?: LexicalSetUncheckedUpdateManyWithoutWordsNestedInput
  }

  export type WordUncheckedUpdateManyWithoutConsonantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    audioId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    word?: StringFieldUpdateOperationsInput | string
  }

  export type PronCmuDictCreateManyOrthoWordInput = {
    id?: number
    pronCmuDict: string
  }

  export type PronCmuDictUpdateWithoutOrthoWordInput = {
    pronCmuDict?: StringFieldUpdateOperationsInput | string
  }

  export type PronCmuDictUncheckedUpdateWithoutOrthoWordInput = {
    id?: IntFieldUpdateOperationsInput | number
    pronCmuDict?: StringFieldUpdateOperationsInput | string
  }

  export type PronCmuDictUncheckedUpdateManyWithoutOrthoWordInput = {
    id?: IntFieldUpdateOperationsInput | number
    pronCmuDict?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}